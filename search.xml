<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python学记笔记(二)]]></title>
    <url>%2F2019%2F07%2F11%2FPython%E5%AD%A6%E8%AE%B0%E7%AC%94%E8%AE%B0-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[第二章 列表简介 2.1 列表 列表 由一系列元素按特定顺序排列组成。 在Python中，用方括号（ [ ] ）来表示列表，并用逗号分隔其中的元素。12fruits = ['apple', 'banana', 'orange']print(fruits) 如果将列表打印出来，Python将打印列表的内部表示，包括方括号。输出结果： [‘apple’, ‘banana’, ‘orange’] 2.1.1 访问列表元素列表是有序集合，要访问列表元素，只需像C语言中的数组一样，将元素的索引或位置表示出来即可。例如：12fruits = ['apple', 'banana', 'orange']print(fruits[0]) 输出结果： apple 可以发现列表的索引与数组一样都是从0开始的。 但Python还提供了一种特殊语法，索引-1返回倒数第一个元素。所以一个长度为a的列表索引取值范围为：[ -a, a-1] 2.2 修改、添加和删除元素 2.1.1 修改可直接用赋值的方法修改列表的元素123fruits = ['apple', 'banana', 'orange']fruits[1] = "peach"print(fruits[1]) 2.2.2 添加1.在列表末尾添加元素123fruits = ['apple', 'banana', 'orange']fruits.append('peach')print(fruits) 输出结果为： [‘apple’, ‘banana’, ‘orange’, ‘peach’] 方法append()会将参数的元素添加到列表末尾，而不影响其他元素 2.在列表中插入元素使用insert()可在列表中的任何位置插入新的元素。为此需要指定新元素和索引的值。123fruits = ['apple', 'banana', 'orange']fruits.insert(2,'peach')print(fruits) 在此示例中，insert(2, ‘peach’) 将新元素: ‘peach’（第二个参数）插入到原列表的第2个位置（第一个参数）；同时，从原来第2个位置往后的所有元素后移一位。 2.2.3 删除1.使用del语句删除元素如果已知所需删除的元素的位置，可以使用del语句123fruits = ['apple', 'banana', 'orange']del fruits[0]print(fruits) 输出结果为： [‘banana’, ‘orange’] 2.使用方法pop()删除元素有时候需要将元素从列表中删除，并接着使用它的值。 ① 方法pop()可删除列表末尾的元素，并返回其值（类比弹出栈的栈顶元素）123456fruits = ['apple', 'banana', 'orange']print(fruits)popped_fruit = fruits.pop()print(popped_fruit)print(fruits) 输出结果为： [‘apple’, ‘banana’, ‘orange’]orange[‘apple’, ‘banana’] ② pop()可以在括号中加入参数，表示要删除的元素的索引1234fruits = ['apple', 'banana', 'orange']popped_fruit = fruits.pop(2)print(popped_fruit) 输出结果为： orange 3.根据值使用remove方法删除元素有时候，我们不知道所需删除的元素的具体位置，只知道需要删除的元素的值，可以使用方法remove()1234fruits = ['apple', 'banana', 'orange', 'apple']print(fruits)fruits.remove('apple')print(fruits) 输出结果为： [‘apple’, ‘banana’, ‘orange’, ‘apple’][‘banana’, ‘orange’, ‘apple’] 注意: remove只能删除第一个指定的元素 2.3 组织列表 2.3.1 使用方法sort()对列表永久性排序1234fruits = ['banana', 'orange', 'apple']print(fruits)fruits.sort()print(fruits) 输出结果为： [‘banana’, ‘orange’, ‘apple’][‘apple’, ‘banana’, ‘orange’] 使用sort()之后，列表元素的顺序发生了永久性的变化 如果要按相反顺序排序列表，可以向sort()方法传递参数reverse = True123fruits = ['banana', 'orange', 'apple']fruits.sort(reverse = True)print(fruits) 输出结果为： [‘orange’, ‘banana’, ‘apple’] 2.3.2 使用函数sorted()对列表暂时性排序12345678fruits = ['banana', 'orange', 'apple']print("Here is the original list:")print(fruits)print("\nHere is the sorted list:")print(sorted(fruits))print("\nHere is the original list again:")print(fruits) 输出结果为： Here is the original list:[‘banana’, ‘orange’, ‘apple’] Here is the sorted list:[‘apple’, ‘banana’, ‘orange’] Here is the original list again:[‘banana’, ‘orange’, ‘apple’] 可见使用sorted后，列表元素的顺序并没有发生改变，sorted函数返回的是排序过的新列表 同样，可以向sorted()函数传递参数reverse = True 使其反向排序 2.3.3 倒着打印列表翻转列表元素的排列顺序，可以使用方法reverse()123fruits = ['banana', 'orange', 'apple']fruits.reverse()print(fruits) 输出结果为： [‘apple’, ‘orange’, ‘banana’] 可见方法reverse()永久性地改变了列表元素的排列顺序，翻转了原来的列表元素顺序 2.3.4 确定列表的长度使用函数len()可以快速得到列表的长度。12fruits = ['banana', 'orange', 'apple']print(len(fruits)) 输出结果为: 3]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python学习笔记(一)]]></title>
    <url>%2F2019%2F07%2F10%2FPython%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[第一章 变量和简单数据类型 1.1 变量的使用和命名 12message = "Hello World"print(message) 运行结果： Hello World 变量命名规则： 变量名只能包含字母、数字、下划线 变量名可以字母或者下划线打头，但不能以数字打头 不能将Python关键字当做变量名 1.2 字符串 字符串 就是一新系列字符。在Python中，用引号括起来的都是字符串。其中引号可以是单引号，也可是双引号，这使得你能够在字符串中包含引号和撇号。 例如:1234"This's a string"'This is also a string''I told you, "Python is the best in the world!" '"It's beautiful." 1.2.1 使用方法修改字符串的大小写 123456name = "ada lovelace"print(name.title())name = "ADa"print(name.title())print(name.upper())print(name.lower()) 输出结果： Ada LovelaceAdaADAada 方法 是Python可对数据进行的操作。 方法title()以首字母大写的方式显示每个单词。 方法upper()以大写显示所有字母字符 方法lower()以小写显示所有字符字母 1.2.2 合并（拼接）字符串12345first_name = "ada"second_name = "lovelace"full_name = first_name + " " + second_nameprint(full_name)print(full_name*3) 输出结果： ada lovelaceada lovelaceada lovelaceada lovelace Python用 加号 (+)和乘号 (*) 来合并字符串。这种合并方法称为 拼接 。 e.g:123#接上代码message = "Hello, " + full_name.title() + "!"print(message) 输出结果： Hello, Ada Lovelace! 1.2.3 删除空白12345s = " python "print(s.lstrip())print(s.rstrip())print(s.strip())print(s) 输出结果： python· （·代表空格）·pythonpython·python· 空白 泛指任何非打印字符，包括空格、制表符和换行符。 方法strip()删除字符串首尾空格。 方法lstrip()删除字符串首空格。 方法rstrip()删除字符串尾空格。 可以发现，在使用过这些方法后，原字符串并没有发生相应的变化 1.3 数字 1.3.1 整数Python使用两个乘号表示乘法运算1234&gt;&gt;&gt; 3 ** 29&gt;&gt;&gt; 3 ** 327 1.3.2 浮点数这个没什么好讲的 1.3.3 函数str()在字符串中需要用到数字变量的值时12345678age = 25print("Happy " + age + "th Birthday") #这种写法是错误的------------------------------------------------------------返回错误报告：Traceback (most recent call last): File "D:/Pytest/1.py", line 2, in &lt;module&gt; print("Happy " + age + "th Birthday") TypeError: can only concatenate str (not "int") to str 之所以会出现这样的错误，是因为类型不匹配Python无法将 int 和 str 类型的变量拼接在一起 为此可以调用str()函数，将非字符串变量表示为字符串12age = 25print("Happy " + str(age) + "th Brithday") 输出结果为： Happy 25th Birthday]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随便写写]]></title>
    <url>%2F2019%2F06%2F15%2F%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99%2F</url>
    <content type="text"><![CDATA[主要特性1234567891011121314#include&lt;stdio.h&gt;int main()&#123; int i; int j; int i; int j; &#123; int l; &#125; &#123; int k; &#125;&#125; 使用 Ctrl+Alt+Del 重启电脑 Editor.md好用 f'(x_0)=\lim_{\Delta x\to 0} \frac{f(x_0+\Delta x) - f(x_0)}{\Delta x}]]></content>
      <categories>
        <category>杂感</category>
      </categories>
      <tags>
        <tag>杂感</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
