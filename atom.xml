<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Irimsky</title>
  
  <subtitle>爱我所爱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-11T12:00:02.148Z</updated>
  <id>/</id>
  
  <author>
    <name>Irimsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学记笔记(二)</title>
    <link href="/2019/07/11/Python%E5%AD%A6%E8%AE%B0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>/2019/07/11/Python学记笔记-二/</id>
    <published>2019-07-11T06:42:23.000Z</published>
    <updated>2019-07-11T12:00:02.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-列表简介"><a href="#第二章-列表简介" class="headerlink" title="第二章 列表简介"></a>第二章 列表简介</h1><a id="more"></a><p><br><br></p><h2 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h2><hr><p><font face="楷体" size="3"><u>列表</u> </font>由一系列元素按特定顺序排列组成。</p><p>在Python中，用方括号（ [ ] ）来表示列表，并用逗号分隔其中的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>如果将列表打印出来，Python将打印列表的内部表示，包括方括号。<br>输出结果：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><h3 id="2-1-1-访问列表元素"><a href="#2-1-1-访问列表元素" class="headerlink" title="2.1.1 访问列表元素"></a>2.1.1 访问列表元素</h3><p>列表是有序集合，要访问列表元素，只需像C语言中的数组一样，将元素的索引或位置表示出来即可。<br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>apple</p></blockquote><ul><li>可以发现列表的索引与数组一样都是从0开始的。</li><li>但Python还提供了一种特殊语法，索引-1返回倒数第一个元素。<u>所以一个长度为a的列表索引取值范围为：[ -a, a-1]  </u><br><br> <br></li></ul><h2 id="2-2-修改、添加和删除元素"><a href="#2-2-修改、添加和删除元素" class="headerlink" title="2.2 修改、添加和删除元素"></a>2.2 修改、添加和删除元素</h2><hr><h3 id="2-1-1-修改"><a href="#2-1-1-修改" class="headerlink" title="2.1.1 修改"></a>2.1.1 修改</h3><p>可直接用赋值的方法修改列表的元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">"peach"</span></span><br><span class="line">print(fruits[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><h3 id="2-2-2-添加"><a href="#2-2-2-添加" class="headerlink" title="2.2.2 添加"></a>2.2.2 添加</h3><h4 id="1-在列表末尾添加元素"><a href="#1-在列表末尾添加元素" class="headerlink" title="1.在列表末尾添加元素"></a>1.在列表末尾添加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits.append(<span class="string">'peach'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘peach’]</p></blockquote><p>方法<code>append()</code>会将参数的元素添加到列表末尾，而不影响其他元素</p><h4 id="2-在列表中插入元素"><a href="#2-在列表中插入元素" class="headerlink" title="2.在列表中插入元素"></a>2.在列表中插入元素</h4><p>使用<code>insert()</code>可在列表中的任何位置插入新的元素。<b>为此需要指定新元素和索引的值。</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits.insert(<span class="number">2</span>,<span class="string">'peach'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><ul><li>在此示例中，insert(2, ‘peach’) 将新元素: ‘peach’（第二个参数）插入到原列表的第2个位置（第一个参数）；同时，从原来第2个位置往后的所有元素后移一位。</li></ul><h3 id="2-2-3-删除"><a href="#2-2-3-删除" class="headerlink" title="2.2.3 删除"></a>2.2.3 删除</h3><h4 id="1-使用del语句删除元素"><a href="#1-使用del语句删除元素" class="headerlink" title="1.使用del语句删除元素"></a>1.使用del语句删除元素</h4><p>如果<u>已知所需删除的元素的位置</u>，可以使用<code>del语句</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">del</span> fruits[<span class="number">0</span>]</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘banana’, ‘orange’]</p></blockquote><h4 id="2-使用方法pop-删除元素"><a href="#2-使用方法pop-删除元素" class="headerlink" title="2.使用方法pop()删除元素"></a>2.使用方法pop()删除元素</h4><p>有时候需要<u>将元素从列表中删除，并接着使用它的值。</u></p><p>① 方法<code>pop()</code>可删除列表末尾的元素，并返回其值（类比弹出栈的栈顶元素）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line">popped_fruit = fruits.pop()</span><br><span class="line">print(popped_fruit)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]<br>orange<br>[‘apple’, ‘banana’]</p></blockquote><p>② pop()可以在括号中加入参数，表示要删除的元素的索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"></span><br><span class="line">popped_fruit = fruits.pop(<span class="number">2</span>)</span><br><span class="line">print(popped_fruit)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>orange</p></blockquote><h4 id="3-根据值使用remove方法删除元素"><a href="#3-根据值使用remove方法删除元素" class="headerlink" title="3.根据值使用remove方法删除元素"></a>3.根据值使用remove方法删除元素</h4><p>有时候，我们<u>不知道所需删除的元素的具体位置，只知道需要删除的元素的值</u>，可以使用方法<code>remove()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.remove(<span class="string">'apple'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘apple’]<br>[‘banana’, ‘orange’, ‘apple’]</p></blockquote><p><font size="4" face="黑体"><strong>注意</strong>: </font>  remove只能删除第一个指定的元素<br><br><br></p><h2 id="2-3-组织列表"><a href="#2-3-组织列表" class="headerlink" title="2.3 组织列表"></a>2.3 组织列表</h2><hr><h3 id="2-3-1-使用方法sort-对列表永久性排序"><a href="#2-3-1-使用方法sort-对列表永久性排序" class="headerlink" title="2.3.1 使用方法sort()对列表永久性排序"></a>2.3.1 使用方法sort()对列表永久性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.sort()</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘banana’, ‘orange’, ‘apple’]<br>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p>使用sort()之后，列表元素的顺序发生了永久性的变化</p><ul><li>如果要按相反顺序排序列表，可以向sort()方法传递参数<code>reverse = True</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">fruits.sort(reverse = <span class="literal">True</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为：</p><blockquote><p>[‘orange’, ‘banana’, ‘apple’]</p></blockquote><h3 id="2-3-2-使用函数sorted-对列表暂时性排序"><a href="#2-3-2-使用函数sorted-对列表暂时性排序" class="headerlink" title="2.3.2 使用函数sorted()对列表暂时性排序"></a>2.3.2 使用函数sorted()对列表暂时性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Here is the original list:"</span>)</span><br><span class="line">print(fruits)</span><br><span class="line">print(<span class="string">"\nHere is the sorted list:"</span>)</span><br><span class="line">print(sorted(fruits))</span><br><span class="line">print(<span class="string">"\nHere is the original list again:"</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>Here is the original list:<br>[‘banana’, ‘orange’, ‘apple’]</p><p>Here is the sorted list:<br>[‘apple’, ‘banana’, ‘orange’]</p><p>Here is the original list again:<br>[‘banana’, ‘orange’, ‘apple’]</p></blockquote><p>可见使用sorted后，列表元素的顺序并没有发生改变，sorted函数返回的是<b>排序过的新列表</b></p><ul><li>同样，可以向sorted()函数传递参数<code>reverse = True</code> 使其反向排序</li></ul><h3 id="2-3-3-倒着打印列表"><a href="#2-3-3-倒着打印列表" class="headerlink" title="2.3.3 倒着打印列表"></a>2.3.3 倒着打印列表</h3><p>翻转列表元素的排列顺序，可以使用方法<code>reverse()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">fruits.reverse()</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘orange’, ‘banana’]</p></blockquote><p>可见方法reverse()永久性地改变了列表元素的排列顺序，<b>翻转了原来的列表元素顺序</b></p><h3 id="2-3-4-确定列表的长度"><a href="#2-3-4-确定列表的长度" class="headerlink" title="2.3.4 确定列表的长度"></a>2.3.4 确定列表的长度</h3><p>使用函数<code>len()</code>可以快速得到列表的长度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(len(fruits))</span><br></pre></td></tr></table></figure></p><p>输出结果为:</p><blockquote><p>3</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章-列表简介&quot;&gt;&lt;a href=&quot;#第二章-列表简介&quot; class=&quot;headerlink&quot; title=&quot;第二章 列表简介&quot;&gt;&lt;/a&gt;第二章 列表简介&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(一)</title>
    <link href="/2019/07/10/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>/2019/07/10/Python学习笔记-一/</id>
    <published>2019-07-10T05:58:37.000Z</published>
    <updated>2019-07-11T02:47:32.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-变量和简单数据类型"><a href="#第一章-变量和简单数据类型" class="headerlink" title="第一章 变量和简单数据类型"></a>第一章 变量和简单数据类型</h1><a id="more"></a><p><br><br></p><h2 id="1-1-变量的使用和命名"><a href="#1-1-变量的使用和命名" class="headerlink" title="1.1 变量的使用和命名"></a>1.1 变量的使用和命名</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"Hello World"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p><b>运行结果：</b></p><blockquote><p>Hello World</p></blockquote><p><b>变量命名规则：</b></p><ul><li>变量名只能包含<b><u>字母、数字、下划线</u></b> </li><li>变量名可以字母或者下划线打头，<u>但不能以数字打头</u></li><li>不能将Python关键字当做变量名<br><br><br></li></ul><h2 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h2><hr><p> <b>字符串</b> 就是一新系列字符。在Python中，用引号括起来的都是字符串。其中引号可以是<u>单引号</u>，也可是<u>双引号</u>，<strong><u>这使得你能够在字符串中包含引号和撇号</u></strong>。<br> 例如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"This's a string"</span></span><br><span class="line"><span class="string">'This is also a string'</span></span><br><span class="line"><span class="string">'I told you, "Python is the best in the world!" '</span></span><br><span class="line"><span class="string">"It's beautiful."</span></span><br></pre></td></tr></table></figure></p><h3 id="1-2-1-使用方法修改字符串的大小写"><a href="#1-2-1-使用方法修改字符串的大小写" class="headerlink" title="1.2.1 使用方法修改字符串的大小写"></a>1.2.1 使用方法修改字符串的大小写</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"ada lovelace"</span></span><br><span class="line">print(name.title())</span><br><span class="line">name = <span class="string">"ADa"</span></span><br><span class="line">print(name.title())</span><br><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br></pre></td></tr></table></figure><p> 输出结果：</p><blockquote><p>Ada Lovelace<br>Ada<br>ADA<br>ada</p></blockquote><p><font face="楷体" size="3"><u>方法</u> </font>是Python可对数据进行的操作。</p><ul><li>方法<code>title()</code>以首字母大写的方式显示每个单词。</li><li>方法<code>upper()</code>以大写显示所有字母字符</li><li>方法<code>lower()</code>以小写显示所有字符字母</li></ul><h3 id="1-2-2-合并（拼接）字符串"><a href="#1-2-2-合并（拼接）字符串" class="headerlink" title="1.2.2 合并（拼接）字符串"></a>1.2.2 合并（拼接）字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">"ada"</span></span><br><span class="line">second_name = <span class="string">"lovelace"</span></span><br><span class="line">full_name = first_name + <span class="string">" "</span> + second_name</span><br><span class="line">print(full_name)</span><br><span class="line">print(full_name*<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>ada lovelace<br>ada lovelaceada lovelaceada lovelace</p></blockquote><p>Python用 <strong>加号 (+)和乘号 (*)</strong> 来合并字符串。这种合并方法称为 <em>拼接</em> 。</p><p><em>e.g:</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接上代码</span></span><br><span class="line">message = <span class="string">"Hello, "</span> + full_name.title() + <span class="string">"!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>Hello, Ada Lovelace!</p></blockquote><h3 id="1-2-3-删除空白"><a href="#1-2-3-删除空白" class="headerlink" title="1.2.3 删除空白"></a>1.2.3 删除空白</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">" python "</span></span><br><span class="line">print(s.lstrip())</span><br><span class="line">print(s.rstrip())</span><br><span class="line">print(s.strip())</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>python·  （·代表空格）<br>·python<br>python<br>·python·</p></blockquote><p><em>空白</em> 泛指任何非打印字符，包括<u>空格、制表符和换行符</u>。<br><br></p><ul><li>方法<code>strip()</code>删除字符串首尾空格。</li><li>方法<code>lstrip()</code>删除字符串首空格。</li><li>方法<code>rstrip()</code>删除字符串尾空格。</li><li>可以发现，在使用过这些方法后，原字符串并没有发生相应的变化<br><br><br></li></ul><h2 id="1-3-数字"><a href="#1-3-数字" class="headerlink" title="1.3 数字"></a>1.3 数字</h2><hr><h3 id="1-3-1-整数"><a href="#1-3-1-整数" class="headerlink" title="1.3.1 整数"></a>1.3.1 整数</h3><p>Python使用两个乘号表示乘法运算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure></p><h3 id="1-3-2-浮点数"><a href="#1-3-2-浮点数" class="headerlink" title="1.3.2 浮点数"></a>1.3.2 浮点数</h3><p>这个没什么好讲的</p><h3 id="1-3-3-函数str"><a href="#1-3-3-函数str" class="headerlink" title="1.3.3 函数str()"></a>1.3.3 函数str()</h3><p>在字符串中需要用到数字变量的值时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">print(<span class="string">"Happy "</span> + age + <span class="string">"th Birthday"</span>)  <span class="comment">#这种写法是错误的</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">返回错误报告：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/Pytest/1.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="string">"Happy "</span> + age + <span class="string">"th Birthday"</span>)</span><br><span class="line">  TypeError: can only concatenate str (<span class="keyword">not</span> <span class="string">"int"</span>) to str</span><br></pre></td></tr></table></figure></p><p>之所以会出现这样的错误，是因为<u>类型不匹配</u><br>Python无法将 int 和 str 类型的变量拼接在一起</p><p>为此可以调用<code>str()</code>函数，将非字符串变量表示为字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">print(<span class="string">"Happy "</span> + str(age) + <span class="string">"th Brithday"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>Happy 25th Birthday</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-变量和简单数据类型&quot;&gt;&lt;a href=&quot;#第一章-变量和简单数据类型&quot; class=&quot;headerlink&quot; title=&quot;第一章 变量和简单数据类型&quot;&gt;&lt;/a&gt;第一章 变量和简单数据类型&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>随便写写</title>
    <link href="/2019/06/15/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    <id>/2019/06/15/随便写写/</id>
    <published>2019-06-15T06:35:00.000Z</published>
    <updated>2019-07-03T08:04:35.380Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">int</span> j;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">int</span> j;</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">int</span> l;</span><br><span class="line">   &#125;</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">int</span> k;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</b></p><h1 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h1><p>好用</p><script type="math/tex; mode=display">f'(x_0)=\lim_{\Delta x\to 0} \frac{f(x_0+\Delta x) - f(x_0)}{\Delta x}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主要特性&quot;&gt;&lt;a href=&quot;#主要特性&quot; class=&quot;headerlink&quot; title=&quot;主要特性&quot;&gt;&lt;/a&gt;主要特性&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="杂感" scheme="/categories/%E6%9D%82%E6%84%9F/"/>
    
    
      <category term="杂感" scheme="/tags/%E6%9D%82%E6%84%9F/"/>
    
      <category term="日常" scheme="/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/06/14/hello-world/"/>
    <id>/2019/06/14/hello-world/</id>
    <published>2019-06-14T05:26:58.678Z</published>
    <updated>2019-06-15T09:18:04.238Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
