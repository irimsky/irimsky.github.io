<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Irimsky&#39;s Blog</title>
  
  <subtitle>Be water, my friend.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-02-17T08:41:49.829Z</updated>
  <id>/</id>
  
  <author>
    <name>Irimsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【模板】EKMP、Manachar算法</title>
    <link href="/2020/02/17/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91EKMP%E3%80%81Manachar%E7%AE%97%E6%B3%95/"/>
    <id>/2020/02/17/【模板】EKMP、Manachar算法/</id>
    <published>2020-02-17T08:40:20.000Z</published>
    <updated>2020-02-17T08:41:49.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拓展KMP"><a href="#拓展KMP" class="headerlink" title="拓展KMP"></a>拓展KMP</h1><p><a href="https://segmentfault.com/a/1190000008663857" target="_blank" rel="noopener"><font size="5">拓展KMP</font></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_EKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>] = m;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j+<span class="number">1</span>&lt;m &amp;&amp; x[j] == x[j+<span class="number">1</span>] ) j++;</span><br><span class="line">    Next[<span class="number">1</span>] = j;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;m; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> p = Next[k] + k - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> L = Next[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L &lt; p+<span class="number">1</span>) Next[i] = L;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            j = max(<span class="number">0</span>, p-i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(j+i &lt; m &amp;&amp; x[i+j]==x[j]) j++;</span><br><span class="line">            Next[i] = j;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//next[i]:x[i...m-1] 与 x[0...m-1] 的最长公共前缀</span></span><br><span class="line"><span class="comment">//extend[i]:y[i...n-1] 与 x[0...m-1] 的最长公共前缀</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EKMP</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">char</span> y[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre_EKMP(x, m);</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n &amp;&amp; j&lt;m &amp;&amp; x[j]==y[j]) j++;</span><br><span class="line">    ext[<span class="number">0</span>] = j;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = ext[k]+k<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> L = Next[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L &lt; p+<span class="number">1</span>) ext[i] = L;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            j = max(<span class="number">0</span>, p-i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;n &amp;&amp; j&lt;m &amp;&amp; y[i+j]==x[j]) j++;</span><br><span class="line">            ext[i] = j;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Manachar"><a href="#Manachar" class="headerlink" title="Manachar"></a>Manachar</h1><p><a href="https://blog.csdn.net/bestsort/article/details/81637464" target="_blank" rel="noopener"><font size="5">Manachar</font></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getstr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    str[k++] = <span class="string">'@'</span>;</span><br><span class="line">    len = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str[k++] = <span class="string">'#'</span>;</span><br><span class="line">        str[k++] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    str[k++] = <span class="string">'#'</span>;</span><br><span class="line">    len = k;</span><br><span class="line">    str[k] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manncher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mx&gt;i) p[i] = min(mx-i, p[<span class="number">2</span>*id-i]);</span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[i+p[i]]==str[i-p[i]]) p[i]++;</span><br><span class="line">        <span class="keyword">if</span>(p[i]+i&gt;mx)</span><br><span class="line">        &#123;</span><br><span class="line">            mx = p[i] + i;</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>p[i]-1</code>即为以此处为中心的最大回文串长度</li><li>回文串开始的下标是<code>(i-p[i])/2</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拓展KMP&quot;&gt;&lt;a href=&quot;#拓展KMP&quot; class=&quot;headerlink&quot; title=&quot;拓展KMP&quot;&gt;&lt;/a&gt;拓展KMP&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008663857&quot; targ
      
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="字符串匹配" scheme="/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
      <category term="模板" scheme="/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="回文串" scheme="/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>【模板】ST表（RMQ）</title>
    <link href="/2020/02/17/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91ST%E8%A1%A8/"/>
    <id>/2020/02/17/【模板】ST表/</id>
    <published>2020-02-17T08:32:19.000Z</published>
    <updated>2020-02-17T08:36:03.292Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/qq965921539/p/9608980.html" target="_blank" rel="noopener">学习链接</a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[maxn], at[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        d[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">log</span>((<span class="keyword">double</span>)n)/<span class="built_in">log</span>(<span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i + (<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span> &lt;= n; i++)</span><br><span class="line">            d[i][j] = max(d[i][j<span class="number">-1</span>], d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">log</span>((<span class="keyword">double</span>)(r-l+<span class="number">1</span>))/<span class="built_in">log</span>(<span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">return</span> max(d[l][t], d[r+<span class="number">1</span>-(<span class="number">1</span>&lt;&lt;t)][t]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      ST表的功能很简单。它是解决RMQ问题(区间最值问题)的一种强有力的工具。它可以做到O(nlogn)预处理，O(1)查询最值匹配的目的。
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="模板" scheme="/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ST表" scheme="/tags/ST%E8%A1%A8/"/>
    
      <category term="RMQ" scheme="/tags/RMQ/"/>
    
  </entry>
  
  <entry>
    <title>【模板】A*算法（K短路问题）</title>
    <link href="/2020/02/17/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91A-%E7%AE%97%E6%B3%95%EF%BC%88K%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%EF%BC%89/"/>
    <id>/2020/02/17/【模板】A-算法（K短路问题）/</id>
    <published>2020-02-17T08:18:44.000Z</published>
    <updated>2020-02-17T08:29:29.549Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/sslz_fsy/article/details/82120232" target="_blank" rel="noopener">介绍</a></p><p>模板题：<a href="https://vjudge.net/problem/POJ-2449" target="_blank" rel="noopener">POJ-2449</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 2000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;e[maxm], e2[maxm];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, k;</span><br><span class="line"><span class="keyword">int</span> head[maxn],head2[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, w, f;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node a) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.f==f)</span><br><span class="line">            <span class="keyword">return</span> a.w &lt; w;</span><br><span class="line">        <span class="keyword">return</span> a.f &lt; f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt].v = v;</span><br><span class="line">    e[cnt].w = w;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    e2[cnt].v = u;</span><br><span class="line">    e2[cnt].w = w;</span><br><span class="line">    e2[cnt].next = head2[v];</span><br><span class="line">    head2[v] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[t] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> inq[maxn];</span><br><span class="line">    <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span> inq);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(t);</span><br><span class="line">    inq[t] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = q.front();</span><br><span class="line">        q.pop(); inq[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head2[x];i!=<span class="number">-1</span>;i=e2[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[x]+e2[i].w &lt; dis[e2[i].v])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e2[i].v] = dis[x]+e2[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!inq[e2[i].v])&#123;</span><br><span class="line">                    q.push(e2[i].v);</span><br><span class="line">                    inq[e2[i].v] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a_star</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(s==t) k++;</span><br><span class="line">    <span class="keyword">if</span>(dis[s]==<span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    q.push(node&#123;s, <span class="number">0</span>, <span class="number">0</span>+dis[s]&#125;);</span><br><span class="line">    <span class="keyword">int</span> kcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().u, w = q.top().w;</span><br><span class="line">        <span class="keyword">if</span>(u==t)</span><br><span class="line">        &#123;</span><br><span class="line">           kcnt++;</span><br><span class="line">           <span class="keyword">if</span>(kcnt==k)&#123;</span><br><span class="line">               <span class="keyword">return</span> w;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            q.push(node&#123;e[i].v, w+e[i].w, w+e[i].w+dis[e[i].v]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n, u, v, w, s, t;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">        <span class="built_in">memset</span>(head2, <span class="number">-1</span>, <span class="keyword">sizeof</span> head2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u,&amp;v,&amp;w);</span><br><span class="line">            addedge(u, v, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;s, &amp;t, &amp;k);</span><br><span class="line">        spfa(t);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a_star(s, t) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      如果给定一个“目标状态”,需要求出从初态到目标状态的最小代价，那么优先队列BFS的这个“优先策略”显然是不完善的。一个状态的当前代价最小，只能说明从起始状态到该状态的代价很小，而在未来的搜索中，从该状态到目标状态可能会花费很大的代价:另外一些状态虽然当前代价略大，但是未来到目标状态的代价可能会很小，于是从起始状态到目标状态的总代价反而更优。优先队列BFS会优先选择前者的分支.
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="模板" scheme="/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="A*算法" scheme="/tags/A-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>KMP+循环节问题</title>
    <link href="/2019/11/05/KMP-%E5%BE%AA%E7%8E%AF%E8%8A%82%E9%97%AE%E9%A2%98/"/>
    <id>/2019/11/05/KMP-循环节问题/</id>
    <published>2019-11-05T13:21:14.000Z</published>
    <updated>2019-11-20T15:24:28.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDU-3746"><a href="#HDU-3746" class="headerlink" title="HDU-3746"></a>HDU-3746</h1><p>现在给你一个字符串，请问在该字符串末尾最少添加多少个字符，可以让这个字符串获得重复循环序列。</p><p><b>输入</b>：第一行是一个整数 $T ( 0&lt;T&lt;=100 )$ 代表测试数据的组数。之后$T$行每行一个字符串，由小写字母组成，字符串的长度 $3&lt;=L&lt;=100000$。</p><p><b>输出</b>：每组数据输出一行结果。</p><p><b>样例</b>:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">ppp</span><br><span class="line">pip</span><br><span class="line">machinelearning</span><br></pre></td></tr></table></figure></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><p><b>思路</b>:</p><p><b><font color="red">循环节</font></b>是指一段数据中重复的最小环。KMP不止要学会套模板匹配字符串，还要学到KMP算法的精髓——<b><font color="blue">Next数组</font></b>。<br>（未经优化的）$Next[i]$指的 $S[0：i-1]$的<b>最大共同前后缀长度</b>（例如abcabcabc的共同前后缀为abcabc, abcabc为abc, abcabcabcabc为abc*3）<br>故一段字符串的循环节就是： $N - Next[N]$<br>将其记为len。若该字符串是循环字符串，则 $N\%len==0$， 而循环节的个数为：$N/len$<br>若不是，则 $Next[N] == 0$（abcd）或者$N\%len != 0$</p><p><b>题解</b>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> Next[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span> &amp;&amp; s[i]!=s[j]) j = Next[j];</span><br><span class="line">        Next[++i] = ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = - Next[n] + n;</span><br><span class="line">    <span class="keyword">if</span>(Next[n]==<span class="number">0</span>) <span class="keyword">return</span> len; <span class="comment">//没有循环部分，只能自身成为循环节</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(Next[n]%len==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//已经是循环字符串</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> len - Next[n] % len; <span class="comment">//需要补齐</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; getnext() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="HDU-1385"><a href="#HDU-1385" class="headerlink" title="HDU-1385"></a>HDU-1385</h1><p>给出一个字符串s(1为起始),问在[1, i]区间是否有完整的循环节,若有,输出i并输出循环次数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">aaa</span><br><span class="line">12</span><br><span class="line">aabaabaabaab</span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Test </span>case #1</span><br><span class="line">2 2</span><br><span class="line">3 3</span><br><span class="line"></span><br><span class="line"><span class="keyword">Test </span>case #2</span><br><span class="line">2 2      --aa(a)</span><br><span class="line">6 2      --aabaab(aab)</span><br><span class="line">9 3      --aabaabaab(aab)</span><br><span class="line">12 4     --....</span><br></pre></td></tr></table></figure><p><b>思路</b>：求出Next数组后从1开始遍历，若$S[1-i]$是循环字符串则输出 $i$ 和 $N / len$</p><p>题解：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, kase=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> Next[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span> &amp;&amp; s[i]!=s[j]) j = Next[j];</span><br><span class="line">        Next[++i] = ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>, ++kase);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Next[i]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> len = i - Next[i];</span><br><span class="line">        <span class="keyword">if</span>(Next[i]%len==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; Next[i]/len+<span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N); getchar();</span><br><span class="line">    <span class="keyword">while</span>(N)</span><br><span class="line">    &#123;</span><br><span class="line">        gets(s);</span><br><span class="line">        getnext();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N); getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h1 id="HUST-1010"><a href="#HUST-1010" class="headerlink" title="HUST-1010"></a>HUST-1010</h1><p>对于字符串A， 将其重复多次，形成新的字符串AAA…AAAA，在其中截取一段，作为B.<br>现给定B字符串，求符合条件的最短的A</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bcabcab</span></span><br><span class="line"><span class="keyword">efgabcdefgabcde</span></span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p><b>思路</b>：本题实际上就是在求B中的循环节长度(N-Next[N])，只不过<b>前/后可以多/少一些部分</b>，原来的方法依然是可求的。<br>代码略</p><hr><h1 id="HDU-3377"><a href="#HDU-3377" class="headerlink" title="HDU-3377"></a>HDU-3377</h1><p>题意：字符串长度为n（n&lt;=1000000），问从哪一个字符串开始的循环字符串是 最大/最小字符串，如果存在多个输出编号最小的，以及输出最大/最小字符串在其中出现的次数。<br>比如SKYLONG：</p><blockquote><p>String     Rank<br>SKYLONG     1<br>KYLONGS     2<br>YLONGSK     3<br>LONGSKY     4<br>ONGSKYL     5<br>NGSKYLO     6<br>GSKYLON     7</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">abcder</span></span><br><span class="line"><span class="attribute">aaaaaa</span></span><br><span class="line"><span class="attribute">ababab</span></span><br></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">6</span> <span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><br><br>题解： 最大/最小字符串涉及到一个”<a href="https://blog.csdn.net/oahsgnat/article/details/39338737" target="_blank" rel="noopener">最大/最小表示法</a>“的算法。第二个问，实际上就是在求<b>循环节</b>，因为本来都是循环字符串，所以<u>循环节的个数就是出现的个数</u><br><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Next[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span> &amp;&amp; s[i]!=s[j]) j = Next[j];</span><br><span class="line">        Next[++i] = ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMinPos</span><span class="params">(<span class="built_in">string</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    i = <span class="number">0</span>,j = <span class="number">1</span>,k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; l &amp;&amp; j &lt; l) &#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x[(i+k)%l] == x[(j+k)%l] &amp;&amp; k &lt; l) k++;</span><br><span class="line">        <span class="keyword">if</span>(k == l) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(x[(i+k)%l] &lt; x[(j+k)%l])</span><br><span class="line">            <span class="keyword">if</span>(j+k+<span class="number">1</span> &gt;= i) j += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> j = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(i+k+<span class="number">1</span> &gt;= j) i += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> i = j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == j) j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(i,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetMaxPos</span><span class="params">(<span class="built_in">string</span> x, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    i = <span class="number">0</span>,j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; l &amp;&amp; j &lt; l) &#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x[(i+k)%l] == x[(j+k)%l] &amp;&amp; k &lt; l) k++;</span><br><span class="line">        <span class="keyword">if</span>(k == l) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(x[(i+k)%l] &lt; x[(j+k)%l])</span><br><span class="line">            <span class="keyword">if</span>(i+k+<span class="number">1</span> &gt;= j) i += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> i = j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(j+k+<span class="number">1</span> &gt;= i) j += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> j = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i == j) j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min(i,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);    <span class="comment">//用cin string不用这个会超时的,可以改char</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        n = s.size();</span><br><span class="line">        getnext();</span><br><span class="line">        <span class="keyword">int</span> len = n - Next[n];</span><br><span class="line">        <span class="keyword">if</span>(Next[n]==<span class="number">0</span> || n%len) ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n%len==<span class="number">0</span>) ans = n/len;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>, GetMinPos(s,n)+<span class="number">1</span>, ans, GetMaxPos(s, n)+<span class="number">1</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HDU-3746&quot;&gt;&lt;a href=&quot;#HDU-3746&quot; class=&quot;headerlink&quot; title=&quot;HDU-3746&quot;&gt;&lt;/a&gt;HDU-3746&lt;/h1&gt;&lt;p&gt;现在给你一个字符串，请问在该字符串末尾最少添加多少个字符，可以让这个字符串获得重复循环序列。
      
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="字符串匹配" scheme="/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
      <category term="模板" scheme="/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【模板】KMP字符串匹配</title>
    <link href="/2019/11/03/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <id>/2019/11/03/【模板】KMP字符串匹配/</id>
    <published>2019-11-03T13:48:07.000Z</published>
    <updated>2019-11-22T01:48:49.669Z</updated>
    
    <content type="html"><![CDATA[<p>算法参考：<a href="https://blog.csdn.net/sb985/article/details/79735488" target="_blank" rel="noopener">https://blog.csdn.net/sb985/article/details/79735488</a><br>时间复杂度：$O(m+n)$</p><h1 id="计算Next数组"><a href="#计算Next数组" class="headerlink" title="计算Next数组"></a>计算Next数组</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxm];</span><br><span class="line"><span class="keyword">int</span> Next[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span> &amp;&amp; t[i]!=t[j]) j = Next[j];</span><br><span class="line">        Next[++i] = ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优化的Next"><a href="#优化的Next" class="headerlink" title="优化的Next"></a>优化的Next</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxm];</span><br><span class="line"><span class="keyword">int</span> Next[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span> &amp;&amp; t[i]!=t[j]) j = Next[j];</span><br><span class="line">        <span class="keyword">if</span>(t[++j] == t[++i]) Next[i] = Next[j];</span><br><span class="line">        Next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">统计主串中模式串的个数，可以重叠。 （HDU-1686，洛谷P3375）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    getnext();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j!=<span class="number">-1</span> &amp;&amp; s[i]!=t[j]) j = Next[j];</span><br><span class="line">        i++; j++;</span><br><span class="line">        <span class="keyword">if</span>(j==m)</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j = Next[j]; <span class="comment">// 如果要求匹配串不重叠，则 j = 0， （HDU-2087）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最大-最小表示法"><a href="#最大-最小表示法" class="headerlink" title="最大/最小表示法"></a>最大/最小表示法</h1><p><a href="https://blog.csdn.net/oahsgnat/article/details/39338737" target="_blank" rel="noopener">相关算法</a><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">int GetMinPos(string x)</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = <span class="number">1</span>, k;</span><br><span class="line">int l = x.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">i</span> &lt; l &amp;&amp; <span class="built_in">j</span> &lt; l) &#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x[(<span class="built_in">i</span>+k)<span class="comment">%l] == x[(j+k)%l] &amp;&amp; k &lt; l) k++;</span></span><br><span class="line">        <span class="keyword">if</span>(k == l) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(x[(<span class="built_in">i</span>+k)<span class="comment">%l] &lt; x[(j+k)%l])</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">j</span>+k+<span class="number">1</span> &gt;= <span class="built_in">i</span>) <span class="built_in">j</span> += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">j</span> = <span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">i</span>+k+<span class="number">1</span> &gt;= <span class="built_in">j</span>) <span class="built_in">i</span> += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">i</span> = <span class="built_in">j</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">i</span> == <span class="built_in">j</span>) <span class="built_in">j</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int GetMaxPos(string x, int l)</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="built_in">i</span> = <span class="number">0</span>, <span class="built_in">j</span> = <span class="number">1</span>, k;</span><br><span class="line">int l = x.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">i</span> &lt; l &amp;&amp; <span class="built_in">j</span> &lt; l) &#123;</span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x[(<span class="built_in">i</span>+k)<span class="comment">%l] == x[(j+k)%l] &amp;&amp; k &lt; l) k++;</span></span><br><span class="line">        <span class="keyword">if</span>(k == l) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(x[(<span class="built_in">i</span>+k)<span class="comment">%l] &lt; x[(j+k)%l])</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">i</span>+k+<span class="number">1</span> &gt;= <span class="built_in">j</span>) <span class="built_in">i</span> += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">i</span> = <span class="built_in">j</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">j</span>+k+<span class="number">1</span> &gt;= <span class="built_in">i</span>) <span class="built_in">j</span> += k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">j</span> = <span class="built_in">i</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">i</span> == <span class="built_in">j</span>) <span class="built_in">j</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="字符串匹配" scheme="/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    
      <category term="模板" scheme="/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【模板】Dijkstra算法+链式前向星+堆优化</title>
    <link href="/2019/10/12/%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91Dijkstra%E7%AE%97%E6%B3%95-%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F-%E5%A0%86%E4%BC%98%E5%8C%96/"/>
    <id>/2019/10/12/【模板】Dijkstra算法-链式前向星-堆优化/</id>
    <published>2019-10-12T11:55:17.000Z</published>
    <updated>2019-11-03T14:04:43.338Z</updated>
    
    <content type="html"><![CDATA[<ul><li>时间复杂度：<br>Dijkstra： $O(n^2)$<br>Dijkstra+优先队列：  $O (2  E + V  logV)$<a id="more"></a></li></ul><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><ul><li>指定起点s，即从顶点s开始计算。</li><li>集合S：记录已求出最短路径的顶点(以及相应的最短路径长度)，</li><li>集合U：记录还未求出最短路径的顶点(以及该顶点到起点s的距离)</li></ul><ol><li>初始时，S中只有起点s；U中是除s之外的顶点。U中顶点的路径是”起点s到该顶点的路径”。</li><li>然后，从U中找出路径最短的顶点v，并将其加入到S中。更新U中的顶点（及顶点对应的路径）。 </li><li>再从U中找出路径最短的顶点，并将其加入到S中。</li><li>重复该操作，直到遍历完所有顶点。<br><br></li></ol><ul><li>单源最短路，当权值非负时可以用Dijkstra</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123; x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[maxn], dis[maxn], head[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w,next;</span><br><span class="line">&#125;e[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp; a) <span class="keyword">const</span>&#123; <span class="keyword">return</span> w&gt;a.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[cnt].v = v;</span><br><span class="line">    e[cnt].w = w;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(node&#123;s, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().u;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = e[i].v, w = e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v] &gt; dis[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(node&#123;v, dis[v]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">int</span> n = read(), m = read(), s = read();</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = read(), v = read(), w = read();</span><br><span class="line">        addedge(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    dijkstra(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, dis[i], (i==n)?<span class="string">'\n'</span>:<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Dijkstra算法是由荷兰计算机科学家狄克斯特拉（Dijkstra）于1959 年提出的，因此又叫狄克斯特拉算法。是从一个顶点到其余各顶点的最短路径算法，解决的是有向图中最短路径问题。
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="模板" scheme="/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>链式前向星【存图模板】</title>
    <link href="/2019/10/12/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F%E3%80%90%E5%AD%98%E5%9B%BE%E6%A8%A1%E6%9D%BF%E3%80%91/"/>
    <id>/2019/10/12/链式前向星【存图模板】/</id>
    <published>2019-10-12T11:49:47.000Z</published>
    <updated>2019-11-02T15:07:36.619Z</updated>
    
    <content type="html"><![CDATA[<p>存图方式主要有：<b>邻接矩阵</b>（$m[i][j]$为w（w!=0），表示i点到j点有一条w权值的路）、<b>邻接表</b>（$m[u][i]$记录的值为v、w,表示u到v点有一个w权值的路）<br>用邻接矩阵非常浪费空间，有一种效率高且省空间的存图方法叫链式前向星。<br><a id="more"></a></p><h1 id="前向星"><a href="#前向星" class="headerlink" title="前向星"></a>前向星</h1><p>前向星就是一种邻接表。它是一个<b>边集数组</b>，先将起点按从小到大顺序排列，如果相同则按终点从小到大排序，并记录下以某个点为起点的所有边在数组中的起始位置和权值,那么前向星就构造好了。</p><p><font size="2"><b>用len[i]来记录所有以i为起点的边在数组中的存储长度.<br>用head[i]记录以i为边集在数组中的第一个存储位置.</b></font></p><p>譬如下图：<br><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20190920192345543.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" class="lozad"><br>可以得到：</p><blockquote><p>0: 1 2<br>1: 1 3<br>2: 1 5<br>3: 2 3<br>4: 3 4<br>5: 4 1<br>6: 4 5<br><br>head[1] = 0, len[1] = 3<br>head[2] = 3, len[2] = 1<br>head[3] = 4, len[3] = 1<br>head[4] = 5, len[4] = 2<br>head[5] = -1, len[5] = 0</p></blockquote><p>因为前向星需要一个排序操作，效率不是很高，而<strong>链式前向星</strong>可以避免排序。</p><h1 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h1><p>建立结构体：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </span><br><span class="line"><span class="keyword">int</span> v; <span class="comment">//终点</span></span><br><span class="line"><span class="keyword">int</span> w; <span class="comment">//权值</span></span><br><span class="line"><span class="keyword">int</span> next; <span class="comment">//下一个同起点的边的下标</span></span><br><span class="line">&#125; e[maxm];</span><br></pre></td></tr></table></figure></p><p>添加边的操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[cnt].v = v;</span><br><span class="line">e[cnt].w = w;</span><br><span class="line">e[cnt].next = head[u];</span><br><span class="line">head[u] = cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>依然是上面的图，可得到：</p><blockquote><p>e[0]: v = 2, next = 1    head[1] = 0<br>e[1]: v = 3, next = 2<br>e[2]: v = 5, next = -1<br>e[3]: v = 3, next = -1     head[2] = 3<br>e[4]: v = 4, next = -1     head[3] = 4<br>e[5]: v = 1, next = 6     head[4] = 5<br>e[6]: v = 5, next = -1<br>head[5] = -1</p></blockquote><p>遍历的操作：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i = e[i].next)</span><br></pre></td></tr></table></figure></p><p>因为插入边的方法是<strong>头插法</strong>，所以遍历时的操作是根据读入顺序的逆序来的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;存图方式主要有：&lt;b&gt;邻接矩阵&lt;/b&gt;（$m[i][j]$为w（w!=0），表示i点到j点有一条w权值的路）、&lt;b&gt;邻接表&lt;/b&gt;（$m[u][i]$记录的值为v、w,表示u到v点有一个w权值的路）&lt;br&gt;用邻接矩阵非常浪费空间，有一种效率高且省空间的存图方法叫链式前向星。&lt;br&gt;
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="模板" scheme="/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="图论" scheme="/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归</title>
    <link href="/2019/08/24/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>/2019/08/24/逻辑回归/</id>
    <published>2019-08-24T13:39:07.000Z</published>
    <updated>2019-11-03T14:07:31.845Z</updated>
    
    <content type="html"><![CDATA[<p>在<b>分类问题</b>中，我们尝试预测的是结果是否属于某一个类（例如正确或错误），其往往是一个离散的值。比如：判断一封电子邮件是否是垃圾邮件；判断一次金融交易是否是欺诈。</p><p> <b>逻辑回归</b>算法，是用于分类问题的最广泛的学习算法。<br> <a id="more"></a><br> <br><br> <br></p><h1 id="简单二元分类"><a href="#简单二元分类" class="headerlink" title="简单二元分类"></a>简单二元分类</h1><hr><p> 我们将<b>因变量(dependent variable)</b>可能属于的两个类分别称为<b>负向类（negative class）</b>和<b>正向类（positive class）</b>，则因变量 y∈{0,1} ，其中 0 表示负向类，1 表示正向类。 </p><p> 而我们将用逻辑回归算法使得假设函数 $h_\theta(x)$ 的输出范围∈[0,1]，表示$P(y=1|x; \theta)$，即<b>“因变量 y=1 的概率”。</b><br><br></p><p><font size="2"><em>注：虽然“逻辑回归”的名字中带有“回归”二字，但其仍属于分类算法。</em></font><br><br><br><br></p><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><hr><h2 id="假设模型"><a href="#假设模型" class="headerlink" title="假设模型"></a>假设模型</h2><p>如果对如图的数据集进行线性回归的话，会得到一条直线。其结果并不能用作分类（值域不在0-1内）<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gFlq.png" class="lozad"><br><br><br>而<b>逻辑回归</b>的预测模型为：</p><script type="math/tex; mode=display">h_\theta(x) = g(\theta^TX)</script><p>其中 </p><script type="math/tex; mode=display">g(z) = \frac{1}{1+e^{-z}}</script><p>该函数图像如图所示：<img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6g9Yj.png" class="lozad"><br>如前所言，$h_\theta(x)$ 的作用是：对于给定的输入变量，根据选择的参数计算输出变量=1的<b>可能性</b>，即$P(y=1|x; \theta)$<br>例如，如果对于给定的𝑥，通过已经确定的参数计算得出$h_\theta(x)$ = 0.7，则表示有70%的几率𝑦为正向类，相应地𝑦为负向类的几率为 30%<br><br></p><h2 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h2><p>若以0.5作为区分正向类与负向类的阈值，则可以发现：对于函数$g(z) = \frac{1}{1+e^{-z}}$，在$z<0$时,$g(z)$< $0.5$ ；而$z>0$时，$g(z)$ &gt; $0.5$</0$时,$g(z)$<></p><p>即</p><script type="math/tex; mode=display">\theta^Tx>0 时，y=1</script><script type="math/tex; mode=display">\theta^Tx<0 时，y=0</script><p> <br><br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gCfs.png" class="lozad"><br>假设有如图的数据集，且经过线性回归后得到 $\theta^TX = -3 + x_1 + x_2$</p><p>则在图上画出$x_1+x_2=3$的图像。不难看出，这便是数据集的<b>分界线</b>，被称为<b>决策边界(decision boundary)</b>。将预测为 1 的区域（ $-3 + x_1 + x_2&gt;0$）和预测为 0 的区域($-3 + x_1 + x_2&lt;0$)分隔开。</p><ul><li>注：决策边界是<b>假设模型</b>的属性，而不是数据集的属性。决策边界取决于模型的选择。</li></ul><p>我们可以用非常复杂的模型来适应非常复杂形状的判定边界。<br>如图，假设已知$h_\theta(x)=-1 +x_1^2+x_2^2$，即正好是一个以原点为圆心，1为半径的圆。<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gk60.png" class="lozad"></p><p><br><br></p><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>若将逻辑回归的模型代入线性回归的代价函数（误差平方和，即方差），得到的代价函数将会是一个<a href="https://blog.csdn.net/qq_38009970/article/details/87787488" target="_blank" rel="noopener">非凸函数</a><b>(non-convexfunction)</b>，无法进行梯度下降<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gipn.png" class="lozad"><br>对于线性回归，其代价函数可以表示为：（这是<b>单训练样本的代价函数</b>表达形式）</p><script type="math/tex; mode=display">Cost(h_\theta(x),\ y)=\frac{1}{2}(h_\theta(x)-y)^2</script><script type="math/tex; mode=display">J(\theta)=\frac{1}{m}\sum^{m}_{i=1}Cost(h_\theta(x^{(i)}),\ y^{(i)})</script><p>而逻辑回归的代价函数较为不同。</p><script type="math/tex; mode=display">Cost(h_\theta(x),\ y)=\begin{cases}-\log(h_\theta(x)) & y = 1 \\-(\log(1-h_\theta(x))) & y = 0\end{cases}</script><p>这样构建的$Cost(h_\theta(x),y)$函数的特点是：<b>当实际的 𝑦 = 1 且$h_\theta(x)$也为 1 时误差为 0，当 𝑦 = 1 但$h_\theta(x)$不为 1 时误差随着$h_\theta(x)$变小而变大；当实际的 𝑦 = 0 且ℎ𝜃(𝑥)也为 0 时代价为 0，当𝑦 = 0 但$h_\theta(x)$不为 0 时误差随着 $h_\theta(x)$的变大而变大。</b><br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gAXV.png" class="lozad"></p><p>为了对其进行梯度下降，将其化简为：</p><script type="math/tex; mode=display">Cost(h_\theta(x),\ y)=-y\log(h_\theta(x))-(1-y) \log(1-h_\theta(x))</script><script type="math/tex; mode=display">J(\theta) = -\frac{1}{m}\sum^{m}_{i=1}[y\log(h_\theta(x))+(1-y) \log(1-h_\theta(x)]</script><p>接着对其使用梯度下降，需要对其求偏导。<br>求导过程：<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gVmT.png" class="lozad"></p><ul><li>注：可以发现最后的结果和线性回归的代价函数求导结果一样，但其<b>性质完全不同</b>，因为$h_\theta(x)$的性质不一样。</li></ul><p>最终得到梯度下降算法：</p><script type="math/tex; mode=display">\begin {aligned}Re&peat \{ \\&\theta_j = \theta_j - \alpha\frac{1}{m}\sum^{m}_{i=1}[h_\theta(x^{(i)})-y^{(i)}]x_j^{(i)}\\&\}\end {aligned}</script><p><br><br><br></p><h1 id="多类别分类：一对多"><a href="#多类别分类：一对多" class="headerlink" title="多类别分类：一对多"></a>多类别分类：<font size="5">一对多</font></h1><hr><p>现实中有很多的多类别分类问题。比如判断天气是阴晴雨雪，或者判断邮件由来是家庭、公司或者陌生人。<br>用不同的编号表示不同的类别（比如 晴是1，阴是2，雨是3，雪是4）</p><p>多类别分类的数据集可能会像这样：</p><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gZ0U.png" class="lozad"><br>解决这种问题可以用一种叫<b>“一对多”（one-vs-all）</b>的算法，是由二元分类推广而来的，有时也叫<b>“一对余（one-vs-rest）”</b></p><ul><li>我们先从用三角形代表的类别 1 开始，实际上我们可以创建一个，新的”伪”训练集，类<br>型 2 和类型 3 定为同一种负类，类型 1 设定为正类，我们创建一个新的训练集。<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6ge7F.png" class="lozad"><br>这样可以得到一个二元分类模型，记为$h_\theta^{(1)}(x)$<br><br></li><li>以此类推，得到一系列模型。其中$h_\theta^{(i)}(x)$代表的含义为：<b>y = i 的概率</b>，即$P(y=i|x; \theta)$<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/24/m6gnk4.png" class="lozad"></li><li>当我们输入一个新的x时，可以得到3个结果，然后我们选择最大的一个，即 $\max h_\theta^{(i)}(x)$，$i$ 即为预测结果。</li></ul>]]></content>
    
    <summary type="html">
    
      logistic回归又称logistic回归分析，是一种广义的线性回归分析模型，常用于数据挖掘，疾病自动诊断，经济预测等领域。
    
    </summary>
    
      <category term="机器学习" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="吴恩达《机器学习》" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%90%B4%E6%81%A9%E8%BE%BE%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="梯度下降" scheme="/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
  </entry>
  
  <entry>
    <title>最长递增子序列（LIS）的三种算法</title>
    <link href="/2019/08/16/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%EF%BC%88LIS%EF%BC%89%E7%9A%84%E4%B8%89%E7%A7%8D%E7%AE%97%E6%B3%95/"/>
    <id>/2019/08/16/最长递增子序列（LIS）的三种算法/</id>
    <published>2019-08-16T13:52:53.000Z</published>
    <updated>2019-11-03T14:08:08.681Z</updated>
    
    <content type="html"><![CDATA[<p><b>最长递增子序列</b>：给定一个长度为N的数组，找出一个最长的单调递增子序列，子序列不一定连续，但初始顺序不能乱。<br>比如数组A={1,3,4,2,5}，其最长递增子序列为1,3,4,5<br><a id="more"></a><br><br><br><br></p><h1 id="方法一：最长公共子序列法"><a href="#方法一：最长公共子序列法" class="headerlink" title="方法一：最长公共子序列法"></a>方法一：最长公共子序列法</h1><p>对于给定长度为N的数组A：</p><ol><li>使数组B为排序后的数组A      (O(NlogN))</li><li>求出A与B的<b>最长公共子序列(LCS)</b>   (O(N^2))<ol><li>对求得的公共子序列进行去重     (O(N))</li></ol></li></ol><p>例如：A = {1,3,5,4,4,6}<br>则B = {1,3,4,4,5,6}<br>最长公共子串C = {1,3,4,4,6}<br>对C去重得到结果：{1,3,4,6}</p><h1 id="方法二：动态规划法-O-N-2"><a href="#方法二：动态规划法-O-N-2" class="headerlink" title="方法二：动态规划法(O(N^2))"></a>方法二：动态规划法(O(N^2))</h1><ul><li>状态$dp[i]$：以第i个数结尾的最长递增子序列的长度</li><li>状态方程：$dp[i] = dp[j]+1$ 其中 $a[j] &lt; a[i]，j &lt; i$且 $dp[j]$ 最大。若没有满足的a[j]则$dp[i]=1$</li><li>最后max(dp)即为最长递增子序列的长度</li><li>若要求得最长递增子序列，可以用另外的数组lastidx记录上述的“j”</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">6</span>],lastidx[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = <span class="number">1</span>; lastidx[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; a[i] &amp;&amp; dp[j] + <span class="number">1</span> &gt; dp[i])</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">lastidx[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxx = <span class="number">0</span>, maxi = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(dp[i]&gt;maxx)</span><br><span class="line">&#123;</span><br><span class="line">maxx = dp[i];</span><br><span class="line">maxi = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lis[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=maxx<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">lis[i] = a[maxi];</span><br><span class="line">maxi = lastidx[maxi];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"最长公共子串长度："</span> &lt;&lt; maxx &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxx;i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; lis[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>最长公共子串长度：4<br>1 3 5 6</p></blockquote><h1 id="方法三：O-NlogN-算法"><a href="#方法三：O-NlogN-算法" class="headerlink" title="方法三：O(NlogN)算法"></a>方法三：O(NlogN)算法</h1><p>对于给定长度N的数组a，声明数组last[N]，last[i]的意义为：<b>长度为i的递增子序列的最后一个数字</b>，在循环数组a时更新这个数组。</p><p>比如{1,3,5,4,4,8,6,7}</p><p>a[0] = 1, 则长度为1的LIS为1，则last[1] = 1 , len = 1;</p><p>a[1] = 3,  3大于此前的最后一位1，故目前的最长的LIS可以为2了，故last[2] = 3, len = 2；</p><p>a[2] = 5, 同理，last[3] = 5 , len = 3;</p><p>a[3] = 4, 其可以加在5和3之间，所以可以把5替换掉，即last[3] = 4;</p><p>a[4] = 4,与last[3]相等了，所以不做变动。</p><p>a[5] = 8,比最后一位（5）大，所以last[4] = 8, len = 4;</p><p>a[6] = 6,在5和8中间，所以last[4] = 6;</p><p>a[7] = 7, 比最后一位6大，所以last[5] = 7, len =5;</p><p>最终得到结果LIS长度为：5，last数组为：1,3,4,6,7</p><p><b><font size="5">注意last数组并不一定是LIS，而是对应长度的LIS的最后一位。</font></b>&lt;/font&gt;<br>而注意到last数组往往是有序的，所以数组元素只有替换而没有挪动，故每次插入只要用二分查找即可。因此复杂度为O(N logN)</p><ul><li>若想得到最长递增子序列，同样可以使用数组lastidx和pre，用来标识<b><u>至此为止</u>该长度的LIS的最后一个数的下标和当前数字的来源</b><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[maxn] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> last[maxn], lastidx[maxn], pre[maxn], len=<span class="number">0</span>, maxi;</span><br><span class="line"><span class="built_in">memset</span>(last,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> last);</span><br><span class="line">last[<span class="number">0</span>] = -inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = lower_bound(last, last+maxn, a[i])-last; <span class="comment">//二分查找</span></span><br><span class="line">        last[pos] = a[i];</span><br><span class="line">        lastidx[pos] = i; <span class="comment">//该长度的LIS的最后一个数的下标</span></span><br><span class="line">        pre[i] = lastidx[pos<span class="number">-1</span>]; <span class="comment">//当前数字的来源（LIS中的前一位，即lastidx[长度-1]）</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt;= len)</span><br><span class="line">        &#123;</span><br><span class="line">            len = pos;</span><br><span class="line">            maxi = i; <span class="comment">//LIS最后一个数字的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lis[maxn];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"最长公共子串长度："</span> &lt;&lt; len &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        lis[i] = a[maxi];</span><br><span class="line">        maxi = pre[maxi];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; lis[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>输出：</p><blockquote><p>最长公共子串长度：5<br>1 3 4 6 7</p></blockquote>]]></content>
    
    <summary type="html">
    
      最长递增子序列：给定一个长度为N的数组，找出一个最长的单调递增子序列，子序列不一定连续，但初始顺序不能乱。
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="分治法" scheme="/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PTA-最大连续子数列和（4种方法）</title>
    <link href="/2019/07/29/PTA-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E5%88%97%E5%92%8C%EF%BC%884%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <id>/2019/07/29/PTA-最大连续子数列和（4种方法）/</id>
    <published>2019-07-29T09:42:27.000Z</published>
    <updated>2019-11-03T14:09:38.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><font color="blue">题目描述</font></h1><p>给定K个整数组成的序列{ $N_1$​​ ,$N​_2$ , …, $N​_k$ }，“连续子列”被定义为{ $N_i$​​ , $N_i+1$, …, $N_j$}，其中 $1≤i≤j≤K$。“最大子列和”则被定义为所有连续子列元素的和中最大者。<br>现要求你编写程序，计算给定整数序列的最大子列和。<br> <a id="more"></a></p><h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a><font color="blue">输入格式</font></h1><p>输入第1行给出正整数n (≤100000)；第2行给出n个整数，其间以空格分隔。</p><h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a><font color="blue">输出格式</font></h1><p>在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a><font color="blue">样例输入</font></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">-2</span> <span class="number">11</span> <span class="number">-4</span> <span class="number">13</span> <span class="number">-5</span> <span class="number">-2</span></span><br></pre></td></tr></table></figure><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a><font color="blue">样例输出</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><p><br><br><br><br><br></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="方法①：暴力枚举法O-n-3"><a href="#方法①：暴力枚举法O-n-3" class="headerlink" title="方法①：暴力枚举法O(n^3)"></a>方法①：暴力枚举法O(n^3)</h2><p>最暴力的方法：用三层循环枚举所有的子数列，输出其中的最大值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k++)</span><br><span class="line">sum += num[k];</span><br><span class="line"><span class="keyword">if</span>(sum &gt; ans) ans = sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="稍微优化成O-n-2"><a href="#稍微优化成O-n-2" class="headerlink" title="稍微优化成O(n^2)"></a>稍微优化成O(n^2)</h3><p>可以注意到：设sum(i)为从 a~1~ 到 a~i~ 的数列的和，sum(0)为0，<b>则从 a~i~ 到 a~j~ 的子数列的和为sum( j ) - sum( i-1 )</b><br>由此，可以将暴力枚举法的三层循环改为二层循环：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span>(sum[j] - sum[i<span class="number">-1</span>] &gt; ans)</span><br><span class="line">ans = sum[j] - sum[i<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h2 id="方法②：二分法-O-nlogn"><a href="#方法②：二分法-O-nlogn" class="headerlink" title="方法②：二分法    O(nlogn)"></a>方法②：二分法    O(nlogn)</h2><p>首先，我们可以把整个序列平均分成左右两部分，答案则会在以下三种情况中：<br>1、所求序列完全包含在左半部分的序列中。<br>2、所求序列完全包含在右半部分的序列中。<br>3、所求序列刚好横跨分割点，即左右序列各占一部分。<br>前两种情况和大问题一样，只是规模小了些，如果三个子问题都能解决，那么<b>答案就是三个结果的最大值。</b></p><p>前两种情况都比较好解决，需要注意的是第三种情况怎么处理：<br><b>以分割点为起点向左的最大连续序列和、以分割点为起点向右的最大连续序列和，这两个结果的和就是第三种情况的答案。</b>因为起始点（分割点）是固定的，所以两者只需要O(n)以内的复杂度得出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//处理第三种情况</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> suml, sumr, maxl, maxr;</span><br><span class="line">suml = sumr = maxl = maxr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = mid; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">suml += num[i];</span><br><span class="line"><span class="keyword">if</span>(suml&gt;maxl) maxl = suml;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = mid+<span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">sumr += num[i];</span><br><span class="line"><span class="keyword">if</span>(sumr&gt;maxr) maxr = sumr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = maxr + maxl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> lans = solve(left, mid), rans = solve(mid+<span class="number">1</span>, right); <span class="comment">//处理左右两段</span></span><br><span class="line">ans = max(ans, lans); ans = max(ans, rans); <span class="comment">//返回最大值</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法③-动态规划O-n"><a href="#方法③-动态规划O-n" class="headerlink" title="方法③ 动态规划O(n)"></a>方法③ 动态规划O(n)</h2><p><b>终极王牌方法</b>，找到一个合适的公式，可以很快解决问题。<br>根据连续子数列的<b>连续</b>这一性质，我们可以设<b>dp[i]为以num[i]结尾的最大子数列和，则有</b>：<script type="math/tex">dp[i] = max(dp[i-1], \ \ 0)+num[i]</script></p><p>而最终答案则是: $max(dp[i]),i\in[1, n]$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = max(dp[i<span class="number">-1</span>], <span class="number">0</span>) + num[i];</span><br><span class="line"><span class="keyword">if</span>(dp[i] &gt; ans) ans = dp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br></pre></td></tr></table></figure><h2 id="方法④-另一种O-n-算法"><a href="#方法④-另一种O-n-算法" class="headerlink" title="方法④ 另一种O(n)算法"></a>方法④ 另一种O(n)算法</h2><p>由暴力法的前缀和法得到启发：以num[i]结尾的某个子数列和，是sum[i] - sum[j]（j &lt; i），<b>则以num[i]结尾的子数列和，是sum[i] - sum[ j-1 ]，其中sum[ j-1 ]为sum[0], sum[1] , …, sum[ i-1 ]中的最小值。</b><br>则我们只需要在一次遍历中维护之前的最小的sum不断更新答案即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> minsum = <span class="number">0</span>, ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += num[i];</span><br><span class="line"><span class="keyword">if</span>(sum - minsum &gt; ans) ans = sum - minsum;</span><br><span class="line"><span class="keyword">if</span>(sum &lt; minsum) minsum = sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      给定K个整数组成的序列{ $N_1$​​ ,$N​_2$ , ..., $N​_k$ }，“连续子列”被定义为{ $N_i$​​ , $N_i+1$, ..., $N_j$}，其中 $1≤i≤j≤K$。“最大子列和”则被定义为所有连续子列元素的和中最大者。
    
    </summary>
    
      <category term="ACM算法" scheme="/categories/ACM%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="/categories/ACM%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="算法" scheme="/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="分治法" scheme="/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>线性回归的正规方程法</title>
    <link href="/2019/07/28/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B%E6%B3%95/"/>
    <id>/2019/07/28/线性回归的正规方程法/</id>
    <published>2019-07-28T10:07:53.000Z</published>
    <updated>2019-11-03T02:57:55.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h1><hr><p>正规方程是通过求解下面的方程来找出使得代价函数最小的参数的： $\frac{\partial}{\partial \theta_j} J(\theta_i) = 0$</p><p>假设我们的训练集特征矩阵为 $X$（包含了 𝑥0 = 1）并且我们的训练集结果为向量 $y$，则利<br>用正规方程解出向量 </p><script type="math/tex; mode=display">\theta = (X^TX)^{-1}X^Ty</script><a id="more"></a><p>比如如下的数据：<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/08/16/mmYiqI.png" class="lozad"></p><script type="math/tex; mode=display">X =  \begin{bmatrix}  1 & 2104 & 5 & 1 & 45\\  1 & 1416 & 3 & 2 & 40\\  1 & 1534 & 3 & 2 & 30 \\  1 & 852 & 2 & 1 & 36 & \\  \end{bmatrix}</script><script type="math/tex; mode=display">y = \begin{bmatrix}  460\\  232\\  315\\  178\\  \end{bmatrix}</script><p><br><br><br><b>正规方程的Python实现：</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalEqn</span><span class="params">(X, y)</span>:</span>    </span><br><span class="line">theta = np.linalg.inv(X.T@X)@X.T@y <span class="comment">#X.T@X等价于 X.T.dot(X) </span></span><br><span class="line"><span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="与梯度下降比较"><a href="#与梯度下降比较" class="headerlink" title="与梯度下降比较"></a>与梯度下降比较</h1><hr><div class="table-container"><table><thead><tr><th>梯度下降</th><th>正规方程</th></tr></thead><tbody><tr><td>需要选择学习率𝛼</td><td>不需要</td></tr><tr><td>需要多次迭代</td><td>一次运算得出</td></tr><tr><td>当特征数量𝑛大时也能较好适用</td><td>需要计算$(X^TX)^-1$。如果特征数量𝑛较大则 运算代价大，<br>因为矩阵逆的计算时间复杂度 为𝑂(𝑛3) </td></tr><tr><td>适用于各种类型的模型</td><td>只适用于线性模型，不适合逻辑回归模型等其他模型 </td></tr></tbody></table></div><p><br></p><h1 id="矩阵不可逆时的情况"><a href="#矩阵不可逆时的情况" class="headerlink" title="矩阵不可逆时的情况"></a>矩阵不可逆时的情况</h1><hr><p>$(X^TX)$会出现不可逆的情况。<br>原因可能有：</p><ol><li><b>有多余的特征变量成了线性相关关系</b><br>比如一个特征是厘米单位的长度，而另一个特征是毫米单位的长度，两列数据在自乘之后成了100倍的线性关系。<br>这时就需要把多余的特征量删除。</li><li><b>有太多的特征量（m &lt;&lt; n）</b> <em>有时还会导致‘过拟合(overfit)’的现象</em><br>比如m = 10, n = 100时的情况，则需要在10个训练样本中找出101个参数，这是一种比较复杂且容易出问题的任务。<br>解决方法有：<br>①删除一些特征量<br>②<font color="blue"><b>正则化</b></font><br><br></li></ol><h1 id="附：正则方程推导过程"><a href="#附：正则方程推导过程" class="headerlink" title="附：正则方程推导过程"></a>附：正则方程推导过程</h1><hr><p><br><br></p><script type="math/tex; mode=display">J(\theta_0,\theta_1,\dots,\theta_n) = \frac {1}{2m}\sum_{i=1}^{m}\ (h_\theta(x^{(i)})  - y^{(i)})^2</script><p>转化为矩阵表示则有：</p><script type="math/tex; mode=display">J(\theta) = \frac{1}{2} (X\theta-y)^T(X\theta-y)</script><script type="math/tex; mode=display">\ \ \ \ \ \ = \frac{1}{2} (\theta^TX^T-y^T)(X\theta-y)</script><script type="math/tex; mode=display">\ \ \ \ \ \ = \frac{1}{2} (\theta^TX^TX\theta-\theta^TX^Ty-y^TX\theta + y^Ty)</script><p><br><br><br>接下来对$\theta$求偏导。要用到几个矩阵求导法则：<br>$\frac{dAB}{dB} = A^T$、$\frac{dA^TXA}{dX}=2AX$</p><p>所以有：</p><script type="math/tex; mode=display">\frac{\partial}{\partial \theta} J(\theta) = \frac{1}{2}(2X^TX\theta - X^Ty -(y^TX)^T+0)</script><script type="math/tex; mode=display">= (X^TX\theta - X^Ty)</script><p>令其=0，可得：</p><script type="math/tex; mode=display">\theta = (X^TX)^{-1}X^Ty</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正规方程&quot;&gt;&lt;a href=&quot;#正规方程&quot; class=&quot;headerlink&quot; title=&quot;正规方程&quot;&gt;&lt;/a&gt;正规方程&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;正规方程是通过求解下面的方程来找出使得代价函数最小的参数的： $\frac{\partial}{\partial \theta_j} J(\theta_i) = 0$&lt;/p&gt;
&lt;p&gt;假设我们的训练集特征矩阵为 $X$（包含了 𝑥0 = 1）并且我们的训练集结果为向量 $y$，则利&lt;br&gt;用正规方程解出向量 &lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\theta = (X^TX)^{-1}X^Ty&lt;/script&gt;
    
    </summary>
    
      <category term="机器学习" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="吴恩达《机器学习》" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%90%B4%E6%81%A9%E8%BE%BE%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="梯度下降" scheme="/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
      <category term="正规方程" scheme="/tags/%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(十)：迭代器和生成器</title>
    <link href="/2019/07/25/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%81-%EF%BC%9A%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>/2019/07/25/Python学习笔记-十-：迭代器和生成器/</id>
    <published>2019-07-25T11:43:17.000Z</published>
    <updated>2019-11-03T10:41:02.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><ul><li>迭代是Python最强大的功能之一，是访问集合元素的一种方式。</li><li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</li><li>迭代器是一个可以记住遍历的位置的对象。<a id="more"></a></li></ul><hr><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>其实<code>for .. in ..</code>循环遍历的过程就是<b>迭代（iteration）</b>。<br>其他语言诸如C语言，迭代都是通过下标索引。所以可以看出，Python的for循环迭代抽象程度比其他语言高，不论有没有下标，只要是<b>可迭代对象</b>（后文有介绍），都可以通过它迭代，比如字典。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器有两个基本的方法：<code>iter()</code> 和 <code>next()</code>。<br><code>iter()</code>用于创建一个<b>迭代器对象</b><br><code>next()</code>将参数中的迭代器<b>进行一次迭代，并返回迭代器中的元素</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = iter(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">&lt;list_iterator object at <span class="number">0x000001D5E98476A0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l1)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l1)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l1)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(l1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;input&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p><p>迭代器到达结尾时，如果再调用next()，则会无法返回值而报错<code>StopIteration</code>。</p><h2 id="为自定义类创建迭代器"><a href="#为自定义类创建迭代器" class="headerlink" title="为自定义类创建迭代器"></a>为自定义类创建迭代器</h2><p>把一个类作为一个迭代器使用需要在类中实现两个方法 <code>__iter__()</code> 与 <code>__next__()</code> 。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_nums</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.a &lt; <span class="number">20</span>:</span><br><span class="line">            x = self.a</span><br><span class="line">            self.a += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mn = my_nums()</span><br><span class="line">l1 = iter(mn)</span><br><span class="line">print(next(l1))</span><br><span class="line">print(next(l1))</span><br><span class="line">print(next(l1))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mn:</span><br><span class="line">    print(i, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>1<br>2<br>3<br>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 </p><ul><li>定义过两个方法后的类的对象便成了可迭代对象，可以对其调用<code>iter()</code>和<code>next()</code>以及对其进行for循环遍历</li><li>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在<code>__next__()</code> 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</li></ul></blockquote><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>通过列表生成式，我们可以直接创建一个列表，但是，受到内存限制，列表容量肯定是有限的，而且创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间，在Python中，这种一边循环一边计算的机制，称为<b><font color="blue">生成器(generator)</font></b>。   （转自廖雪峰）</p><p>生成器是一个特殊的程序，可以被用作控制循环的迭代行为，<b>Python中生成器是迭代器的一种。</b></p><blockquote><p><b>延迟计算或惰性求值 (Lazy evaluation)</b><br>迭代器不要求你事先准备好整个迭代过程中所有的元素。仅仅是在迭代至某个元素时才计算该元素，而在这之前或之后，元素可以不存在或者被销毁。这个特点使得它特别适合用于遍历一些巨大的或是无限的集合。</p></blockquote><p><br><br></p><p>创建生成器的方法有很多。</p><h3 id="列表生成器"><a href="#列表生成器" class="headerlink" title="列表生成器"></a>列表生成器</h3><p>回忆<a href="https://blog.csdn.net/irimsky/article/details/95522381#324_font_size__6font_126" target="_blank" rel="noopener">列表解析</a>的内容。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br></pre></td></tr></table></figure></p><p>第一种创建生成器的方法是：只要把一个列表解析式的[]改成()，就创建了一个generator：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</span><br></pre></td></tr></table></figure></p><p>如上所言，<b><font color="red">生成器就是迭代器</font></b>，他可以被next()调用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>但是我们很少对生成器使用next()，大多数情况都是使用for循环，因为<b><font color="red">生成器也是个可迭代对象</font></b>&lt;/font&gt;。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">print(i, end=<span class="string">', '</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>0, 1, 4, 9, 16, 25, 36, 49, 64, 81</p></blockquote><p><br><br></p><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><p>另一个方法是：生成器函数。<br>在 Python 中，使用了 <code>yield</code> 的函数被称为<b>生成器函数（generator function）</b>。<br>跟普通函数不同的是，生成器函数是一个<b><font color="red">返回迭代器的函数</font></b>，只能用于迭代操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="string">'step 1'</span>)</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">print(<span class="string">'step 2'</span>)</span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">print(<span class="string">'step 3'</span>)</span><br><span class="line"><span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">o = odd()</span><br><span class="line">print(next(o))</span><br><span class="line">print(next(o))</span><br><span class="line">print(next(o))</span><br><span class="line">print(next(o))</span><br></pre></td></tr></table></figure><blockquote><p>step 1<br>1<br>step 2<br>3<br>step 3<br>5<br>Traceback (most recent call last):<br>  File “D:/Pytest/1.py”, line 48, in <module><br>    print(next(o))<br>StopIteration</module></p></blockquote><p>在调用生成器运行的过程中，<b>每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</b><br>比如上述函数：</p><ol><li>odd()返回的是一个<u>迭代器</u>，传递给变量o</li><li>第一次调用next()：先打印step 1 ，再返回1，保存信息并停止运行函数。</li><li>第二次调用next()：函数从原先停止的地方继续，先打印step 2， 再返回3，保存信息并停止。</li><li>第三次调用next()：…</li><li>第四次调用next()：函数已到达末尾，无法返回值，报错StopIteration</li></ol><p><br><br><br>同理，生成器函数可以用for循环迭代：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例1 输出奇数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> cnt &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> cnt * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> odd(<span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">o = odd(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> o:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><blockquote><p>1<br>3<br>5<br>7<br>9<br>1<br>3<br>5<br>7</p></blockquote><p>我们将刚才的odd函数改编了一下，使其可以用传递参数来控制其循环次数。<br><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例2 杨辉三角形</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangle</span><span class="params">()</span>:</span></span><br><span class="line">    a = [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a = [<span class="number">1</span>] + [a[i]+a[i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(a))] + [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> triangle():</span><br><span class="line">    print(t)</span><br><span class="line">    results.append(t)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>[1]<br>[1, 1]<br>[1, 2, 1]<br>[1, 3, 3, 1]<br>[1, 4, 6, 4, 1]<br>[1, 5, 10, 10, 5, 1]<br>[1, 6, 15, 20, 15, 6, 1]<br>[1, 7, 21, 35, 35, 21, 7, 1]<br>[1, 8, 28, 56, 70, 56, 28, 8, 1]<br>[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]</p></blockquote><p>上述代码在for循环中控制迭代次数。</p><h2 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h2><p>只要是实现了<code>__iter__()</code>或<code>__getitem__()</code>方法的对象，就可以使用迭代器进行访问。</p><ul><li><p>序列：字符串、列表、元组</p></li><li><p>非序列：字典、文件</p></li><li><p><strong>自定义类</strong>：用户自定义的类实现了<code>__iter__()</code>或<code>__getitem__()</code>方法的对象</p></li><li><p><strong>生成器</strong>或者<strong>生成器函数</strong><br><br><br>可以使用<code>isinstance()</code>判断一个对象是否是Iterable可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterable) <span class="comment"># 列表</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(&#123;&#125;, Iterable) <span class="comment"># 字典</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># 字符串</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance((x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)), Iterable) <span class="comment"># 这个是生成器</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">100</span>, Iterable) <span class="comment"># 普通数字</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></li><li><p>可迭代≠是迭代器。除了<font color="red">生成器既是迭代器，也是可迭代对象</font>，其他的可迭代对象都需要<code>iter()</code>来获取其迭代器。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;迭代器和生成器&quot;&gt;&lt;a href=&quot;#迭代器和生成器&quot; class=&quot;headerlink&quot; title=&quot;迭代器和生成器&quot;&gt;&lt;/a&gt;迭代器和生成器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;迭代是Python最强大的功能之一，是访问集合元素的一种方式。&lt;/li&gt;
&lt;li&gt;迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。&lt;/li&gt;
&lt;li&gt;迭代器是一个可以记住遍历的位置的对象。
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
      <category term="Python基础" scheme="/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>多元梯度下降</title>
    <link href="/2019/07/24/%E5%A4%9A%E5%85%83%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>/2019/07/24/多元梯度下降/</id>
    <published>2019-07-24T13:45:09.000Z</published>
    <updated>2019-11-03T02:57:55.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h1><hr><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/24/eVgGQA.png" class="lozad"><br><a id="more"></a><br>- 符号解释：</p><p>$n$：特征的个数<br>$x^{(i)}$：第i个训练样本<br>$x^{(i)}_{j}$：第$i$个训练样本的第$j$个特征值</p><p>预测函数：</p><script type="math/tex; mode=display">h_\theta(x) = \theta_0 +\theta_1x_1 + \theta_2x_2 + ...+\theta_nx_n</script><p>为了方便，我们定义$x_0=1$</p><script type="math/tex; mode=display">x = \begin{bmatrix} x_0\\x_1\\x_2\\\vdots\\x_n\end{bmatrix}</script><script type="math/tex; mode=display">\theta = \begin{bmatrix} \theta_0\\\theta_1\\\theta_2\\\vdots\\\theta_n\end{bmatrix}</script><p>则有<script type="math/tex">h_\theta(x) = \theta_0 x_0+\theta_1x_1 + \theta_2x_2 + ...+\theta_nx_n</script></p><script type="math/tex; mode=display">= \theta^T·x\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><p><br></p><h1 id="多元梯度下降"><a href="#多元梯度下降" class="headerlink" title="多元梯度下降"></a>多元梯度下降</h1><hr><p>预测函数：<script type="math/tex">h_\theta(x) = \theta^T·x =\theta_0 x_0+\theta_1x_1 + \theta_2x_2 + ...+\theta_nx_n</script><br>代价函数：<script type="math/tex">J(\theta_0,\theta_1,\dots,\theta_n) = \frac{1}{2m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})^2}</script></p><p>梯度下降算法：</p><script type="math/tex; mode=display">Repeat\{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j}J(\theta_0, \theta_1,\dots,\theta_n)  \ \ \  for\ j = 0,1,\dots,n</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><p><br><br><br>求导得：</p><script type="math/tex; mode=display">Repeat\{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_j := \theta_j - \alpha \frac {1}{m} \sum ^{m}_{i=1}(h_\theta(x^{(i)})-y^{(i)})·x_j^{(i)}</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><p><br></p><h1 id="梯度下降法实践1：特征缩放"><a href="#梯度下降法实践1：特征缩放" class="headerlink" title="梯度下降法实践1：特征缩放"></a>梯度下降法实践1：<font size="4">特征缩放</font></h1><hr><p>在我们面对多维特征问题的时候，我们要保证这些特征都具有相近的尺度，这将帮助梯<br>度下降算法更快地收敛。</p><p>比如以房价问题为例，假设我们使用两个特征，房屋的尺寸和房间的数量，尺寸的值为 0<br>2000 平方英尺，而房间数量的值则是 0-5，以两个参数分别为横纵坐标，绘制代价函数的等<br>高线图能，<b>看出图像会<font color="gren">显得很扁</font>，梯度下降算法<font color="red">需要非常多次的迭代</font>才能收敛。 </b></p><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/24/eVg3zd.png" class="lozad"><br><br><br><b>特征缩放</b>是一种有效的解决方法：<u>尝试将所有特征的尺度都尽量缩放到-1 到 1 之间</u>。如图：<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/24/eVgJsI.png" class="lozad"><br><b>最简单的方法是令 </b></p><script type="math/tex; mode=display">x_n' = \frac{x_n - \mu_n}{s_n}</script><p>其中，$\mu_n$是<b>平均值</b>，$s_n$是<b>标准差</b>，或者<b>极差（最大值减最小值）。</b></p><p><br></p><p><br></p><h1 id="梯度下降法实践2-学习率α"><a href="#梯度下降法实践2-学习率α" class="headerlink" title="梯度下降法实践2: 学习率α"></a>梯度下降法实践2: <font size="4">学习率α</font></h1><hr><p>梯度下降算法收敛所需要的迭代次数根据模型的不同而不同，我们不能提前预知，我们<br><b>可以绘制迭代次数和代价函数的图表来观测算法需要几次迭代趋于收敛。</b><br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/24/eVg1RH.png" class="lozad"><br>$J(\theta)$应该在每次迭代后都减少。<br>我们也可以设置：<b>当一次迭代后减少的值小于特定阈值时停止。</b></p><p>梯度下降算法的每次迭代受到学习率的影响</p><ul><li>如果学习率𝑎过小，则达到收敛所需的迭代次数会非常高；</li><li>如果学习率𝑎过大，每次迭代可能不会减小代价函数，可能会越过局部最小值导致无法收敛。</li></ul><p>通常使用这些学习率：<br>𝛼 = 0.01，0.03，0.1，0.3，1，3，10 </p><p><br><br><br></p><h1 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title=" Python代码实现"></a><font size="4"> Python代码实现</font></h1><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'ex1data2.txt'</span>, names=[<span class="string">'size'</span>, <span class="string">'rooms'</span>, <span class="string">'price'</span>])</span><br><span class="line"><span class="comment"># print(df.head())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_feature</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> column: (column - column.mean()) / column.std())<span class="comment">#特征缩放</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = normalize_feature(df)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_X</span><span class="params">(df)</span>:</span></span><br><span class="line">    ones = pd.DataFrame(&#123;<span class="string">'ones'</span>: np.ones(len(df))&#125;)</span><br><span class="line">    data = pd.concat([ones, df], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data.iloc[:, :<span class="number">-1</span>].as_matrix()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_y</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.array(df.iloc[:, <span class="number">-1</span>].as_matrix())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = get_X(df)</span><br><span class="line">y = get_y(df)</span><br><span class="line">m = X.shape[<span class="number">0</span>]</span><br><span class="line">n = X.shape[<span class="number">1</span>]</span><br><span class="line">theta = np.zeros(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lr_cost</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    inner = (X.dot(theta) - y)</span><br><span class="line">    cost = inner.T.dot(inner)</span><br><span class="line">    <span class="keyword">return</span> cost/(<span class="number">2</span> * m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    inner = X.T.dot(X.dot(theta) - y)</span><br><span class="line">    <span class="keyword">return</span> inner/m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_gradient</span><span class="params">(theta, X, y, epoch, alpha=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">    _theta = theta.copy()</span><br><span class="line">    cost_data = [lr_cost(theta, X, y)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(epoch):</span><br><span class="line">        _theta = _theta - alpha * gradient(_theta, X, y)</span><br><span class="line">        cost_data.append(lr_cost(_theta, X, y))</span><br><span class="line">    <span class="keyword">return</span> _theta, cost_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">epoch = <span class="number">500</span></span><br><span class="line">final_theta, cost_data = batch_gradient(theta, X, y, epoch)</span><br><span class="line">print(final_theta)</span><br><span class="line">sns.tsplot(time=np.arange(len(cost_data)), data=cost_data)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">'cost'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多元线性回归&quot;&gt;&lt;a href=&quot;#多元线性回归&quot; class=&quot;headerlink&quot; title=&quot;多元线性回归&quot;&gt;&lt;/a&gt;多元线性回归&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/07/24/eVgGQA.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="吴恩达《机器学习》" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%90%B4%E6%81%A9%E8%BE%BE%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="梯度下降" scheme="/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
  </entry>
  
  <entry>
    <title>Python练手项目（1）Pygame制作游戏</title>
    <link href="/2019/07/17/Python%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%EF%BC%881%EF%BC%89Pygame%E5%88%B6%E4%BD%9C%E6%B8%B8%E6%88%8F/"/>
    <id>/2019/07/17/Python练手项目（1）Pygame制作游戏/</id>
    <published>2019-07-17T14:05:29.000Z</published>
    <updated>2019-11-09T14:47:16.068Z</updated>
    
    <content type="html"><![CDATA[<p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1C6HK.png" class="lozad"><br><a id="more"></a></p><h1 id="背景部分"><a href="#背景部分" class="headerlink" title="背景部分"></a>背景部分</h1><hr><h2 id="创建Pygame窗口以及响应用户输入"><a href="#创建Pygame窗口以及响应用户输入" class="headerlink" title="创建Pygame窗口以及响应用户输入"></a>创建Pygame窗口以及响应用户输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">1200</span>, <span class="number">700</span>))</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure><ol><li>首先我们导入模块<code>pygame</code>和<code>sys</code>。sys用于退出游戏</li><li>游戏以函数<code>run_game()</code>开头。</li><li><code>pygame.init()</code>用于初始化游戏背景。</li><li><code>pygame.display.set_mode()</code>用于创建一个名为screen的显示窗口。实参(1200,700)是一个元组，指定游戏窗口的尺寸。</li><li>对象screen是一个surface。在Pygame中，surface是屏幕的一部分，用于显示游戏元素（比如外星人、飞船），游戏中每个元素都是一个surface。激活游戏的动画循环后，每经过一次循环都将重新绘制这个surface。</li><li>为访问Pygame侦听到的时间，我们使用方法<code>pygame.event.get()</code>。所有的<b>键盘和鼠标事件</b>都将促使for循环运行。比如玩家点击窗口的关闭按钮时，将检测到pygame.QUIT事件，我们就调用<code>sys.exit()</code>来退出游戏。</li><li><code>pygame.display.flip()</code>命令Pygame让最近绘制的屏幕可见。它在每次执行while循环时都会绘制一个空屏幕，并擦去旧屏幕。</li></ol><h2 id="绘制背景色"><a href="#绘制背景色" class="headerlink" title="绘制背景色"></a>绘制背景色</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在while循环中加入如下语句：</span></span><br><span class="line">    screen.fill((<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>))</span><br></pre></td></tr></table></figure><p>Pygame中，颜色是以RGB值表示的。</p><h2 id="创建设置类"><a href="#创建设置类" class="headerlink" title="创建设置类"></a>创建设置类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br></pre></td></tr></table></figure><p>将所有游戏的设置存储在这个类中， 则invasion.py可修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    sett = Settings()</span><br><span class="line">    screen = pygame.display.set_mode(</span><br><span class="line">        (sett.screen_length, sett.screen_width)</span><br><span class="line">    )</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">        screen.fill(sett.bg_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="飞船部分"><a href="#飞船部分" class="headerlink" title="飞船部分"></a>飞船部分</h1><hr><h2 id="添加飞船图像"><a href="#添加飞船图像" class="headerlink" title="添加飞船图像"></a>添加飞船图像</h2><p>就选用书配套的素材吧</p><h2 id="创建Ship类"><a href="#创建Ship类" class="headerlink" title="创建Ship类"></a>创建Ship类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        self.image = pygame.image.load(<span class="string">"ship.bmp"</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line">        </span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""在指定位置绘制飞船"""</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br></pre></td></tr></table></figure><h2 id="在屏幕上绘制飞船"><a href="#在屏幕上绘制飞船" class="headerlink" title="在屏幕上绘制飞船"></a>在屏幕上绘制飞船</h2><p>在invasion.py中创建飞船对象，并调用其方法blitme()：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    sett = Settings()</span><br><span class="line">    screen = pygame.display.set_mode(</span><br><span class="line">        (sett.screen_width, sett.screen_length)</span><br><span class="line">    )</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line">    ship = Ship(screen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">        screen.fill(sett.bg_color)</span><br><span class="line">        ship.blitme()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p>运行后结果：<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1C039.png" class="lozad"></p><h1 id="重构-game-function模块"><a href="#重构-game-function模块" class="headerlink" title="重构:game_function模块"></a>重构:game_function模块</h1><hr><h2 id="函数check-events"><a href="#函数check-events" class="headerlink" title="函数check_events()"></a>函数check_events()</h2><p>我们把管理事件的代码移到一个名为check_events()的函数里，以简化run_game()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br></pre></td></tr></table></figure></p><h2 id="函数update-screen"><a href="#函数update-screen" class="headerlink" title="函数update_screen()"></a>函数update_screen()</h2><p>为进一步简化run_game()，将更新屏幕的代码移到一个名为update_screen()的函数里，并将函数定义放在game_function中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, ship)</span>:</span></span><br><span class="line">    screen.fill(sett.bg_color)</span><br><span class="line">    ship.blitme()</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p><p><br>&lt;/br&gt;<br><br><br></p><h1 id="飞船移动部分"><a href="#飞船移动部分" class="headerlink" title="飞船移动部分"></a>飞船移动部分</h1><hr><h2 id="响应按键"><a href="#响应按键" class="headerlink" title="响应按键"></a>响应按键</h2><p>每当用户按键时，都在Pygame里注册一个<b>事件</b>。事件都是通过方法<code>pygame.event.get()</code>获取的，因此在函数check_events()中，我们需要制定检查哪些类型的事件。<br>每次按键都被注册一个<code>KEYDOWN</code>事件。检测到该事件后，我们需要检查是否按下了特定的键，执行特定的操作。比如按下右键后，要让飞船向右移动。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(ship)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                ship.rect.centerx += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>我们在参数列表里加入了ship,因为需要能够访问到飞船内部的属性。</p><h2 id="允许不断移动"><a href="#允许不断移动" class="headerlink" title="允许不断移动"></a>允许不断移动</h2><p>玩家按住→键是希望飞船不停移动，直到松开为止。<br>我们可以让游戏检测<code>pygame.KEYUP</code>事件，然后结合KEYUP和KEYDOWN事件实现持续移动。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ship.py</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.right_move = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move:</span><br><span class="line">            self.rect.centerx += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>在飞船的类内初始化时多添了一个属性<b>移动标志变量</b><code>right_move</code><br>多添了一个方法<code>update()</code>，用于检查该标志变量，实现飞船属性更新：这个变量为True时，飞船就会向右移动。<br>而这个标志变量会<b>因KEYDOWN变为True，因KEYUP变为False</b>，以此来实现持续移动</p><p>同时，要在invasion.py的while循环里调用update()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py   </span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(ship)</span><br><span class="line">        ship.update()</span><br><span class="line">        gf.update_screen(sett, screen, ship)</span><br></pre></td></tr></table></figure></p><h2 id="左右移动"><a href="#左右移动" class="headerlink" title="左右移动"></a>左右移动</h2><p>只需照着向右移动就能做出向左移动</p><h2 id="调整飞行速度"><a href="#调整飞行速度" class="headerlink" title="调整飞行速度"></a>调整飞行速度</h2><p>每次执行while循环，飞船最多移动1像素。但可以在settings模块里加入属性<code>ship_speed</code>，用于控制飞船的速度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        self.ship_speed = <span class="number">0.7</span></span><br></pre></td></tr></table></figure><p>同时在ship.py中修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.center = float(self.rect.centerx)</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move:</span><br><span class="line">            self.center += sett.ship_speed</span><br><span class="line">        <span class="keyword">if</span> self.left_move:</span><br><span class="line">            self.center -= sett.ship_speed</span><br><span class="line"></span><br><span class="line">        self.rect.centerx = self.center</span><br></pre></td></tr></table></figure></p><ul><li>在<strong>init</strong>（）的形参中加入了setting类的sett，让飞船的方法update()可以获取其速度设置。</li><li>rect只存储整数，所以我们新建一个属性<code>center</code>，用<code>flota()</code>将<code>rect.centerx</code>转化成小数存储到<code>center</code>中。更新center之后，再根据它来更新控制飞船位置的rect.centerx（虽然centerx只存储self.center的整数部分，但对于显示飞船而言问题不大。）</li></ul><h2 id="限制飞船活动范围"><a href="#限制飞船活动范围" class="headerlink" title="限制飞船活动范围"></a>限制飞船活动范围</h2><p>为了防止飞船飞出屏幕外，我们在飞船位置变更前添加if语句判断飞船是否将飞出框外。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ship.py</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.center += self.sett.ship_speed</span><br><span class="line">        <span class="keyword">if</span> self.left_move <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.center -= self.sett.ship_speed</span><br></pre></td></tr></table></figure></p><p>如果rect的左/右边缘没有触及屏幕左/右边缘，才可以移动。</p><h2 id="重构check-event"><a href="#重构check-event" class="headerlink" title="重构check_event()"></a>重构check_event()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, ship)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keyup</span><span class="params">(event, ship)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(ship)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, ship)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="子弹部分"><a href="#子弹部分" class="headerlink" title="子弹部分"></a>子弹部分</h1><h2 id="添加子弹设置"><a href="#添加子弹设置" class="headerlink" title="添加子弹设置"></a>添加子弹设置</h2><p>在setting.py中添加新类Bullet所需的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">    <span class="comment"># 屏幕设置</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 子弹设置</span></span><br><span class="line">    self.bullet_speed = <span class="number">1</span></span><br><span class="line">    self.bullet_width = <span class="number">3</span></span><br><span class="line">    self.bullet_height = <span class="number">15</span></span><br><span class="line">    self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br></pre></td></tr></table></figure></p><h2 id="创建Bullet类"><a href="#创建Bullet类" class="headerlink" title="创建Bullet类"></a>创建Bullet类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bullet.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""一个对飞船的子弹管理的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, ship)</span>:</span></span><br><span class="line">        <span class="string">"""在飞船处创建一个子弹对象"""</span></span><br><span class="line">    super(Bullet, self).__init__()</span><br><span class="line">    self.screen = screen</span><br><span class="line"></span><br><span class="line">    self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, sett.bullet_width, sett.bullet_height)</span><br><span class="line">    self.rect.centerx = ship.rect.centerx</span><br><span class="line">    self.rect.top = ship.rect.top</span><br><span class="line"></span><br><span class="line">    self.y = float(self.rect.y)</span><br><span class="line"></span><br><span class="line">    self.color = sett.bullet_color</span><br><span class="line">    self.speed_factor = sett.bullet_speed</span><br></pre></td></tr></table></figure><p>子弹并非基于图像，因此我们必须使用<code>pygame.Rect()</code>类从空白开始创建一个矩形。创建这个类的实例时，必须提供矩形<b>左上角的x坐标和y坐标</b>，还有宽度和高度。我们先在（0，0）处创建一个矩形，并在接下来放在正确的位置，这个位置取决于飞船的位置。</p><p>接下来编写<code>update()</code>和<code>draw_bullet</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""向上移动子弹"""</span></span><br><span class="line">    </span><br><span class="line">self.y -= self.speed</span><br><span class="line">self.rect.y = self.y</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_bullet</span><span class="params">(self)</span>:</span></span><br><span class="line">    pygame.draw.rect(self.screen, self.color, self.rect)</span><br></pre></td></tr></table></figure></p><h2 id="将子弹存到编组中"><a href="#将子弹存到编组中" class="headerlink" title="将子弹存到编组中"></a>将子弹存到编组中</h2><p>在玩家每次按下空格时都射出一发子弹。首先我们在invasion.py中创建一个编组（Group）用于存储所有子弹，以便能够管理发射出去的子弹。<br>这个编组是pygame.sprite.Group类的一个实例；Group类 类似于列表，但提供了有助于游戏开发的功能。在主循环中，我们使用这个编组在屏幕上绘制子弹，更新每一个子弹的位置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> game_function <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    bullets = Group()</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line">        bullets.update()</span><br><span class="line">        gf.update_screen(sett, screen, ship, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p>我们将bullets作为实参传递给了check_events()和update_screen()。在check_event（）中我们要用空格处理bullets；在update_screen中则要更新绘制到屏幕上的bullets。<br><b>当你对编组调用update()时，编组将自动对每一个”精灵”调用update()</b>，即对每一个子弹。</p><h2 id="开火"><a href="#开火" class="headerlink" title="开火"></a>开火</h2><p>因为只有在按下空格键时飞船才会开火，所以我们只需修改<code>check_keydown_events()</code>而不用修改keyup<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"><span class="keyword">from</span> bullet <span class="keyword">import</span>  Bullet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">        bullets.add(new_bullet)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    screen.fill(sett.bg_color)</span><br><span class="line">    ship.blitme()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets:</span><br><span class="line">        bullet.draw_bullet()</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p><h2 id="删除已经消失的子弹"><a href="#删除已经消失的子弹" class="headerlink" title="删除已经消失的子弹"></a>删除已经消失的子弹</h2><p>我们需要将已经飞出屏幕的子弹删除，减少内存负担。<br>为此，我们需要在每次更新子弹位置后，检测rect的bottom属性小于0的子弹，并删除它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line">        bullets.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line"><span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">bullets.remove(bullet)</span><br><span class="line">print(len(bullets))</span><br><span class="line"></span><br><span class="line">        gf.update_screen(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure><ul><li><b>在for循环中，不应从列表或编组中删除条目，因此必须是遍历<u>编组的副本</u></b>，故需要调用方法<code>copy()</code>，返回一个编组的副本。</li><li>输出编组的长度，即有效子弹的数量，是为了显示子弹的数量，核实已消失的子弹确实被删除了。</li></ul><p>子弹效果如图：<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1Cah4.png" class="lozad"></p><h2 id="限制子弹数量"><a href="#限制子弹数量" class="headerlink" title="限制子弹数量"></a>限制子弹数量</h2><p>多数同类型游戏里面都会有对子弹数量的限制，鼓励玩家有目标地射击。<br>我们在此限制子弹最大数量为4.</p><p>首先在Setting类里设置允许的最大子弹数：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#setting.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">       <span class="comment"># 屏幕设置</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment"># 子弹设置</span></span><br><span class="line">       ...</span><br><span class="line">       self.bullet_allowed = <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>在check_keydown_event()中检测到空格前，添加if语句判断子弹数量(群组长度)是否已经超过最大限制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        <span class="keyword">if</span> len(bullets) &lt; sett.bullet_allowed:</span><br><span class="line">            new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">            bullets.add(new_bullet)</span><br></pre></td></tr></table></figure></p><h2 id="重构bullet函数"><a href="#重构bullet函数" class="headerlink" title="重构bullet函数"></a>重构bullet函数</h2><p>我们可以把子弹更新函数和删除子弹的代码写进一个函数<code>update_bullet()</code>里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullet</span><span class="params">(bullets)</span>:</span></span><br><span class="line">    bullets.update()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            bullets.remove(bullet)</span><br><span class="line">        print(len(bullets))</span><br></pre></td></tr></table></figure></p><p>故主循环里的代码可简化：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line"></span><br><span class="line">        gf.update_bullet(bullets)</span><br><span class="line">        gf.update_screen(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure></p><p>同时，把检查子弹数量是否超额的代码已经添加新子弹的代码整合进一个<code>fire_bullet()</code>函数里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fire_bullet</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(bullets) &lt; sett.bullet_allowed:</span><br><span class="line">        new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">        bullets.add(new_bullet)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        fire_bullet(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure></p><h1 id="外星人部分"><a href="#外星人部分" class="headerlink" title="外星人部分"></a>外星人部分</h1><p><br><br></p><h2 id="创建Alien类"><a href="#创建Alien类" class="headerlink" title="创建Alien类"></a>创建Alien类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""单个外星人的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.setting = sett</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载外星人图像，设置rect属性</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">'alien.bmp'</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每个外星人最初都在屏幕左上角</span></span><br><span class="line">        self.rect.x = self.rect.width</span><br><span class="line">        self.rect.y = self.rect.height</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储外星人准确位置</span></span><br><span class="line">        self.x = float(self.rect.x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br></pre></td></tr></table></figure><h2 id="创建Alien实例"><a href="#创建Alien实例" class="headerlink" title="创建Alien实例"></a>创建Alien实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, ship, alien, bullets)</span><br><span class="line"><span class="comment"># update_screen里调用 alien.blitme()</span></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1Cw9J.png" class="lozad"></p><h2 id="创建一群外星人"><a href="#创建一群外星人" class="headerlink" title="创建一群外星人"></a>创建一群外星人</h2><h3 id="确定一行可以容纳多少外星人"><a href="#确定一行可以容纳多少外星人" class="headerlink" title="确定一行可以容纳多少外星人"></a>确定一行可以容纳多少外星人</h3><p>我们要根据屏幕水平宽度确定一行可容纳多少外星人。我们要在屏幕两边留下边距，把它设置为外星人图像的宽度。所以放置外星人的水平空间为：</p><blockquote><p>available_space_x = sett.screen_width - (2 * alien_width)</p></blockquote><p><br><br>外星人之间还得留下空间，设置为一个外星人的宽度。因此一行可容纳的外星人数量：</p><blockquote><p>number_aliens_x = available_space_x / (2 * alien_width)</p></blockquote><h3 id="创建多行外星人"><a href="#创建多行外星人" class="headerlink" title="创建多行外星人"></a>创建多行外星人</h3><p>为创建一行外星人，首先在invasion.py中创建一个名为aliens的空编组，用于存储全部外星人，再调用game_function.py中的创建外星人群的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">ship = Ship(sett, screen)</span><br><span class="line">    bullets = Group()</span><br><span class="line">    aliens = Group()</span><br><span class="line">aliens = Group()</span><br><span class="line"></span><br><span class="line">    gf.create_fleet(sett, screen, aliens)</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    available_space_x = sett.screen_width - <span class="number">2</span> * alien_width</span><br><span class="line">    number_aliens_x = int(available_space_x / (<span class="number">2</span> * alien_width))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">        <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">        alien = Alien(sett, screen)</span><br><span class="line">        alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">        alien.rect.x = alien.x</span><br><span class="line">        aliens.add(alien)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    aliens.draw(screen)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如图：<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1CUNF.png" class="lozad"></p><h2 id="重构create-fleet"><a href="#重构create-fleet" class="headerlink" title="重构create_fleet()"></a>重构create_fleet()</h2><p> 为create_fleet()新添两个函数<code>create_alien()</code>和<code>get_number_aliens_x()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number_aliens_x</span><span class="params">(sett, alien_width)</span>:</span></span><br><span class="line">    available_space_x = sett.screen_width - <span class="number">2</span> * alien_width</span><br><span class="line">    number_aliens_x = int(available_space_x / (<span class="number">2</span> * alien_width))</span><br><span class="line">    <span class="keyword">return</span> number_aliens_x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_alien</span><span class="params">(sett, screen, aliens, alien_width, alien_number)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">    alien.rect.x = alien.x</span><br><span class="line">    aliens.add(alien)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    number_aliens_x = get_number_aliens_x(sett, alien_width)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">        create_alien(sett, screen, aliens, alien_width, alien_number)</span><br></pre></td></tr></table></figure><h2 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h2><p>要创建外星人群，需要计算屏幕可容纳多少行，并对创建一行外星人的循环重复相应的次数。为计算可容纳的行数，我们<u>将屏幕高度减去第一行的外星人的上边距（外星人高度）、飞船的高度以及最初外星人高度加上外星人边距：</u></p><blockquote><p>available_space_y = sett.screen_height - 3*alien_height - ship_height</p></blockquote><p>这样可以给飞船上方留出一定空白区域。</p><p>每行下方都要留出一定的空白区域，并将其设置为外星人的高度。为计算可容纳的行数，我们将可用垂直空间除以外星人高度的两倍：</p><blockquote><p>number_rows = available_space_y /(2 * alien_height)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_funtion.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_nuber_rows</span><span class="params">(sett, alien_height, ship_height)</span>:</span></span><br><span class="line">    available_space_y = sett.screen_length - <span class="number">3</span> * alien_height - ship_height</span><br><span class="line">    number_rows = int(available_space_y / (<span class="number">2</span> * alien_height))</span><br><span class="line">    <span class="keyword">return</span> number_rows</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_alien</span><span class="params">(sett, screen, aliens, alien_width, alien_number, row_number)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">    ...</span><br><span class="line">    alien.rect.y = alien.rect.height + <span class="number">2</span> * alien.rect.height * row_number</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, ship, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    ...</span><br><span class="line">    number_rows = get_nuber_rows(sett, alien_height, ship.rect.height)</span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> row_number <span class="keyword">in</span> range(number_rows):</span><br><span class="line">        <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">            create_alien(sett, screen, aliens, alien_width, alien_number, row_number)</span><br></pre></td></tr></table></figure><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1CNAU.png" class="lozad"></p><h1 id="移动外星人"><a href="#移动外星人" class="headerlink" title="移动外星人"></a>移动外星人</h1><h2 id="让外星人向右移动"><a href="#让外星人向右移动" class="headerlink" title="让外星人向右移动"></a>让外星人向右移动</h2><p>为移动外星人，我们将使用alien.py中的方法update()，且对外星人群中的每个外星人都调用它。<br>首先添加一个外星人移动速度的设置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        ...</span><br><span class="line">        self.alien_speed = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>然后在Alien类里实现update()：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x += self.setting.alien_speed</span><br><span class="line">        self.rect.x = self.x</span><br></pre></td></tr></table></figure></p><p>接着在game_function.py里编写<code>update_aliens()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(aliens)</span>:</span></span><br><span class="line">    aliens.update()</span><br></pre></td></tr></table></figure></p><p>aliens编组将自动对每一个外星人调用update()。</p><p>在主循环里调用update_aliens(aliens):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">    ship.update()</span><br><span class="line">    gf.update_bullet(bullets)</span><br><span class="line">    gf.update_aliens(aliens)</span><br><span class="line">    gf.update_screen(sett, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><h2 id="创建表示外星人移动方向的设置"><a href="#创建表示外星人移动方向的设置" class="headerlink" title="创建表示外星人移动方向的设置"></a>创建表示外星人移动方向的设置</h2><p>让外星人在撞到屏幕右边缘后会向下移动，再向左移动，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line">self.alien_speed = <span class="number">1</span></span><br><span class="line">self.alien_drop_speed = <span class="number">10</span></span><br><span class="line"><span class="comment"># 下降速度</span></span><br><span class="line">self.fleet_direction = <span class="number">1</span></span><br><span class="line"><span class="comment"># 1表示向右，-1表示向左, 可以直接作为速度的系数用于坐标运算</span></span><br></pre></td></tr></table></figure></p><h2 id="检查外星人是否撞到边缘"><a href="#检查外星人是否撞到边缘" class="headerlink" title="检查外星人是否撞到边缘"></a>检查外星人是否撞到边缘</h2><p>检查外星人是否撞到边缘，为类Alien编写方法<code>check_edges()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">check_edges</span><span class="params">(self)</span>:</span></span><br><span class="line">     screen_rect = self.screen.get_rect()</span><br><span class="line">     <span class="keyword">if</span> self.rect.right &gt;= screen_rect.right:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">elif</span> self.rect.left &lt;= screen_rect.left:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></p><p>同时修改update():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.x += self.setting.alien_speed * self.setting.fleet_direction</span><br><span class="line">    self.rect.x = self.x</span><br></pre></td></tr></table></figure></p><h2 id="向下移动并改变移动方向"><a href="#向下移动并改变移动方向" class="headerlink" title="向下移动并改变移动方向"></a>向下移动并改变移动方向</h2><p>有<b>一个外星人</b>到达屏幕边缘时，需要将<b>整群外星人</b>下移并转向。所以我们需要对game_function.py做大修改，因为我们需要检查每一个外星人是不是已经到了边缘。为此我们编写<code>check_fleet_edge()</code>和<code>change_fleet_dir()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_fleet_dir</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""将整群外星人下移"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        alien.rect.y += sett.alien_drop_speed</span><br><span class="line">    sett.fleet_direction *= <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_fleet_edges</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""有一个外星人到达边缘"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.check_edges():</span><br><span class="line">            change_fleet_dir(sett, aliens)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br></pre></td></tr></table></figure></p><p>同时修改主循环中update_aliens()的参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gf.update_aliens(sett, aliens)</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="射杀外星人"><a href="#射杀外星人" class="headerlink" title="射杀外星人"></a>射杀外星人</h1><h2 id="检测子弹与外星人的碰撞"><a href="#检测子弹与外星人的碰撞" class="headerlink" title="检测子弹与外星人的碰撞"></a>检测子弹与外星人的碰撞</h2><p>子弹击中外星人时，我们要让外星人消失。为此我们需要在更新子弹位置后判断其是否碰撞。</p><p>我们用<code>sprite.groupcollide()</code>方法来检测两个群组的成员是否有碰撞。<br>它将每颗子弹的rect同每个外星人的rect进行比较，并<b>返回一个字典</b>，其中包含发生碰撞的子弹和外星人。在这个字典中，每个键都是一颗子弹，而对应的值都是被击中的外星人。（这个字典在之后计分要用到）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullets</span><span class="params">(aliens, bullets)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>这行代码先遍历每颗子弹再遍历每个外星人，每当有两者rect重叠，它就在返回的字典中添加一对键值对。最后两个实参告诉pygame删除发生碰撞的子弹和外星人（第一个true表示子弹会被删除，如果改为false则子弹碰撞时不会被删除，而是一直飞到屏幕外）</p><p>接着要在invasion.py中的update_bullets()参数中添加aliens。</p><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1CBcR.png" class="lozad"></p><h2 id="生成新的外星人群"><a href="#生成新的外星人群" class="headerlink" title="生成新的外星人群"></a>生成新的外星人群</h2><p>当一个外星人群被消灭后，应该再出现另一群外星人。<br>我们先检查编组aliens是否为空，如果为空，就调用create_fleet()。我们将在update_bullets()中进行这个检查，<b>因为外星人都是在这里被消灭的</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullets</span><span class="params">(sett, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">   create_fleet(sett, screen, ship, aliens)</span><br></pre></td></tr></table></figure></p><p>同时要修改invasion.py中update_bullets的参数。</p><h2 id="重构update-bullets"><a href="#重构update-bullets" class="headerlink" title="重构update_bullets()"></a>重构update_bullets()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullet</span><span class="params">(sett, screen, ship, bullets, aliens)</span>:</span></span><br><span class="line">    bullets.update()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            bullets.remove(bullet)</span><br><span class="line">        print(len(bullets))</span><br><span class="line">    check_bullet_collision(sett, screen, ship, bullets, aliens)</span><br></pre></td></tr></table></figure><h1 id="结束游戏"><a href="#结束游戏" class="headerlink" title="结束游戏"></a>结束游戏</h1><p>需要添加失败事件：外星人撞到飞船，或者有外星人降到屏幕底端，飞船将会被摧毁，玩家用光生命树后游戏结束。</p><h2 id="检测飞船与外星人碰撞"><a href="#检测飞船与外星人碰撞" class="headerlink" title="检测飞船与外星人碰撞"></a>检测飞船与外星人碰撞</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, ship, aliens)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens):</span><br><span class="line">        print(<span class="string">"shit!"</span>)</span><br></pre></td></tr></table></figure><p>方法<code>spritecollideany()</code>接受两个实参：一个精灵和一个编组。它检查编组是否有其他成员与精灵发生了碰撞，并在找到与精灵发生碰撞的成员后停止遍历，返回True. 如果没有碰撞则返回None。</p><h2 id="响应外星人与飞船碰撞"><a href="#响应外星人与飞船碰撞" class="headerlink" title="响应外星人与飞船碰撞"></a>响应外星人与飞船碰撞</h2><p>飞船与外星人碰撞后：飞船生命-1、全屏外星人和子弹清空并暂停一段时间后出现新的外星人群。</p><p>寻找编写一个用于跟踪游戏统计信息的新类—Gamestats, 并将其保存为文件stats. py ：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stats.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>同时在invasion.py中创建一个名为stats的实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sett = Settings()</span><br><span class="line">stats = Gamestats(sett)</span><br></pre></td></tr></table></figure></p><p>接着编写飞船碰撞时的响应：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    aliens.empty()</span><br><span class="line">    bullets.empty()</span><br><span class="line"></span><br><span class="line">    create_fleet(sett, screen, ship, aliens)</span><br><span class="line">    ship.center = screen.get_rect().centerx</span><br><span class="line">    <span class="comment"># 将飞船调整至中心位置</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens):</span><br><span class="line">        ship_hit(sett, stats, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><p>同时要在invasion.py中修改update_aliens()参数列表</p><h2 id="有外星人到达底部"><a href="#有外星人到达底部" class="headerlink" title="有外星人到达底部"></a>有外星人到达底部</h2><p>为此我们写一个函数<code>check_alien_bottom()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alien_bottom</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    screen_rect = screen.get_rect()</span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        <span class="keyword">if</span> alien.rect.bottom &gt;= screen_rect.bottom:</span><br><span class="line">            ship_hit(sett, stats, screen, ship, aliens, bullets)</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens) <span class="keyword">or</span> alien_bottom(sett, stats, screen, ship, aliens, bullets):</span><br><span class="line">        ship_hit(sett, stats, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><h2 id="游戏结束"><a href="#游戏结束" class="headerlink" title="游戏结束"></a>游戏结束</h2><p> 当life减为0后，游戏结束。我们在GameStats里添加一个作为标志的属性active，以便在玩家的飞船用完后结束游戏：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stats.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.active = <span class="literal">True</span></span><br></pre></td></tr></table></figure></p><p>当玩家的生命减为0时，该变量变为false<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life&gt;<span class="number">0</span>:</span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        ship.center = screen.get_rect().centerx</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h1 id="添加PLAY按钮"><a href="#添加PLAY按钮" class="headerlink" title="添加PLAY按钮"></a>添加PLAY按钮</h1><p>添加PLAY按钮，让程序开始时处于非活动状态，则要修改stats.py中的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="创建Button类"><a href="#创建Button类" class="headerlink" title="创建Button类"></a>创建Button类</h2><p>由于pygame没有内置创建按钮的方法，所以我们创建一个Button类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># button.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, msg)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        self.width, self.height = <span class="number">200</span>, <span class="number">50</span></span><br><span class="line">        self.button_color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">        self.text_color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line">        <span class="comment"># 指定字体字号来渲染文字</span></span><br><span class="line"></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, self.width, self.height)</span><br><span class="line">        self.rect.center = self.screen_rect.center</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字符串渲染成图像</span></span><br><span class="line">        self.prep_msg(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_msg</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        <span class="string">"""将字符串渲染成图像"""</span></span><br><span class="line">        <span class="comment"># 第二个布尔参数是反锯齿开关</span></span><br><span class="line">        self.msg_image = self.font.render(msg, <span class="literal">True</span>, self.text_color, self.button_color)</span><br><span class="line">        self.msg_image_rect = self.msg_image.get_rect()</span><br><span class="line">        self.msg_image_rect.center = self.rect.center</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.fill(self.button_color, self.rect)</span><br><span class="line">        self.screen.blit(self.msg_image, self.msg_image_rect)</span><br></pre></td></tr></table></figure></p><h2 id="在屏幕上绘制按钮"><a href="#在屏幕上绘制按钮" class="headerlink" title="在屏幕上绘制按钮"></a>在屏幕上绘制按钮</h2><p>只需要一个Play按钮，故我们直接在invasion.py中创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> button <span class="keyword">import</span> Button</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    play_button = Button(sett, screen, <span class="string">'PLAY'</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, stats, ship, aliens, bullets, play_button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p>接着修改game_function.py的update_screen，以便在游戏处于非活动状态时显示按钮<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, stats, ship, aliens, bullets, button)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        button.draw_button()</span><br><span class="line"><span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p><p><b>一定要把draw放在flip前面</b>，这样才能让绘制完所有其他元素之后再绘制按钮，然后切换到新屏幕。</p><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1CDj1.png" class="lozad"></p><h2 id="开始游戏"><a href="#开始游戏" class="headerlink" title="开始游戏"></a>开始游戏</h2><p>在按下按钮时开始新游戏，需要对鼠标事件进行监视。<br>在game_function.py中添加如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(stats, button, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY):</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            mouse_X, mouse_Y = pygame.mouse.get_pos()</span><br><span class="line">            check_play(stats, button, mouse_X, mouse_Y)</span><br></pre></td></tr></table></figure></p><h2 id="重置游戏"><a href="#重置游戏" class="headerlink" title="重置游戏"></a>重置游戏</h2><p>游戏结束后，会再显示PLAY按钮。每次单击它都应该重置整个游戏，重置统计信息，删除现有的外星人和子弹，创建新的外星人，让飞船居中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY):</span><br><span class="line">        stats.reset_stats()</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        ship.center = screen.get_rect().centerx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            mouse_X, mouse_Y = pygame.mouse.get_pos()</span><br><span class="line">            check_play(sett, screen, stats, button, ship, aliens, bullets, mouse_X, mouse_Y)</span><br></pre></td></tr></table></figure></p><h2 id="将Play按钮切换到非活动状态"><a href="#将Play按钮切换到非活动状态" class="headerlink" title="将Play按钮切换到非活动状态"></a>将Play按钮切换到非活动状态</h2><p>有一个问题是，即使在游戏活动状态，按钮图形不会显示，但是点击其原来的位置依然会重置游戏。所以要在监视鼠标事件时添加一个if条件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><h2 id="隐藏光标"><a href="#隐藏光标" class="headerlink" title="隐藏光标"></a>隐藏光标</h2><p>在点击Play后的游戏活动状态，鼠标光标应该被隐藏<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">False</span>)</span><br><span class="line">        stats.reset_stats()</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        ship.center = screen.get_rect().centerx</span><br></pre></td></tr></table></figure></p><p>并在游戏结束后重现它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h1 id="提高难度"><a href="#提高难度" class="headerlink" title="提高难度"></a>提高难度</h1><p>随着游戏的进行，游戏的难度应当得到提升。</p><h2 id="修改速度设置"><a href="#修改速度设置" class="headerlink" title="修改速度设置"></a>修改速度设置</h2><p>我们要通过提高游戏整体速度来提升难度，所以飞船、子弹、外星人的速度是在变的。为此我们可以将settting里的设置属性分为静态和动态两部分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_height = <span class="number">15</span></span><br><span class="line">        self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">        self.bullet_allowed = <span class="number">4</span></span><br><span class="line">        self.speed_scale = <span class="number">1.1</span></span><br><span class="line">        <span class="comment"># 速度提升率</span></span><br><span class="line">        self.init_dynamic()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_dynamic</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alien_speed = <span class="number">1</span></span><br><span class="line">        self.alien_drop_speed = <span class="number">10</span></span><br><span class="line">        <span class="comment"># 下降速度</span></span><br><span class="line">        self.fleet_direction = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 1表示向右，-1表示向左, 可以直接作为速度的系数用于坐标运算</span></span><br><span class="line">        self.bullet_speed = <span class="number">2</span></span><br><span class="line">        self.ship_speed = <span class="number">1.5</span></span><br></pre></td></tr></table></figure></p><p>接着编写提升速度的方法<code>increase_speed()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increase_speed</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.alien_speed *= self.speed_scale</span><br><span class="line">    self.bullet_speed *= self.speed_scale</span><br><span class="line">    self.ship_speed *= self.speed_scale</span><br></pre></td></tr></table></figure></p><p>并在每消灭一群外星人时调用一次这个方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        sett.increase_speed()</span><br></pre></td></tr></table></figure></p><h2 id="重置速度"><a href="#重置速度" class="headerlink" title="重置速度"></a>重置速度</h2><p>每次开始新游戏时，速度都要重置一次<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        ...</span><br><span class="line">        sett.init_dynamic()</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="记分"><a href="#记分" class="headerlink" title="记分"></a>记分</h1><p>在stats类里添加一个属性记录得分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">1</span></span><br><span class="line">        self.score = <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h2 id="显示得分"><a href="#显示得分" class="headerlink" title="显示得分"></a>显示得分</h2><p>为了在屏幕上显示得分，我们首先创建一个新类scoreboard：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreBoard</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, stats)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.stats = stats</span><br><span class="line"></span><br><span class="line">        self.text_color = (<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        self.prep_score()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        score_str = str(self.stats.score)</span><br><span class="line">        self.score_image = self.font.render(score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.score_rect = self.score_image.get_rect()</span><br><span class="line">        self.score_rect.right = self.screen_rect.right - <span class="number">20</span></span><br><span class="line">        self.score_rect.top = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">self.screen.blit(self.score_image, self.score_rect)</span><br></pre></td></tr></table></figure></p><h2 id="创建记分牌实例"><a href="#创建记分牌实例" class="headerlink" title="创建记分牌实例"></a>创建记分牌实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> scoreboard <span class="keyword">import</span> ScoreBoard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    sb = ScoreBoard(sett, screen, stats)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, stats, sb, ship, aliens, bullets, play_button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure><p>同时要在update_screen()中调用<code>show_score()</code></p><h2 id="得分"><a href="#得分" class="headerlink" title="得分"></a>得分</h2><p>击杀外星人后要增加分数。只需要检查子弹击中外星人时<b>返回的字典（collision）</b>即可.<br>我们现在setting中设置一个外星人的得分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">   ...</span><br><span class="line">    self.alien_score = <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>接着在<code>check_bullet_collision()</code>中检查字典。<b>（这个字典的键是一颗子弹，值是被这颗子弹击中的外星人列表）</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> collisions:</span><br><span class="line">    <span class="keyword">for</span> aliens <span class="keyword">in</span> collisions.key():</span><br><span class="line">        stats.score += sett.alien_score * len(aliens)</span><br><span class="line">        sb.prep_score()</span><br></pre></td></tr></table></figure></p><p>主循环中要修改update_bullets()的参数</p><h2 id="提高点数"><a href="#提高点数" class="headerlink" title="提高点数"></a>提高点数</h2><p>随着游戏难度提升，一个外星人的得分应当提高。<br>所以在setting中增加一个得分提升的幅度属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.score_scale = <span class="number">1.5</span></span><br></pre></td></tr></table></figure></p><p>在游戏难度提升时，即速度提高时，修改setting的属性alien_score<br>（因为alien_score会变动，所以要把这个属性分类为动态，使其在动态初始化方法中被赋初值）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        ...</span><br><span class="line">        self.init_dynamic()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_dynamic</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.alien_score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_speed</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.alien_score = int(self.alien_score * self.score_scale)</span><br></pre></td></tr></table></figure></p><h2 id="将得分圆整"><a href="#将得分圆整" class="headerlink" title="将得分圆整"></a>将得分圆整</h2><p>大部分游戏都会将游戏得分显示为10的整倍数。我们可以把得分圆整。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoreboard.py</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">       rounded_score = int(round(self.stats.score, <span class="number">-1</span>))</span><br><span class="line">       score_str = <span class="string">"&#123;:,&#125;"</span>.format(rounded_score)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure></p><p><code>round()</code>的第二个参数为精确到的小数位。<br>第二个参数为负数，则<code>round()</code>将圆整到最近的10、100、1000等整倍数。</p><p><code>&quot;{:,}&quot;.format(rounded_score)</code>为一个字符串格式设置指令，它让Python将数值转换成字符串时在其中插入逗号。</p><h2 id="最高分"><a href="#最高分" class="headerlink" title="最高分"></a>最高分</h2><p>我们在stats中增加一个属性最高分，并将其展示在屏幕顶端中央。<br>但是为了让数据保存，这个最高分存储在外部文件中，所以每次都需要从外部文件读入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">            self.high_score = int(hs.read())</span><br></pre></td></tr></table></figure></p><p>每当一场游戏结束后，都要更新最高分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> stats.score &gt; stats.high_score:</span><br><span class="line">            stats.high_score = stats.score</span><br></pre></td></tr></table></figure></p><p>每次关闭前都要在外部文件更新最高分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">                hs.write(str(stats.high_score))</span><br><span class="line">            sys.exit()</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>接着要在最顶端显示最高分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoreboard.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreBoard</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, stats)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        self.prep_score()</span><br><span class="line">        self.prep_high()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_high</span><span class="params">(self)</span>:</span></span><br><span class="line">        high_score_str = <span class="string">"&#123;:,&#125;"</span>. format(self.stats.high_score)</span><br><span class="line">        print(high_score_str)</span><br><span class="line">        self.high_score_image = self.font.render(high_score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.high_score_rect = self.high_score_image.get_rect()</span><br><span class="line">        self.high_score_rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.high_score_rect.top = self.screen_rect.top</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.score_image, self.score_rect)</span><br><span class="line">        self.screen.blit(self.high_score_image, self.high_score_rect)</span><br></pre></td></tr></table></figure></p><p>同时，在更新过最高分之后调用<code>prep_high()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> stats.score &gt; stats.high_score:</span><br><span class="line">            stats.high_score = stats.score</span><br><span class="line">            sb.prep_high()</span><br></pre></td></tr></table></figure></p><p>用到ship_hit()的地方都要修改参数</p><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1Csnx.png" class="lozad"></p><h2 id="奖励子弹"><a href="#奖励子弹" class="headerlink" title="奖励子弹"></a>奖励子弹</h2><p>我们新增一个机制，当玩家分数达到一定程度后，我们将接下来的3发子弹的宽度提高100倍，提高消灭外星人的效率。</p><p>首先，现在stats.py中设置奖励标准：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.award_level = <span class="number">1</span> <span class="comment"># 奖励等级</span></span><br><span class="line">        self.bullet_award = <span class="literal">False</span> <span class="comment"># 奖励状态</span></span><br><span class="line">        self.award_b = <span class="number">0</span> <span class="comment"># 已用奖励子弹数量</span></span><br><span class="line">        self.award_score = <span class="number">1500</span> <span class="comment"># 奖励分数标准</span></span><br></pre></td></tr></table></figure></p><p>因为外星人的分数会随着游戏难度增加而增加，所以奖励分数标准应该在每一次奖励后增加。所以我们在setting.py中增加一个属性<code>award_score_scale</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_height = <span class="number">15</span></span><br><span class="line">        self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">        self.bullet_allowed = <span class="number">4</span></span><br><span class="line">        self.speed_scale = <span class="number">1.1</span></span><br><span class="line">        <span class="comment"># 速度提升率</span></span><br><span class="line">        self.score_scale = <span class="number">1.5</span></span><br><span class="line">        self.award_score_scale = <span class="number">1.4</span></span><br><span class="line">        <span class="comment"># 分数提升率</span></span><br></pre></td></tr></table></figure></p><p>接着，在game_funciton.py中编写判断函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.score &gt;= stats.award_level * stats.award_score:</span><br><span class="line">        stats. bullet_award = <span class="literal">True</span></span><br><span class="line">        sett.bullet_width = <span class="number">300</span></span><br><span class="line">        stats.award_level += <span class="number">1</span></span><br><span class="line">        stats.award_b = <span class="number">0</span></span><br><span class="line">        stats.award_score *= sett.award_score_scale</span><br></pre></td></tr></table></figure></p><p>每此奖励完之后，奖励等级（award_level）要提升，奖励分数标准（award_score）要提升，已用奖励子弹数（award_b）清零。</p><p>然后要让奖励状态在三发子弹后变回False。因为子弹是在按下空格后发射，所以我们可以在检测空格事件的函数中实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award_check</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">        <span class="keyword">if</span> stats.award_b == <span class="number">3</span>:</span><br><span class="line">            stats.bullet_award = <span class="literal">False</span></span><br><span class="line">            sett.bullet_width = <span class="number">3</span></span><br><span class="line">        stats.award_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, stats, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">            award_check(sett, stats)</span><br><span class="line">            fire_bullet(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure><p>因为奖励状态是随着得分转变的，所以我们在得分的函数里调用<code>award()</code>，即check_bullet_collision()：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        sett.increase_speed()</span><br><span class="line">    <span class="keyword">if</span> collisions:</span><br><span class="line">        <span class="keyword">for</span> aliens <span class="keyword">in</span> collisions.values():</span><br><span class="line">            stats.score += sett.alien_score * len(aliens)</span><br><span class="line">            sb.prep_score()</span><br><span class="line">            award(sett, stats)</span><br></pre></td></tr></table></figure></p><p><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1CyB6.png" class="lozad"></p><h1 id="左上角显示剩余生命"><a href="#左上角显示剩余生命" class="headerlink" title="左上角显示剩余生命"></a>左上角显示剩余生命</h1><p>最后，我们来显示玩家还剩多少艘飞船，但用的是图形而不是数字。<br>首先，需要让Ship继承Sprite，以便创建飞船编组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">(Sprite)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        super().__init__()</span><br></pre></td></tr></table></figure></p><p>接着在scoreboard. py 中，创建一个可供显示的飞船编组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.screen.blit(self.score_image, self.score_rect)</span><br><span class="line">    self.screen.blit(self.high_score_image, self.high_score_rect)</span><br><span class="line">    self.ships.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prep_ship</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""显示剩余飞船"""</span></span><br><span class="line">    self.ships = Group()</span><br><span class="line">    <span class="keyword">for</span> ship_num <span class="keyword">in</span> range(self.stats.life):</span><br><span class="line">        ship = Ship(self.sett, self.screen)</span><br><span class="line">        ship.rect.x = <span class="number">10</span> + ship_num * ship.rect.width</span><br><span class="line">        ship.rect.y = <span class="number">10</span></span><br><span class="line">        self.ships.add(ship)</span><br></pre></td></tr></table></figure></p><p>要在游戏开始时显示这个剩余生命，所以我们在开始新游戏时调用prep_ships()。这个将在check_play()中进行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, sb, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        ...</span><br><span class="line">        sb.prep_score()</span><br><span class="line">        sb.prep_ship()</span><br></pre></td></tr></table></figure></p><p>同时，当损失生命值时，左上角的生命牌需要更新，要在ship_hit()中还要调用prep_ship()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">    sb.prep_ship()</span><br></pre></td></tr></table></figure></p><ul><li>别忘了对对相关函数的参数列表修改<br><img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/28/e1C6HK.png" class="lozad"></li></ul><h1 id="最后的重构"><a href="#最后的重构" class="headerlink" title="最后的重构"></a>最后的重构</h1><ul><li>将清屏和重新创建舰队的代码编写为一个函数<code>clear_recreate()</code></li><li>将点击PLAY按钮后的分数板和动态设置重置的函数整合为<code>restart()</code></li><li>将scoreboard .py中的<strong>init</strong>()调用的prep方法整合</li></ul><p>最终代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ship.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">(Sprite)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.image = pygame.image.load(<span class="string">"ship.bmp"</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom</span><br><span class="line">        self.center = float(self.rect.centerx)</span><br><span class="line"></span><br><span class="line">        self.right_move = <span class="literal">False</span></span><br><span class="line">        self.left_move = <span class="literal">False</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""在指定位置绘制飞船"""</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.center += self.sett.ship_speed</span><br><span class="line">        <span class="keyword">if</span> self.left_move <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.center -= self.sett.ship_speed</span><br><span class="line"></span><br><span class="line">        self.rect.centerx = self.center</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""单个外星人的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.setting = sett</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载外星人图像，设置rect属性</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">'alien.bmp'</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每个外星人最初都在屏幕左上角</span></span><br><span class="line">        self.rect.x = self.rect.width</span><br><span class="line">        self.rect.y = self.rect.height</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储外星人准确位置</span></span><br><span class="line">        self.x = float(self.rect.x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_edges</span><span class="params">(self)</span>:</span></span><br><span class="line">        screen_rect = self.screen.get_rect()</span><br><span class="line">        <span class="keyword">if</span> self.rect.right &gt;= screen_rect.right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.left &lt;= screen_rect.left:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x += self.setting.alien_speed * self.setting.fleet_direction</span><br><span class="line">        self.rect.x = self.x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bullet.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""一个对飞船的子弹管理的类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, ship)</span>:</span></span><br><span class="line"></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, sett.bullet_width, sett.bullet_height)</span><br><span class="line">        self.rect.centerx = ship.rect.centerx</span><br><span class="line">        self.rect.top = ship.rect.top</span><br><span class="line"></span><br><span class="line">        self.y = float(self.rect.y)</span><br><span class="line"></span><br><span class="line">        self.color = sett.bullet_color</span><br><span class="line">        self.speed = sett.bullet_speed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""向上移动子弹"""</span></span><br><span class="line"></span><br><span class="line">        self.y -= self.speed</span><br><span class="line">        self.rect.y = self.y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_bullet</span><span class="params">(self)</span>:</span></span><br><span class="line">        pygame.draw.rect(self.screen, self.color, self.rect)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_height = <span class="number">15</span></span><br><span class="line">        self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">        self.bullet_allowed = <span class="number">4</span></span><br><span class="line">        self.speed_scale = <span class="number">1.1</span></span><br><span class="line">        <span class="comment"># 速度提升率</span></span><br><span class="line">        self.score_scale = <span class="number">1.5</span></span><br><span class="line">        self.award_score_scale = <span class="number">1.4</span></span><br><span class="line">        <span class="comment"># 分数提升率</span></span><br><span class="line">        self.awared_width = <span class="number">300</span></span><br><span class="line">        <span class="comment"># 奖励宽度</span></span><br><span class="line">        self.init_dynamic()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_dynamic</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alien_speed = <span class="number">1</span></span><br><span class="line">        self.alien_drop_speed = <span class="number">10</span></span><br><span class="line">        <span class="comment"># 下降速度</span></span><br><span class="line">        self.fleet_direction = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 1表示向右，-1表示向左, 可以直接作为速度的系数用于坐标运算</span></span><br><span class="line">        self.bullet_speed = <span class="number">2</span></span><br><span class="line">        self.ship_speed = <span class="number">1.5</span></span><br><span class="line">        self.alien_score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_speed</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alien_speed *= self.speed_scale</span><br><span class="line">        self.bullet_speed *= self.speed_scale</span><br><span class="line">        self.ship_speed *= self.speed_scale</span><br><span class="line">        self.alien_score = int(self.alien_score * self.score_scale)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stats.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">            self.high_score = int(hs.read())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line">        self.award_level = <span class="number">1</span></span><br><span class="line">        self.bullet_award = <span class="literal">False</span></span><br><span class="line">        self.award_b = <span class="number">0</span></span><br><span class="line">        self.award_score = <span class="number">1500</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># button.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, msg)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        self.width, self.height = <span class="number">200</span>, <span class="number">50</span></span><br><span class="line">        self.button_color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">        self.text_color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line">        <span class="comment"># 指定字体字号来渲染文字</span></span><br><span class="line"></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, self.width, self.height)</span><br><span class="line">        self.rect.center = self.screen_rect.center</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字符串渲染成图像</span></span><br><span class="line">        self.prep_msg(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_msg</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        <span class="string">"""将字符串渲染成图像"""</span></span><br><span class="line">        <span class="comment"># 第二个布尔参数是反锯齿开关</span></span><br><span class="line">        self.msg_image = self.font.render(msg, <span class="literal">True</span>, self.text_color, self.button_color)</span><br><span class="line">        self.msg_image_rect = self.msg_image.get_rect()</span><br><span class="line">        self.msg_image_rect.center = self.rect.center</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.fill(self.button_color, self.rect)</span><br><span class="line">        self.screen.blit(self.msg_image, self.msg_image_rect)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoreboard.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreBoard</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, stats)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.stats = stats</span><br><span class="line"></span><br><span class="line">        self.text_color = (<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        self.prep_image()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_image</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.prep_score()</span><br><span class="line">        self.prep_high()</span><br><span class="line">        self.prep_ship()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        rounded_score = int(round(self.stats.score, <span class="number">-1</span>))</span><br><span class="line">        score_str = <span class="string">"&#123;:,&#125;"</span>.format(rounded_score)</span><br><span class="line">        self.score_image = self.font.render(score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.score_rect = self.score_image.get_rect()</span><br><span class="line">        self.score_rect.right = self.screen_rect.right - <span class="number">20</span></span><br><span class="line">        self.score_rect.top = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_high</span><span class="params">(self)</span>:</span></span><br><span class="line">        high_score_str = <span class="string">"&#123;:,&#125;"</span>. format(self.stats.high_score)</span><br><span class="line">        self.high_score_image = self.font.render(high_score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.high_score_rect = self.high_score_image.get_rect()</span><br><span class="line">        self.high_score_rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.high_score_rect.top = self.screen_rect.top</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.score_image, self.score_rect)</span><br><span class="line">        self.screen.blit(self.high_score_image, self.high_score_rect)</span><br><span class="line">        self.ships.draw(self.screen)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_ship</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示剩余飞船"""</span></span><br><span class="line">        self.ships = Group()</span><br><span class="line">        <span class="keyword">for</span> ship_num <span class="keyword">in</span> range(self.stats.life):</span><br><span class="line">            ship = Ship(self.sett, self.screen)</span><br><span class="line">            ship.rect.x = <span class="number">10</span> + ship_num * ship.rect.width</span><br><span class="line">            ship.rect.y = <span class="number">10</span></span><br><span class="line">            self.ships.add(ship)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> bullet <span class="keyword">import</span> Bullet</span><br><span class="line"><span class="keyword">from</span> alien <span class="keyword">import</span> Alien</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fire_bullet</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(bullets) &lt; sett.bullet_allowed:</span><br><span class="line">        new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">        bullets.add(new_bullet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number_aliens_x</span><span class="params">(sett, alien_width)</span>:</span></span><br><span class="line">    available_space_x = sett.screen_width - <span class="number">2</span> * alien_width</span><br><span class="line">    number_aliens_x = int(available_space_x / (<span class="number">2</span> * alien_width))</span><br><span class="line">    <span class="keyword">return</span> number_aliens_x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_nuber_rows</span><span class="params">(sett, alien_height, ship_height)</span>:</span></span><br><span class="line">    available_space_y = sett.screen_length - <span class="number">3</span> * alien_height - ship_height</span><br><span class="line">    number_rows = int(available_space_y / (<span class="number">2</span> * alien_height))</span><br><span class="line">    <span class="keyword">return</span> number_rows</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_alien</span><span class="params">(sett, screen, aliens, alien_width, alien_number, row_number)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">    alien.rect.y = alien.rect.height + <span class="number">2</span> * alien.rect.height * row_number</span><br><span class="line">    alien.rect.x = alien.x</span><br><span class="line">    aliens.add(alien)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, ship, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    alien_height = alien.rect.height</span><br><span class="line">    number_aliens_x = get_number_aliens_x(sett, alien_width)</span><br><span class="line">    number_rows = get_nuber_rows(sett, alien_height, ship.rect.height)</span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> row_number <span class="keyword">in</span> range(number_rows):</span><br><span class="line">        <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">            create_alien(sett, screen, aliens, alien_width, alien_number, row_number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award_check</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">        <span class="keyword">if</span> stats.award_b == <span class="number">3</span>:</span><br><span class="line">            stats.bullet_award = <span class="literal">False</span></span><br><span class="line">            sett.bullet_width = <span class="number">3</span></span><br><span class="line">        stats.award_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, stats, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">            award_check(sett, stats)</span><br><span class="line">        fire_bullet(sett, screen, ship, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keyup</span><span class="params">(event, ship)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_recreate</span><span class="params">(sett, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="string">"""清除屏幕重新开始"""</span></span><br><span class="line">    aliens.empty()</span><br><span class="line">    bullets.empty()</span><br><span class="line"></span><br><span class="line">    create_fleet(sett, screen, ship, aliens)</span><br><span class="line">    ship.center = screen.get_rect().centerx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(sett, sb)</span>:</span></span><br><span class="line">    sett.init_dynamic()</span><br><span class="line">    sb.prep_score()</span><br><span class="line">    sb.prep_ship()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, sb, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">False</span>)</span><br><span class="line">        stats.reset_stats()</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        clear_recreate(sett, screen, ship, aliens, bullets)</span><br><span class="line">        restart(sett, sb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">                hs.write(str(stats.high_score))</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, stats, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            mouse_X, mouse_Y = pygame.mouse.get_pos()</span><br><span class="line">            check_play(sett, screen, stats, button, ship, sb, aliens, bullets, mouse_X, mouse_Y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        sett.increase_speed()</span><br><span class="line">    <span class="keyword">if</span> collisions:</span><br><span class="line">        <span class="keyword">for</span> aliens <span class="keyword">in</span> collisions.values():</span><br><span class="line">            stats.score += sett.alien_score * len(aliens)</span><br><span class="line">            sb.prep_score()</span><br><span class="line">            award(sett, stats)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullet</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    bullets.update()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            bullets.remove(bullet)</span><br><span class="line">    check_bullet_collision(sett, screen, stats, sb, ship, bullets, aliens)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, stats, sb, ship, aliens, bullets, button)</span>:</span></span><br><span class="line">    screen.fill(sett.bg_color)</span><br><span class="line">    ship.blitme()</span><br><span class="line">    sb.show_score()</span><br><span class="line">    aliens.draw(screen)</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets:</span><br><span class="line">        bullet.draw_bullet()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        button.draw_button()</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_fleet_dir</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""将整群外星人下移"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        alien.rect.y += sett.alien_drop_speed</span><br><span class="line">    sett.fleet_direction *= <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_fleet_edges</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""有一个外星人到达边缘"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.check_edges():</span><br><span class="line">            change_fleet_dir(sett, aliens)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alien_bottom</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line">    screen_rect = screen.get_rect()</span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        <span class="keyword">if</span> alien.rect.bottom &gt;= screen_rect.bottom:</span><br><span class="line">            ship_hit(sett, stats, screen, ship, sb, aliens, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        clear_restart(sett, screen, ship, aliens, bullets)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> stats.score &gt; stats.high_score:</span><br><span class="line">            stats.high_score = stats.score</span><br><span class="line">            sb.prep_high()</span><br><span class="line"></span><br><span class="line">    sb.prep_ship()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens) <span class="keyword">or</span> alien_bottom(sett, stats, screen, ship, sb, aliens, bullets):</span><br><span class="line">        ship_hit(sett, stats, screen, ship, sb, aliens, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.score &gt;= stats.award_level * stats.award_score:</span><br><span class="line">        stats. bullet_award = <span class="literal">True</span></span><br><span class="line">        sett.bullet_width = sett.awared_width</span><br><span class="line">        stats.award_level += <span class="number">1</span></span><br><span class="line">        stats.award_b = <span class="number">0</span></span><br><span class="line">        stats.award_score *= sett.award_score_scale</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> game_function <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"><span class="keyword">from</span> stats <span class="keyword">import</span> Gamestats</span><br><span class="line"><span class="keyword">from</span> button <span class="keyword">import</span> Button</span><br><span class="line"><span class="keyword">from</span> scoreboard <span class="keyword">import</span> ScoreBoard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    sett = Settings()</span><br><span class="line">    stats = Gamestats(sett)</span><br><span class="line">    screen = pygame.display.set_mode(</span><br><span class="line">        (sett.screen_width, sett.screen_length)</span><br><span class="line">    )</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    play_button = Button(sett, screen, <span class="string">'PLAY'</span>)</span><br><span class="line">    ship = Ship(sett, screen)</span><br><span class="line">    bullets = Group()</span><br><span class="line">    aliens = Group()</span><br><span class="line">    sb = ScoreBoard(sett, screen, stats)</span><br><span class="line"></span><br><span class="line">    gf.create_fleet(sett, screen, ship, aliens)</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, stats, play_button, ship, sb, aliens, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line">        gf.update_bullet(sett, screen, stats, sb, ship, bullets, aliens)</span><br><span class="line">        gf.update_aliens(sett, stats, screen, ship, sb, aliens, bullets)</span><br><span class="line">        gf.update_screen(sett, screen, stats, sb, ship, aliens, bullets, play_button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/07/28/e1C6HK.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
      <category term="Pygame" scheme="/categories/Python/Pygame/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
      <category term="项目" scheme="/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>简单线性回归和梯度下降</title>
    <link href="/2019/07/16/%E7%AE%80%E5%8D%95%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%92%8C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>/2019/07/16/简单线性回归和梯度下降/</id>
    <published>2019-07-16T14:04:08.000Z</published>
    <updated>2019-11-03T14:10:47.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h1><hr><p><b>回归（Regression）</b>一词简单来说，指的是：我们根据之前的数据预测出一个准确的输出值</p><p><b>线性回归（Liner Regression）</b>：寻找一条直线，最大程度地<b>拟合</b>样本特征和样本输出标记之间的关系。样本特征只有一个，就被称为<b>简单线性回归</b>。<br> <a id="more"></a></p><p><img alt="蓝点为数据，红线为拟合线" data-src="https://s2.ax1x.com/2019/07/16/ZbHb1e.png" class="lozad"></p><p>假设预测的线性函数的表达式为：<script type="math/tex">h_\theta(x) = \theta_0 + \theta_1x</script><br>其中$\theta_0 ，\theta_1$为此模型的<b>参数（parameter）</b>,分别对应于<u>截距</u>和<u>斜率</u>。我们所要做的是选择合适的参数使其最大程度地拟合我们的数据。<br><br></p><ul><li>之后要用到的标记如下：<br>$m$ 代表训练集中实例的数量<br>$x$ 代表特征/输入变量<br>$y$ 代表目标变量/输出变量<br>$(x, y)$ 代表训练集中的实例<br>$(x^{(i)},y^{(i)})$ 代表第$i$ 个观察实例 </li></ul><p><br><br>为了评估模型的准确程度，使这个值不受个别极端数据影响而产生巨大波动，我们选取 <b> 方差的二分之一</b> 作为评判误差程度的标准，即：</p><script type="math/tex; mode=display">J(\theta_0,\theta_1) = \frac {1}{2m}\sum_{i=1}^{m}\ (h_\theta(x^{(i)})  - y^{(i)})^2</script><p>$J(\theta_0,\theta_1)$ 即为该模型的<b>代价函数（Cost Function）</b>，有时称为 损失函数（Loss Funtion）</p><p>于是乎我们的目标就变成了：</p><script type="math/tex; mode=display">minimize\ \ J(\theta_0,\theta_1)</script><p><br><br></p><ul><li>与代价函数相对的一个概念为<b>效用函数 （Utility Function）</b></li><li>通过分析问题，确定问题的代价函数或者效用函数，通过最优化获得机器学习的模型，是一类机器学习算法的基本思路，也是参数学习方法的基础。<br><br><br><h1 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h1></li></ul><hr><p><b>最小二乘法</b>是一种对该问题的最优化方法。</p><p><br><br><br>$J(\theta_0,\theta_1)$是一个多元函数。使其对各元的偏导数等于0，则可得该函数的极值。<br>即：</p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_0}  = 0,\ \frac{\partial J} {\partial \theta_1}  = 0</script><p>接下来为求解过程：</p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_0}  = \frac {1}{2m} \sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-1) = 0</script><script type="math/tex; mode=display">=> \sum ^{m}_{i=1}(y^{(i)} - \theta_1x^{(i)} - \theta_0) =0</script><script type="math/tex; mode=display">=>\sum ^{m}_{i=1} y^{(i)} - \theta_1 \sum ^{m}_{i=1}x^{(i)} - \sum ^{m}_{i=1}\theta_0 = 0 \</script><script type="math/tex; mode=display">=> \ \sum ^{m}_{i=1} y^{(i)} - \theta_1 \sum ^{m}_{i=1}x^{(i)} - m\theta_0 = 0</script><script type="math/tex; mode=display">=>（两边同时除以m）  \ \theta_0 = \overline {y} \ - \ \theta_1 \overline{x} \ \ \ \ ①</script><p><br><br></p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_1}  =  \frac {1}{2m}\sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-x^{(i)}) = 0</script><script type="math/tex; mode=display">=> \sum ^{m}_{i=1}(y^{(i)} - \theta_1x^{(i)} - \theta_0)x^{(i)} =0</script><script type="math/tex; mode=display">（将①式代入其中）=>  \sum ^{m}_{i=1}(y^{(i)} - \theta_1x^{(i)} -\overline {y} \ + \ \theta_1 \overline{x} )x^{(i)} =0</script><script type="math/tex; mode=display">=>  \sum ^{m}_{i=1}y^{(i)} x^{(i)} - \theta_1(x^{(i)})^2 -\overline {y} x^{(i)} \ + \ \theta_1 \overline{x} x^{(i)} =0</script><script type="math/tex; mode=display">=>  \sum ^{m}_{i=1}(y^{(i)} x^{(i)} -\overline {y} x^{(i)}) -\ \theta_1\sum ^{m}_{i=1}((x^{(i)})^2 -  \ \overline{x} x^{(i)}) =0</script><script type="math/tex; mode=display">\theta_1 = \frac{\sum ^{m}_{i=1}(y^{(i)} x^{(i)} -\overline {y} x^{(i)})}{\sum ^{m}_{i=1}((x^{(i)})^2 -  \ \overline{x} x^{(i)})}</script><p>此式还可继续化简<br>对于项$\sum ^{m}_{i=1}\overline{y} x^{(i)}$:</p><script type="math/tex; mode=display">= m\overline{y}\ \overline{x} = \overline{x}\sum ^{m}_{i=1}y^{(i)} = \sum ^{m}_{i=1}\overline{y}\ \overline{x}</script><p>故这几项都可以互相转化，则有：</p><script type="math/tex; mode=display">原式 = \frac{\sum ^{m}_{i=1}(y^{(i)} x^{(i)} -\overline {y} x^{(i)}-\overline{x}y^{(i)} + \overline{x}·\overline{y})}{\sum ^{m}_{i=1}((x^{(i)})^2 -  \ \overline{x} x^{(i)})-\overline{x}x^{(i)}+\overline{x}^2)}</script><script type="math/tex; mode=display">=\frac{\sum ^{m}_{i=1}(x^{(i)}-\overline{x})(y^{(i)}-\overline{y})}{\sum ^{m}_{i=1}(x^{(i)} -  \ \overline{x})^2}</script><p><br><br><br></p><p><strong>综上，可得结论：</strong></p><script type="math/tex; mode=display">\theta_1 = \frac{\sum ^{m}_{i=1}(x^{(i)}-\overline{x})(y^{(i)}-\overline{y})}{\sum ^{m}_{i=1}(x^{(i)} -  \ \overline{x})^2}</script><script type="math/tex; mode=display">\theta_0 = \overline {y} \ - \ \theta_1 \overline{x}</script><p><br><br><br>MATLAB实现：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = polyfit(x, y, <span class="number">1</span>);</span><br><span class="line">h = polyval(a,x,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">'*'</span>,x,h,<span class="string">'-'</span>);</span><br></pre></td></tr></table></figure></p><p>polyfit(x, y, n)是matlab中用于曲线拟合的函数，其原理就是最小二乘法。第三个参数代表拟合的阶数。<br>函数返回的是一个行矩阵:$[ \theta_n, \theta_{n-1}, \theta_{n-2},.. . ,\theta_0]$<br><br><br></p><h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><hr><p>梯度下降是一个用来求函数最小值的算法，我们可以使用梯度下降算法来求出代价函数$J(\theta_0,\theta_1)$的最小值。 </p><p>梯度下降的思想是：<br>开始时我们随机选择一个参数的组合(𝜃0,𝜃1,……,𝜃𝑛)，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合（即<b>梯度</b>）。我们持续这么做直到到到一个<strong>局部最小值（local minimum）</strong>。<u>因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是<strong>全局最小值（global minimum）</strong>.</u>选择不同的初始参数组合，可能会找到不同的局部最小值。 </p><p><img alt="梯度下降示意图" data-src="https://s2.ax1x.com/2019/07/16/ZbHfmR.jpg" class="lozad"></p><p><b>批量梯度下降（Batch gradient descent）</b>的算法如下：</p><script type="math/tex; mode=display">repeat\ until\ convergence\ \{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j}J(\theta_0, \theta_1)  \ \ \ for  \  j = 0\ and \ 1</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><p>其中<b>α</b>是<b>学习率（learning rate）</b>，又可以说是<b>步长</b>，决定了我们沿着能让代价函数下降程度最大的方向迈出的步子有多大。</p><ul><li>α的值<b>不能取得太大</b>，否则有很大可能“错过极小值”，无法收敛，甚至发散。但也<b>不能太小</b>，否则迭代次数会很大，影响效率<img alt="在这里插入图片描述" data-src="https://s2.ax1x.com/2019/07/16/ZbH4Tx.png" class="lozad"></li><li>实际上，在梯度下降法中，当接近局部最低点时，梯度下降法会自动采取更小的<br>幅度。这是因为当我们接近局部最低点时，很显然在局部最低时导数等于零，所以当我们接<br>近局部最低时，<b>导数值会自动变得越来越小</b>，所以梯度下降将自动采取较小的幅度，所以我们没有必要在过程中另外再减少α的值<img alt data-src="https://s2.ax1x.com/2019/07/16/ZbHh01.png" class="lozad"></li></ul><h1 id="梯度下降的线性回归"><a href="#梯度下降的线性回归" class="headerlink" title="梯度下降的线性回归"></a>梯度下降的线性回归</h1><p>将梯度下降应用到刚刚的代价函数上，求其最小值。<br><br></p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_0}  = \frac {1}{2m} \sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-1)\ \</script><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_1}  =  \frac {1}{2m}\sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-x^{(i)})</script><p>故梯度下降算法可写成：</p><script type="math/tex; mode=display">Repeat\{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_0 := \theta_0 - \alpha \frac {1}{m} \sum ^{m}_{i=1}(h_\theta(x^{(i)})-y^{(i)})</script><script type="math/tex; mode=display">\theta_1 := \theta_1 - \alpha \frac {1}{m} \sum ^{m}_{i=1}(h_\theta(x^{(i)})-y^{(i)})·x^{(i)}</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><blockquote><p>这个名字”批量梯度下降”，指的是在梯度下降的每一步中，我们都<b>用到了所有的训练样本</b>。在梯度下降中，在计算微分求导项时，我们需要进行求和运算，所以，在每一个单独的梯度下降中，我们最终都要对所有𝑚个训练样本求和。因此，批量梯度下降法这个名字说明了我们需要考虑所有这一”批”训练样本。而事实上，有时也有其他类型的梯度下降法，不是这种”批量”型的，不考虑整个的训练集，而是每次只关注训练集中的一些小的子集。</p></blockquote>]]></content>
    
    <summary type="html">
    
      梯度下降是迭代法的一种,可以用于求解最小二乘问题(线性和非线性都可以)。在求解机器学习算法的模型参数，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。在求解损失函数的最小值时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数和模型参数值。
    
    </summary>
    
      <category term="机器学习" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="吴恩达《机器学习》" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%90%B4%E6%81%A9%E8%BE%BE%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="梯度下降" scheme="/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
      <category term="MATLAB" scheme="/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(九)：文件</title>
    <link href="/2019/07/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B9%9D/"/>
    <id>/2019/07/15/Python学习笔记-九/</id>
    <published>2019-07-15T13:06:39.000Z</published>
    <updated>2019-11-03T10:41:02.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第九章-文件"><a href="#第九章-文件" class="headerlink" title="第九章 文件"></a>第九章 文件</h1> <a id="more"></a><p><br><br></p><h2 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title="9.1 从文件中读取数据"></a>9.1 从文件中读取数据</h2><hr><h3 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title="9.1.1 读取整个文件"></a>9.1.1 读取整个文件</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi.txt</span><br><span class="line"></span><br><span class="line"><span class="number">3.14159</span></span><br><span class="line">  <span class="number">26535</span></span><br><span class="line">  <span class="number">89793</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14159</span></span><br><span class="line">  <span class="number">26535</span></span><br><span class="line">  <span class="number">89793</span></span><br></pre></td></tr></table></figure></p><ul><li><code>with open()</code>可以不需要在访问文件后关闭，随着with的结束，文件会自动关闭</li><li><code>open()</code>将目标文件打开，当做一个对象。</li><li><code>read()</code>将文件中所有内容读取为一个长长的字符串</li><li><p>输出的文本最后有空行是因为read()达到文件尾时会返回一个空字符串。消除空行可用rstrip()</p><h3 id="9-1-2-逐行读取"><a href="#9-1-2-逐行读取" class="headerlink" title="9.1.2 逐行读取"></a>9.1.2 逐行读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></li></ul><p>输出：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line">  <span class="number">26535</span></span><br><span class="line">  </span><br><span class="line">  <span class="number">89793</span></span><br></pre></td></tr></table></figure></p><p>  每行之间都有一个空行，是因为文本文件每行结尾都有一个<b>换行符</b>,而print()每次都会自动换行，所以多了一个换行。<br>  将<code>print(line)</code>改为<code>print(line.rstrip())</code>即可解决</p><h3 id="9-1-3-创建一个包含文件各行内容的列表"><a href="#9-1-3-创建一个包含文件各行内容的列表" class="headerlink" title="9.1.3 创建一个包含文件各行内容的列表"></a>9.1.3 创建一个包含文件各行内容的列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.strip())</span><br></pre></td></tr></table></figure><p><code>readlines()</code>读取文本中的每一行，并存储在一个列表里。<br>调用len()可以获知文件内容的行数。<br><b>这样可以让在with open结束后依然可以使用文本内容。</b></p><h3 id="9-1-4-replace-替换字符串的内容"><a href="#9-1-4-replace-替换字符串的内容" class="headerlink" title="9.1.4 replace()替换字符串的内容"></a>9.1.4 replace()替换字符串的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'I Love C++'</span></span><br><span class="line">s.replace(<span class="string">'C++'</span>,<span class="string">'Python'</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><blockquote><p>I Love Python</p></blockquote><p><br><br></p><h2 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title="9.2 写入文件"></a>9.2 写入文件</h2><hr><h3 id="9-2-1-写入空文件"><a href="#9-2-1-写入空文件" class="headerlink" title="9.2.1 写入空文件"></a>9.2.1 写入空文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    fo.write(<span class="string">'I love you'</span>)</span><br></pre></td></tr></table></figure><p>打开文件，会发现文件内容为：</p><blockquote><p>I love you</p></blockquote><h3 id="9-2-2-写入多行"><a href="#9-2-2-写入多行" class="headerlink" title="9.2.2 写入多行"></a>9.2.2 写入多行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    fo.write(<span class="string">'I love you'</span>)</span><br><span class="line">    fo.write(<span class="string">'I love you too'</span>)</span><br></pre></td></tr></table></figure><p>打开文件，会发现文件内容为：</p><blockquote><p>I love youI love you too</p></blockquote><p>write()不会像print()一样自动换行，所以要<b>自己添加换行符</b>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    fo.write(<span class="string">'I love you\n'</span>)</span><br><span class="line">    fo.write(<span class="string">'I love you too'</span>)</span><br></pre></td></tr></table></figure><h3 id="9-2-3-在文件后附加内容"><a href="#9-2-3-在文件后附加内容" class="headerlink" title="9.2.3 在文件后附加内容"></a>9.2.3 在文件后附加内容</h3><p>就是打开模式改为’a’</p><p><br> <br></p><h2 id="9-3-异常"><a href="#9-3-异常" class="headerlink" title="9.3 异常"></a>9.3 异常</h2><hr><h3 id="9-3-1-ZeroDivisionError异常"><a href="#9-3-1-ZeroDivisionError异常" class="headerlink" title="9.3.1 ZeroDivisionError异常"></a>9.3.1 ZeroDivisionError异常</h3><p>如果程序中出现除以0的情况，程序将会反馈Traceback错误信息：ZeroDivisionError</p><h3 id="9-3-2-try-except-代码块"><a href="#9-3-2-try-except-代码块" class="headerlink" title="9.3.2 try-except 代码块"></a>9.3.2 try-except 代码块</h3><p>当你认为可能发生错误时，可编写一个<code>try-except</code>代码块来处理可能引发的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"You can't divide by zero"</span>)</span><br></pre></td></tr></table></figure><ul><li>当<code>try</code>代码块出现异常时，Python将跳过<code>try</code>代码块而去执行<code>except</code>代码块。</li></ul><h3 id="9-3-3-else-代码块"><a href="#9-3-3-else-代码块" class="headerlink" title="9.3.3 else 代码块"></a>9.3.3 else 代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">5</span></span><br><span class="line">num2 = int(input())</span><br><span class="line">answer = num1/num2</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"You can't divide by zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><p>-当<code>try</code>代码块执行成功时，将会接着执行<code>else</code>代码块</p><h3 id="9-3-4-FileNotFoundError异常"><a href="#9-3-4-FileNotFoundError异常" class="headerlink" title="9.3.4 FileNotFoundError异常"></a>9.3.4 FileNotFoundError异常</h3><p>文件打开失败时会返回改错误</p><h3 id="9-3-5-split-处理字符串"><a href="#9-3-5-split-处理字符串" class="headerlink" title="9.3.5 split()处理字符串"></a>9.3.5 split()处理字符串</h3><p><code>split()</code>函数将字符串根据空格分隔，并创建一个 <b>单词列表</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'I love you'</span></span><br><span class="line">words = s.split()</span><br><span class="line">print(words)</span><br></pre></td></tr></table></figure></p><blockquote><p>[‘I’, ‘love’, ‘you’]</p></blockquote><p>调用len()函数即可以获知字符串单词个数。</p><h3 id="9-3-6-处理多个文件"><a href="#9-3-6-处理多个文件" class="headerlink" title="9.3.6 处理多个文件"></a>9.3.6 处理多个文件</h3><p>有一种方法是将一系列文件名存在列表里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">files = [<span class="string">'f1.txt'</span>, <span class="string">'f2.txt'</span>, <span class="string">'f3.txt'</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">with</span> open(filename):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><h3 id="9-3-7-使用pass语句跳过异常语句"><a href="#9-3-7-使用pass语句跳过异常语句" class="headerlink" title="9.3.7 使用pass语句跳过异常语句"></a>9.3.7 使用pass语句跳过异常语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>pass</code>语句会让Python什么都不做，“一声不吭”。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第九章-文件&quot;&gt;&lt;a href=&quot;#第九章-文件&quot; class=&quot;headerlink&quot; title=&quot;第九章 文件&quot;&gt;&lt;/a&gt;第九章 文件&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
      <category term="Python基础" scheme="/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(八)：类</title>
    <link href="/2019/07/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AB/"/>
    <id>/2019/07/15/Python学习笔记-八/</id>
    <published>2019-07-15T09:36:04.000Z</published>
    <updated>2019-11-03T10:41:02.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八章-类"><a href="#第八章-类" class="headerlink" title="第八章 类"></a>第八章 类</h1> <a id="more"></a><p><br><br></p><h2 id="8-1-创建和使用类"><a href="#8-1-创建和使用类" class="headerlink" title="8.1 创建和使用类"></a>8.1 创建和使用类</h2><hr><h3 id="8-1-1-创建类"><a href="#8-1-1-创建类" class="headerlink" title="8.1.1 创建类"></a>8.1.1 创建类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟小狗的类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化类信息"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" sit down!"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" roll over!"</span>)</span><br></pre></td></tr></table></figure><ol><li>方法<code>__init__()</code></li></ol><ul><li>类中的函数称为<font face="楷体"><u>方法</u></font> ；你前面学到的有关函数的一切都适用于方法。</li><li>方法<strong>init</strong>()是一个特殊的方法，每当你根据Dog类创建新实例时，Python都会自动运行它。</li><li>在这个方法的名称里，开头和末尾都有两个下划线，<b>这是一种约定</b>，为了避免与普通方法名称冲突</li><li>该方法里有三个形参：self、 name和age。其中<b>self是必不可少的，还必须放在所有参数前面</b>。因为<b>每个与类相关联的方法都调用都自动传递self</b>,它是一个指向实例本身的<u>引用</u>，让实例能够访问类中的属性和方法。我们创建Dog实例时，Python将调用<strong>init</strong>()方法。我们通过实参向Dog()传递名字和年龄，而self会自动传递。所以每次我们只需要给最后两个形参（age和name）即可。</li><li><p>在方法<strong>init</strong>()的定义中，两个变量都有前缀self。以self为前缀的变量都可供类中的所有方法使用，可以通过类的任何实例访问这些量。<br>self.name=name获取存储在形参name中的值，并存储到变量name中，然后该变量被关联到创建的实例。<br>像这样可以通过实例访问的变量称为<font face="楷体"><u>属性</u></font>。</p><ol><li>Dog类还定义了另外两个方法：sit()和roll()。由于这些方法不需要额外的信息，因此他们只有一个形参self。</li></ol></li></ul><h3 id="8-1-2-根据类创建实例"><a href="#8-1-2-根据类创建实例" class="headerlink" title="8.1.2 根据类创建实例"></a>8.1.2 根据类创建实例</h3><p>可将类视为有关如何创建实例的说明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'Tim'</span>, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"My dog's name is "</span> + my_dog.name)</span><br><span class="line">print(<span class="string">"My dog's age is "</span> + str(my_dog.age))</span><br><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll()</span><br></pre></td></tr></table></figure></p><blockquote><p>My dog’s name is Tim<br>My dog’s age is 2<br>Tim sit down!<br>Tim roll over!</p></blockquote><p><br><br></p><h2 id="8-2-继承"><a href="#8-2-继承" class="headerlink" title="8.2 继承"></a>8.2 继承</h2><p>一个类继承另一个类时，它将<b>自动获得另一个类的所有属性和方法</b></p><hr><h3 id="8-2-1-子类的方法-init"><a href="#8-2-1-子类的方法-init" class="headerlink" title="8.2.1 子类的方法 __init__()"></a>8.2.1 子类的方法 __init__()</h3><p>创建子类的实例时，<u>Pyhton首先需要完成的是给父类的所有属性赋值</u>。为此，子类的init方法需要父类“施以援手”。<br>例如，下面来模拟电动汽车，其为继承自“车”的子类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_name())</span><br></pre></td></tr></table></figure></p><blockquote><p>Tesla Model 2016</p></blockquote><ul><li>定义子类时，必须在括号内指定父类的名称</li><li>super()是一个特殊的函数，帮助Python将父类和子类关联。这行代码让Python调用ElectricCar的父类的方法<strong>init</strong>()，让ElectricCar实例包含父类的所有属性。父类又称超类(super class)，super函数也是因此得名。</li></ul><h3 id="8-2-2-给子类定义属性和方法"><a href="#8-2-2-给子类定义属性和方法" class="headerlink" title="8.2.2 给子类定义属性和方法"></a>8.2.2 给子类定义属性和方法</h3><p>让一个类继承另一个类之后，可以拥有自己独特的属性。<br>比如电动汽车有一项指标是电池容量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year, batterysize)</span>:</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.batterysize = batterysize</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bat_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.batterysize</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>, <span class="number">70</span>)</span><br><span class="line">print(my_tesla.get_bat_size())</span><br></pre></td></tr></table></figure></p><blockquote><p>70</p></blockquote><h3 id="8-2-3-重写父类的方法"><a href="#8-2-3-重写父类的方法" class="headerlink" title="8.2.3 重写父类的方法"></a>8.2.3 重写父类的方法</h3><p>对于父类的方法，只要不符合子类的”规则”，都可以进行<b>重写</b>。即在子类中定义一个重名的方法，这样Python将不会考虑父类中的这个方法。<br>比如描述电动汽车的名字还需要带上电池容量，则需要重写get_name函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year) + <span class="string">' '</span> + str(self.batterysize)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>, <span class="number">70</span>)</span><br><span class="line">print(my_tesla.get_name())</span><br></pre></td></tr></table></figure></p><blockquote><p>Tesla Model 2016 70</p></blockquote><h3 id="8-2-3-将类作为其他类的属性"><a href="#8-2-3-将类作为其他类的属性" class="headerlink" title="8.2.3 将类作为其他类的属性"></a>8.2.3 将类作为其他类的属性</h3><p>和C++类的嵌套相似，不多赘述</p><p><br></p><h2 id="8-3-导入类"><a href="#8-3-导入类" class="headerlink" title="8.3 导入类"></a>8.3 导入类</h2><div class="table-container"><table><thead><tr><th>语法</th><th>作用 </th></tr></thead><tbody><tr><td>from 模块名 import 类名</td><td>导入单个类 </td></tr><tr><td>from 模块名 import 类1，类2…</td><td>导入多个类</td></tr><tr><td>import  模块名</td><td>导入整个模块的类（使用需要加句点）</td></tr><tr><td>from 模块名 import *</td><td>导入模块所有类 (使用不需要加句点)</td></tr></tbody></table></div><h3 id="8-3-1-在一个模块中导入另一个模块"><a href="#8-3-1-在一个模块中导入另一个模块" class="headerlink" title="8.3.1 在一个模块中导入另一个模块"></a>8.3.1 在一个模块中导入另一个模块</h3><p>模块可以连环导入，比如<br><img alt data-src="https://s2.ax1x.com/2019/07/15/ZTAJ7F.png" class="lozad"></p><h2 id="8-4-Python标准库"><a href="#8-4-Python标准库" class="headerlink" title="8.4 Python标准库"></a>8.4 Python标准库</h2><p>Python标准库是Python内置的一组模块。只需在程序开头包含一条简单的import语句，便可使用标准库的函数和类。比如模块collections中的一个类——OrderedDict.<br>字典虽然能够把信息关联，但不能记录你添加键值对的顺序。而OrderedDict可以解决这个问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">fav_lang = OrderedDict()</span><br><span class="line"></span><br><span class="line">fav_lang[<span class="string">'Lily'</span>] = <span class="string">'C'</span></span><br><span class="line">fav_lang[<span class="string">'Tom'</span>] = <span class="string">'Python'</span></span><br><span class="line">fav_lang[<span class="string">'Jack'</span>] = <span class="string">'JAVA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, lang <span class="keyword">in</span> fav_lang.items():</span><br><span class="line">    print(name + <span class="string">" "</span> + lang)</span><br></pre></td></tr></table></figure></p><blockquote><p>Lily C<br>Tom Python<br>Jack JAVA</p></blockquote><p>输出的顺序与添加的顺序完全相同。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第八章-类&quot;&gt;&lt;a href=&quot;#第八章-类&quot; class=&quot;headerlink&quot; title=&quot;第八章 类&quot;&gt;&lt;/a&gt;第八章 类&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
      <category term="Python基础" scheme="/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(七)：函数</title>
    <link href="/2019/07/14/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/"/>
    <id>/2019/07/14/Python学习笔记-七/</id>
    <published>2019-07-14T08:44:33.000Z</published>
    <updated>2019-11-03T10:41:02.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h1> <a id="more"></a><p> <br><br></p><h2 id="7-1-定义函数"><a href="#7-1-定义函数" class="headerlink" title="7.1 定义函数"></a>7.1 定义函数</h2><hr> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(username)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greeting(<span class="string">'Tom'</span>) <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></figure><blockquote><p>输出：Hello, Tom!</p></blockquote><p><br><br></p><h2 id="7-2-传递实参"><a href="#7-2-传递实参" class="headerlink" title="7.2  传递实参"></a>7.2  传递实参</h2><hr><p>向函数传递实参的方式很多，可使用<font face="楷体"> 位置实参</font> ，这要求实参的顺序和形参的顺序相同；也可以使用<font face="楷体"> 关键字实参</font> ，其中每个参数都由变量名和值组成；还可以使用列表和字典。</p><h3 id="7-2-1-位置实参"><a href="#7-2-1-位置实参" class="headerlink" title="7.2.1 位置实参"></a>7.2.1 位置实参</h3><p>你调用函数时，Python必须将函数调用的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种方式被称为 <font face="楷体"> <u>位置实参 </u></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line">best_book(<span class="string">"Lucy"</span>, <span class="string">"scientific"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>The best book is Lucy<br>It’s a scientific</p></blockquote><p>调用方式与C大体相同，不多赘述。</p><h3 id="7-2-2-关键字实参"><a href="#7-2-2-关键字实参" class="headerlink" title="7.2.2 关键字实参"></a>7.2.2 关键字实参</h3><p> <font face="楷体"> <u>关键字实参 </u></font> 是传递给函数的 <b>名称-值对</b>。你直接在实参总将名称和值关联起来，因此向函数传递参数时不会混淆顺序。关键字实参让你无需考虑函数调用中的实参顺序，还清除指出各个值的用途。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line">best_book(book_type = <span class="string">"scientific"</span>, book_name = <span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出同上</p></blockquote><h3 id="7-2-3-默认值"><a href="#7-2-3-默认值" class="headerlink" title="7.2.3 默认值"></a>7.2.3 默认值</h3><p>编写函数时，可以给每个形参指定默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type=<span class="string">'scientific'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_book(book_name=<span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type=<span class="string">'scientific'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_book(<span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出皆为同上</p></blockquote><ul><li>有默认值的形参必须放在无默认值的形参后面（与C++相同）</li></ul><p><br><br></p><h2 id="7-3-返回值"><a href="#7-3-返回值" class="headerlink" title="7.3 返回值"></a>7.3 返回值</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">    full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">me = name(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><blockquote><p>Eion Lee</p></blockquote><h3 id="7-3-1-让实参变成可选的"><a href="#7-3-1-让实参变成可选的" class="headerlink" title="7.3.1 让实参变成可选的"></a>7.3.1 让实参变成可选的</h3><p>就上面的例子来说，考虑到有的人有中间名，有的人没有<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name, last_name, middle_name = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name + <span class="string">" "</span> + middle_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">me = name(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>)</span><br><span class="line">you = name(<span class="string">'TZ'</span>, <span class="string">'BEX'</span>, <span class="string">'F'</span>)</span><br><span class="line">print(me)</span><br><span class="line">print(you)</span><br></pre></td></tr></table></figure></p><blockquote><p>Eion Lee<br>Tz F Bex</p></blockquote><h3 id="7-3-2-返回字典"><a href="#7-3-2-返回字典" class="headerlink" title="7.3.2 返回字典"></a>7.3.2 返回字典</h3><p>返回值可以是复杂的变量，比如字典和列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(fn, ln, gd)</span>:</span></span><br><span class="line">    p = &#123;</span><br><span class="line">        <span class="string">'first_name'</span>: fn,</span><br><span class="line">        <span class="string">'last_name'</span>: ln,</span><br><span class="line">        <span class="string">'gender'</span>: gd</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T1 = person(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>, <span class="string">'male'</span>)</span><br><span class="line">print(T1)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘first_name’: ‘Eion’, ‘last_name’: ‘Lee’, ‘gender’: ‘male’}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(f, s, t)</span>:</span></span><br><span class="line">    p = [f, s, t]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T1 = person(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(T1)</span><br></pre></td></tr></table></figure><blockquote><p>[1, 2, 3]</p></blockquote><p><br><br></p><h2 id="7-4-传递列表"><a href="#7-4-传递列表" class="headerlink" title="7.4 传递列表"></a>7.4 传递列表</h2><hr><p>将列表传递给函数非常有用。函数可以直接访问列表的内容，并对其进行修改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(names)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        print(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">guests = [<span class="string">'Tom'</span>,<span class="string">'Alice'</span>,<span class="string">'Bob'</span>]</span><br><span class="line">greeting(guests)</span><br></pre></td></tr></table></figure></p><blockquote><p>Hello, Tom!<br>Hello, Alice!<br>Hello, Bob!</p></blockquote><h3 id="7-4-1-用函数修改列表"><a href="#7-4-1-用函数修改列表" class="headerlink" title="7.4.1 用函数修改列表"></a>7.4.1 用函数修改列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(required)</span>:</span></span><br><span class="line">    finished = []</span><br><span class="line">    <span class="keyword">while</span> required:</span><br><span class="line">       cur = required.pop()</span><br><span class="line">       print(cur + <span class="string">" finished"</span>)</span><br><span class="line">       finished.append(cur)</span><br><span class="line">    <span class="keyword">return</span> finished</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re = [<span class="string">'Tom'</span>, <span class="string">'Alice'</span>, <span class="string">'Bob'</span>]</span><br><span class="line">fi = print_list(re)</span><br><span class="line">print(<span class="string">"\nUninished:"</span>)</span><br><span class="line">print(re)</span><br></pre></td></tr></table></figure><blockquote><p>Bob finished<br>Alice finished<br>Tom finished<br><br><br>Uninished:<br>[]</p></blockquote><h3 id="7-4-2-禁止函数修改列表"><a href="#7-4-2-禁止函数修改列表" class="headerlink" title="7.4.2 禁止函数修改列表"></a>7.4.2 禁止函数修改列表</h3><p>有时不需要函数修改列表。比如打印完后，还想查阅原来需要打印的名单，则不能让函数修改这份名单。<br>为解决这个问题，可以向函数<b>传递列表的副本</b>，而不是原列表<br>传递列表的副本可以这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_list(re[:])</span><br></pre></td></tr></table></figure></p><p>即： <u>将列表的<b>完整切片</b>传递给函数。</u><font size="5">★ </font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(required)</span>:</span></span><br><span class="line">    finished = []</span><br><span class="line">    <span class="keyword">while</span> required:</span><br><span class="line">       cur = required.pop()</span><br><span class="line">       print(cur + <span class="string">" finished"</span>)</span><br><span class="line">       finished.append(cur)</span><br><span class="line">    <span class="keyword">return</span> finished</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re = [<span class="string">'Tom'</span>, <span class="string">'Alice'</span>, <span class="string">'Bob'</span>]</span><br><span class="line">fi = print_list(re[:])</span><br><span class="line">print(<span class="string">"\nRequired:"</span>)</span><br><span class="line">print(re)</span><br></pre></td></tr></table></figure><blockquote><p>Bob finished<br>Alice finished<br>Tom finished<br><br><br>Required:<br>[‘Tom’, ‘Alice’, ‘Bob’]</p></blockquote><p><br><br></p><h2 id="7-5-传递任意数量的参数"><a href="#7-5-传递任意数量的参数" class="headerlink" title="7.5 传递任意数量的参数"></a>7.5 传递任意数量的参数</h2><hr><p>有时候，预先不知道要传递多少个实参。但Python允许函数从调用语句中收集任意数量的实参。<br><br><br>例如，要计算若干个正数的和。下面的函数只有一个形参*nums,不管调用语句提供多少实参，这个形参都会把它们收入到一个<b>元组</b>中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summ</span><span class="params">(*nums)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">s = summ(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><blockquote><p>28</p></blockquote><p>形参名*nums中的星号让Python创建一个名为nums的<b>空元组</b>，并将所有收到的参数都封装进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summ</span><span class="params">(*nums)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    print(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">s = summ(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>(1, 2, 3, 4, 5, 6, 7)</p></blockquote><h3 id="7-5-1-结合使用位置参数和任意数量实参"><a href="#7-5-1-结合使用位置参数和任意数量实参" class="headerlink" title="7.5.1 结合使用位置参数和任意数量实参"></a>7.5.1 结合使用位置参数和任意数量实参</h3><p>如果要让函数接受不同类型的实参，<u>必须在函数定义中将接纳任意数量的实参的形参放在最后。<b>（仅对于位置参数）</b></u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pizza</span><span class="params">(size, *ingds)</span>:</span></span><br><span class="line">    print(<span class="string">"Size: "</span> + str(size))</span><br><span class="line">    <span class="keyword">for</span> ingd <span class="keyword">in</span> ingds:</span><br><span class="line">        print(<span class="string">" - "</span> + ingd)</span><br><span class="line"></span><br><span class="line">pizza(<span class="number">12</span>, <span class="string">'pepper'</span>, <span class="string">'tomato'</span>)</span><br><span class="line">pizza(<span class="number">14</span>, <span class="string">'potato'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Size: 12<br>- pepper<br>- tomato<br>Size: 14<br>- potato</p></blockquote><h3 id="7-5-2-使用任意数量的关键字实参"><a href="#7-5-2-使用任意数量的关键字实参" class="headerlink" title="7.5.2 使用任意数量的关键字实参"></a>7.5.2 使用任意数量的关键字实参</h3><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键-值对。<br>比如要生成一份简历，但不知道会加入多少信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">me = profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘name’: ‘Eion’, ‘gender’: ‘male’, ‘age’: ‘18’, ‘job’: ‘stu’}</p></blockquote><p>形参名**info中的两个星号让Python创建一个名为info的<b>空字典</b>，并将所有收到的键值对都封装进去。</p><h3 id="7-5-3-强制使用关键字实参"><a href="#7-5-3-强制使用关键字实参" class="headerlink" title="7.5.3 强制使用关键字实参"></a>7.5.3 强制使用关键字实参</h3><p>将强制关键字参数放到某个*参数或者单个*后面就能达到这种效果。比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(maxsize, *, block)</span>:</span></span><br><span class="line">    print(<span class="string">'Receives a message'</span>)</span><br><span class="line"></span><br><span class="line">recv(<span class="number">1024</span>, <span class="literal">True</span>) <span class="comment"># TypeError</span></span><br><span class="line">recv(<span class="number">1024</span>, block = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>在第一次调用中，True被当做星号的任意实参，导致没有参数传递给block，所以报错。<br><br><br><br>利用这种技术，我们还能在接受任意多个位置参数的函数中指定关键字参数。比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimum</span><span class="params">(*values, clip=None)</span>:</span></span><br><span class="line">    m = min(values)</span><br><span class="line">    <span class="keyword">if</span> clip <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        m = clip <span class="keyword">if</span> clip &gt; m <span class="keyword">else</span> m</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">minimum(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">-5</span>, <span class="number">10</span>) <span class="comment"># Returns -5</span></span><br><span class="line">minimum(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">-5</span>, <span class="number">10</span>, clip=<span class="number">0</span>) <span class="comment"># Returns 0</span></span><br></pre></td></tr></table></figure></p><p><br><br></p><h2 id="7-6-将函数存储在模块中"><a href="#7-6-将函数存储在模块中" class="headerlink" title="7.6 将函数存储在模块中"></a>7.6 将函数存储在模块中</h2><p>函数的有点之一是，使用它们可以将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解的多。你还可以更进一步，将函数存储在被称为<font face="楷体">模块</font>的独立文件中，在将模块<font face="楷体">导入</font>到主程序。<br><code>import</code>语句允许当前运行的程序文件中使用模块的代码。</p><h3 id="7-6-1-导入整个模块"><a href="#7-6-1-导入整个模块" class="headerlink" title="7.6.1 导入整个模块"></a>7.6.1 导入整个模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">me = func.profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><blockquote><p>{‘name’: ‘Eion’, ‘gender’: ‘male’, ‘age’: ‘18’, ‘job’: ‘stu’}</p></blockquote><h3 id="7-6-2-导入特定的函数"><a href="#7-6-2-导入特定的函数" class="headerlink" title="7.6.2 导入特定的函数"></a>7.6.2 导入特定的函数</h3><p>还可以导入模块中的特定函数，语法如下：<br><code>from 模块名 import  函数1, 函数2, ....</code><br>通过逗号分隔多个函数</p><ul><li>若用这种语法，则调用函数时<u>不需要用句点指定模块名。</u></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> profile</span><br><span class="line"></span><br><span class="line">me = profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><h3 id="7-6-3-使用as给函数-模块指定别名"><a href="#7-6-3-使用as给函数-模块指定别名" class="headerlink" title="7.6.3 使用as给函数/模块指定别名"></a>7.6.3 使用as给函数/模块指定别名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> profile <span class="keyword">as</span> pf</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> func <span class="keyword">as</span> fc</span><br></pre></td></tr></table></figure><h3 id="7-6-4-导入模块中的所有函数"><a href="#7-6-4-导入模块中的所有函数" class="headerlink" title="7.6.4 导入模块中的所有函数"></a>7.6.4 导入模块中的所有函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>该语句中的星号让Python将模块func中的所有函数复制到这个程序文件中。</p><ul><li>由于是导入函数，所以所有函数都不需要加句点调用。</li><li>但最好不要采用这种方法：如果遇到不同模块中有着相同名称的函数，则会出错。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第七章-函数&quot;&gt;&lt;a href=&quot;#第七章-函数&quot; class=&quot;headerlink&quot; title=&quot;第七章 函数&quot;&gt;&lt;/a&gt;第七章 函数&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
      <category term="Python基础" scheme="/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(六)：输入与while循环</title>
    <link href="/2019/07/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>/2019/07/13/Python学习笔记-六/</id>
    <published>2019-07-13T11:51:29.000Z</published>
    <updated>2019-11-03T10:41:02.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六章-输入与while循环"><a href="#第六章-输入与while循环" class="headerlink" title="第六章 输入与while循环"></a>第六章 输入与while循环</h1><a id="more"></a><p><br><br></p><h2 id="6-1-函数input-的工作原理"><a href="#6-1-函数input-的工作原理" class="headerlink" title="6.1 函数input()的工作原理"></a>6.1 函数input()的工作原理</h2><hr><p>函数<code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">''</span></span><br><span class="line">name = input(<span class="string">"who are you?"</span>)</span><br><span class="line">print(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>who are you?<br>输入：tim<br>输出：<br>Hello, tim!</p></blockquote><p>函数input()接受一个参数：即要向用户展示的<font face="楷体">提示或说明</font>。<br>程序等待用户输入，在用户按回车键后继续运行。</p><h3 id="6-1-1-用int-获取数值输入"><a href="#6-1-1-用int-获取数值输入" class="headerlink" title="6.1.1 用int()获取数值输入"></a>6.1.1 用int()获取数值输入</h3><p>使用函数input()时，Python会将用户输入解读为字符串。<br>可以使用<code>int()</code>函数，让Python将参数汇总的的字符串转化为数值。（与str()对应）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="string">''</span></span><br><span class="line">age = input(<span class="string">"How old are you?\n"</span>)</span><br><span class="line">age = int(age)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"You are an adult."</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>输入：19<br>输出：You are an adult.</p></blockquote><p><br><br></p><h2 id="6-2-while循环"><a href="#6-2-while循环" class="headerlink" title="6.2 while循环"></a>6.2 while循环</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">5</span>:</span><br><span class="line">   print(num)</span><br><span class="line">   num += <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>1<br>2<br>3<br>4<br>5</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"i am a repeater\n"</span>)</span><br><span class="line"><span class="keyword">while</span> s != <span class="string">'quit'</span></span><br><span class="line">    print(s)</span><br><span class="line">    s = input()</span><br></pre></td></tr></table></figure><blockquote><p>复读机，直到用户输入quit停止</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span></span><br><span class="line">count = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    print(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count &lt; <span class="number">0</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>5<br>4<br>3<br>2<br>1<br>0</p></blockquote><h3 id="6-2-1-在循环中使用break和continue"><a href="#6-2-1-在循环中使用break和continue" class="headerlink" title="6.2.1 在循环中使用break和continue"></a>6.2.1 在循环中使用break和continue</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = input()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"You just inputed "</span> + s)</span><br></pre></td></tr></table></figure><blockquote><p>复读机，直到输入quit</p></blockquote><p>continue不多赘述，与C语言作用相同<br><br><br></p><h2 id="6-3-用while循环来处理列表和字典"><a href="#6-3-用while循环来处理列表和字典" class="headerlink" title="6.3 用while循环来处理列表和字典"></a>6.3 用while循环来处理列表和字典</h2><hr><h3 id="6-3-1-在列表之间移动元素"><a href="#6-3-1-在列表之间移动元素" class="headerlink" title="6.3.1 在列表之间移动元素"></a>6.3.1 在列表之间移动元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">target = [<span class="string">'apple'</span>, <span class="string">'bannana'</span>, <span class="string">'peach'</span>]</span><br><span class="line">shopping_car = []</span><br><span class="line"><span class="keyword">while</span> target:</span><br><span class="line">    cur = target.pop()</span><br><span class="line">    print(<span class="string">"Buy "</span> + cur)</span><br><span class="line">    shopping_car.append(cur)</span><br><span class="line">print(<span class="string">"You have bought these:"</span>)</span><br><span class="line">print(shopping_car)</span><br><span class="line">print(<span class="string">"These not bought:"</span>)</span><br><span class="line">print(target)</span><br></pre></td></tr></table></figure><blockquote><p>Buy peach<br>Buy bannana<br>Buy apple<br>You have bought these:<br>[‘peach’, ‘bannana’, ‘apple’]<br>These not bought:<br>[]</p></blockquote><h3 id="6-3-2-删除所有列表中的特定值"><a href="#6-3-2-删除所有列表中的特定值" class="headerlink" title="6.3.2 删除所有列表中的特定值"></a>6.3.2 删除所有列表中的特定值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'peach'</span>, <span class="string">'apple'</span>, <span class="string">'apple'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">'apple'</span> <span class="keyword">in</span> fruits:</span><br><span class="line">    fruits.remove(<span class="string">'apple'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><blockquote><p>[‘orange’, ‘peach’]</p></blockquote><h3 id="6-3-3-利用输入填充字典"><a href="#6-3-3-利用输入填充字典" class="headerlink" title="6.3.3 利用输入填充字典"></a>6.3.3 利用输入填充字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cilent = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name = input(<span class="string">"Please input your name:"</span>)</span><br><span class="line">    nick_name = input(<span class="string">"Please input your nickname:"</span>)</span><br><span class="line">    cilent[nick_name] = name</span><br><span class="line">    re = input(<span class="string">"Would you like to continue? (yes/no)"</span>)</span><br><span class="line">    <span class="keyword">if</span> re == <span class="string">'no'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(cilent)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六章-输入与while循环&quot;&gt;&lt;a href=&quot;#第六章-输入与while循环&quot; class=&quot;headerlink&quot; title=&quot;第六章 输入与while循环&quot;&gt;&lt;/a&gt;第六章 输入与while循环&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
      <category term="Python基础" scheme="/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(五):字典</title>
    <link href="/2019/07/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>/2019/07/13/Python学习笔记-五/</id>
    <published>2019-07-13T08:58:20.000Z</published>
    <updated>2019-11-03T10:41:02.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五章-字典"><a href="#第五章-字典" class="headerlink" title="第五章 字典"></a>第五章 字典</h1><a id="more"></a><p><br><br></p><h2 id="5-1-使用字典"><a href="#5-1-使用字典" class="headerlink" title="5.1 使用字典"></a>5.1 使用字典</h2><hr><p>在Python中，<font face="楷体">字典</font> 是一系列 <font face="楷体">键-值对</font> 。每个键都与一个值相关，可以用键值访问与之关联的值。<br>用放在<u>花括号</u>{ }中的一系列键-值对表示字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line">print(Tom[<span class="string">'gender'</span>])</span><br></pre></td></tr></table></figure></p><p>输出：</p><blockquote><p>male</p></blockquote><h3 id="5-1-1-添加键值对"><a href="#5-1-1-添加键值对" class="headerlink" title="5.1.1 添加键值对"></a>5.1.1 添加键值对</h3><p>字典是一种<b>动态结构</b>，可随时在其中添加键值对。要添加键值对，可依次指明字典名、用方括号括其键、将值赋值给它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line">Tom[<span class="string">'hobby'</span>] = <span class="string">'football'</span></span><br><span class="line">print(Tom)</span><br></pre></td></tr></table></figure></p><p>输出：</p><blockquote><p>{‘gender’: ‘male’, ‘age’: 15, ‘home’: ‘New York’, ‘hobby’: ‘football’}</p></blockquote><h3 id="5-1-2-修改字典中的值"><a href="#5-1-2-修改字典中的值" class="headerlink" title="5.1.2 修改字典中的值"></a>5.1.2 修改字典中的值</h3><p>直接赋值，不多赘述</p><h3 id="5-1-3-删除键值对"><a href="#5-1-3-删除键值对" class="headerlink" title="5.1.3 删除键值对"></a>5.1.3 删除键值对</h3><p>对于字典中不需要的信息，可以用<code>del</code>语句直接彻底删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">del</span> Tom[age]</span><br><span class="line">print(Tom)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘gender’: ‘male’, ‘home’: ‘New York’}</p></blockquote><p><br><br></p><h2 id="5-2-遍历字典"><a href="#5-2-遍历字典" class="headerlink" title="5.2 遍历字典"></a>5.2 遍历字典</h2><hr><h3 id="5-2-1-遍历字典所有信息"><a href="#5-2-1-遍历字典所有信息" class="headerlink" title="5.2.1 遍历字典所有信息"></a>5.2.1 遍历字典所有信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> Tom.items():</span><br><span class="line">   print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line">   print(<span class="string">"Value: "</span> + value)</span><br></pre></td></tr></table></figure><ul><li>要编写遍历字典的for循环，需要声明两个变量，用于存储键和值。</li><li>方法<code>items()</code>返回一个<b>键值对列表</b>。</li></ul><h3 id="5-2-2-遍历字典中所有的键"><a href="#5-2-2-遍历字典中所有的键" class="headerlink" title="5.2.2 遍历字典中所有的键"></a>5.2.2 遍历字典中所有的键</h3><p>在不需要使用字典中的值时，方法<code>keys()</code>很有用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> Tom.keys():</span><br><span class="line">   print(<span class="string">"Key: "</span> + key)</span><br></pre></td></tr></table></figure></p><blockquote><p>Key: gender<br>Key: home</p></blockquote><ul><li>keys()返回一个<b>键列表</b></li></ul><h3 id="5-2-3-遍历字典中所有的值"><a href="#5-2-3-遍历字典中所有的值" class="headerlink" title="5.2.3 遍历字典中所有的值"></a>5.2.3 遍历字典中所有的值</h3><p>同理，用方法<code>values()</code> 可以得到一个<b>值列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> Tom.values():</span><br><span class="line">   print(<span class="string">"Values: "</span> + val)</span><br></pre></td></tr></table></figure></b></p><blockquote><p>Values: male<br>Values: New York</p></blockquote><p><br><br></p><h2 id="5-3-嵌套"><a href="#5-3-嵌套" class="headerlink" title="5.3 嵌套*"></a>5.3 嵌套*</h2><hr><p>字典、元组、列表之间可以相互嵌套<br>比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">c = &#123;</span><br><span class="line">    <span class="number">1</span>: a,</span><br><span class="line">    <span class="number">2</span>: b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">20</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">c = [a, b]</span><br></pre></td></tr></table></figure><p>但需要注意：</p><ul><li>被嵌套的字典、列表、元组<u>并不是复制一套新副本进去</u>，而是将其<b>“引用”</b>被包含进去。即改变被包含的元素，原列表/元组/字典同样会改变。</li><li>被包含的简单变量不会变化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典包含列表</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">c = &#123;</span><br><span class="line">    <span class="number">1</span>: a,</span><br><span class="line">    <span class="number">2</span>: b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">print(c[<span class="number">1</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><blockquote><p>c[1] : [3, 2]<br>a : [3, 2]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表包含字典</span></span><br><span class="line">a = &#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">20</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">c = [a, b]</span><br><span class="line"></span><br><span class="line">c[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">print(c[<span class="number">0</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><blockquote><p>c[0] : {1: 100, 2: 20}<br>a : {1: 100, 2: 20}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表包含简单变量</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">a = [i, <span class="number">2</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">print(a[<span class="number">0</span>])</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><blockquote><p>a[0] : 2<br>i : 1</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第五章-字典&quot;&gt;&lt;a href=&quot;#第五章-字典&quot; class=&quot;headerlink&quot; title=&quot;第五章 字典&quot;&gt;&lt;/a&gt;第五章 字典&lt;/h1&gt;
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
      <category term="Python基础" scheme="/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
</feed>
