<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Irimsky</title>
  
  <subtitle>爱我所爱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-15T09:39:22.675Z</updated>
  <id>/</id>
  
  <author>
    <name>Irimsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习笔记(八)</title>
    <link href="/2019/07/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AB/"/>
    <id>/2019/07/15/Python学习笔记-八/</id>
    <published>2019-07-15T09:36:04.000Z</published>
    <updated>2019-07-15T09:39:22.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八章-类"><a href="#第八章-类" class="headerlink" title="第八章 类"></a>第八章 类</h1> <a id="more"></a><p><br><br></p><h2 id="8-1-创建和使用类"><a href="#8-1-创建和使用类" class="headerlink" title="8.1 创建和使用类"></a>8.1 创建和使用类</h2><hr><h3 id="8-1-1-创建类"><a href="#8-1-1-创建类" class="headerlink" title="8.1.1 创建类"></a>8.1.1 创建类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟小狗的类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化类信息"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" sit down!"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" roll over!"</span>)</span><br></pre></td></tr></table></figure><ol><li>方法<code>__init__()</code></li></ol><ul><li>类中的函数称为<font face="楷体"><u>方法</u></font> ；你前面学到的有关函数的一切都适用于方法。</li><li>方法<strong>init</strong>()是一个特殊的方法，每当你根据Dog类创建新实例时，Python都会自动运行它。</li><li>在这个方法的名称里，开头和末尾都有两个下划线，<b>这是一种约定</b>，为了避免与普通方法名称冲突</li><li>该方法里有三个形参：self、 name和age。其中<b>self是必不可少的，还必须放在所有参数前面</b>。因为<b>每个与类相关联的方法都调用都自动传递self</b>,它是一个指向实例本身的<u>引用</u>，让实例能够访问类中的属性和方法。我们创建Dog实例时，Python将调用<strong>init</strong>()方法。我们通过实参向Dog()传递名字和年龄，而self会自动传递。所以每次我们只需要给最后两个形参（age和name）即可。</li><li><p>在方法<strong>init</strong>()的定义中，两个变量都有前缀self。以self为前缀的变量都可供类中的所有方法使用，可以通过类的任何实例访问这些量。<br>self.name=name获取存储在形参name中的值，并存储到变量name中，然后该变量被关联到创建的实例。<br>像这样可以通过实例访问的变量称为<font face="楷体"><u>属性</u></font>。</p><ol><li>Dog类还定义了另外两个方法：sit()和roll()。由于这些方法不需要额外的信息，因此他们只有一个形参self。</li></ol></li></ul><h3 id="8-1-2-根据类创建实例"><a href="#8-1-2-根据类创建实例" class="headerlink" title="8.1.2 根据类创建实例"></a>8.1.2 根据类创建实例</h3><p>可将类视为有关如何创建实例的说明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'Tim'</span>, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"My dog's name is "</span> + my_dog.name)</span><br><span class="line">print(<span class="string">"My dog's age is "</span> + str(my_dog.age))</span><br><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll()</span><br></pre></td></tr></table></figure></p><blockquote><p>My dog’s name is Tim<br>My dog’s age is 2<br>Tim sit down!<br>Tim roll over!</p></blockquote><p><br><br></p><h2 id="8-2-继承"><a href="#8-2-继承" class="headerlink" title="8.2 继承"></a>8.2 继承</h2><p>一个类继承另一个类时，它将<b>自动获得另一个类的所有属性和方法</b></p><hr><h3 id="8-2-1-子类的方法-init"><a href="#8-2-1-子类的方法-init" class="headerlink" title="8.2.1 子类的方法 __init__()"></a>8.2.1 子类的方法 __init__()</h3><p>创建子类的实例时，<u>Pyhton首先需要完成的是给父类的所有属性赋值</u>。为此，子类的init方法需要父类“施以援手”。<br>例如，下面来模拟电动汽车，其为继承自“车”的子类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_name())</span><br></pre></td></tr></table></figure></p><blockquote><p>Tesla Model 2016</p></blockquote><ul><li>定义子类时，必须在括号内指定父类的名称</li><li>super()是一个特殊的函数，帮助Python将父类和子类关联。这行代码让Python调用ElectricCar的父类的方法<strong>init</strong>()，让ElectricCar实例包含父类的所有属性。父类又称超类(super class)，super函数也是因此得名。</li></ul><h3 id="8-2-2-给子类定义属性和方法"><a href="#8-2-2-给子类定义属性和方法" class="headerlink" title="8.2.2 给子类定义属性和方法"></a>8.2.2 给子类定义属性和方法</h3><p>让一个类继承另一个类之后，可以拥有自己独特的属性。<br>比如电动汽车有一项指标是电池容量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year, batterysize)</span>:</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.batterysize = batterysize</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bat_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.batterysize</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>, <span class="number">70</span>)</span><br><span class="line">print(my_tesla.get_bat_size())</span><br></pre></td></tr></table></figure></p><blockquote><p>70</p></blockquote><h3 id="8-2-3-重写父类的方法"><a href="#8-2-3-重写父类的方法" class="headerlink" title="8.2.3 重写父类的方法"></a>8.2.3 重写父类的方法</h3><p>对于父类的方法，只要不符合子类的”规则”，都可以进行<b>重写</b>。即在子类中定义一个重名的方法，这样Python将不会考虑父类中的这个方法。<br>比如描述电动汽车的名字还需要带上电池容量，则需要重写get_name函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year) + <span class="string">' '</span> + str(self.batterysize)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>, <span class="number">70</span>)</span><br><span class="line">print(my_tesla.get_name())</span><br></pre></td></tr></table></figure></p><blockquote><p>Tesla Model 2016 70</p></blockquote><h3 id="8-2-3-将类作为其他类的属性"><a href="#8-2-3-将类作为其他类的属性" class="headerlink" title="8.2.3 将类作为其他类的属性"></a>8.2.3 将类作为其他类的属性</h3><p>和C++类的嵌套相似，不多赘述</p><p><br></p><h2 id="8-3-导入类"><a href="#8-3-导入类" class="headerlink" title="8.3 导入类"></a>8.3 导入类</h2><div class="table-container"><table><thead><tr><th>语法</th><th>作用 </th></tr></thead><tbody><tr><td>from 模块名 import 类名</td><td>导入单个类 </td></tr><tr><td>from 模块名 import 类1，类2…</td><td>导入多个类</td></tr><tr><td>import  模块名</td><td>导入整个模块的类（使用需要加句点）</td></tr><tr><td>from 模块名 import *</td><td>导入模块所有类 (使用不需要加句点)</td></tr></tbody></table></div><h3 id="8-3-1-在一个模块中导入另一个模块"><a href="#8-3-1-在一个模块中导入另一个模块" class="headerlink" title="8.3.1 在一个模块中导入另一个模块"></a>8.3.1 在一个模块中导入另一个模块</h3><p>模块可以连环导入，比如<br><img src="https://s2.ax1x.com/2019/07/15/ZTAJ7F.png" alt></p><h2 id="8-4-Python标准库"><a href="#8-4-Python标准库" class="headerlink" title="8.4 Python标准库"></a>8.4 Python标准库</h2><p>Python标准库是Python内置的一组模块。只需在程序开头包含一条简单的import语句，便可使用标准库的函数和类。比如模块collections中的一个类——OrderedDict.<br>字典虽然能够把信息关联，但不能记录你添加键值对的顺序。而OrderedDict可以解决这个问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">fav_lang = OrderedDict()</span><br><span class="line"></span><br><span class="line">fav_lang[<span class="string">'Lily'</span>] = <span class="string">'C'</span></span><br><span class="line">fav_lang[<span class="string">'Tom'</span>] = <span class="string">'Python'</span></span><br><span class="line">fav_lang[<span class="string">'Jack'</span>] = <span class="string">'JAVA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, lang <span class="keyword">in</span> fav_lang.items():</span><br><span class="line">    print(name + <span class="string">" "</span> + lang)</span><br></pre></td></tr></table></figure></p><blockquote><p>Lily C<br>Tom Python<br>Jack JAVA</p></blockquote><p>输出的顺序与添加的顺序完全相同。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第八章-类&quot;&gt;&lt;a href=&quot;#第八章-类&quot; class=&quot;headerlink&quot; title=&quot;第八章 类&quot;&gt;&lt;/a&gt;第八章 类&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(七)</title>
    <link href="/2019/07/14/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/"/>
    <id>/2019/07/14/Python学习笔记-七/</id>
    <published>2019-07-14T08:44:33.000Z</published>
    <updated>2019-07-14T08:50:50.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h1> <a id="more"></a><p> <br><br></p><h2 id="7-1-定义函数"><a href="#7-1-定义函数" class="headerlink" title="7.1 定义函数"></a>7.1 定义函数</h2><hr> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(username)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greeting(<span class="string">'Tom'</span>) <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></figure><blockquote><p>输出：Hello, Tom!</p></blockquote><p><br><br></p><h2 id="7-2-传递实参"><a href="#7-2-传递实参" class="headerlink" title="7.2  传递实参"></a>7.2  传递实参</h2><hr><p>向函数传递实参的方式很多，可使用<font face="楷体"> 位置实参</font> ，这要求实参的顺序和形参的顺序相同；也可以使用<font face="楷体"> 关键字实参</font> ，其中每个参数都由变量名和值组成；还可以使用列表和字典。</p><h3 id="7-2-1-位置实参"><a href="#7-2-1-位置实参" class="headerlink" title="7.2.1 位置实参"></a>7.2.1 位置实参</h3><p>你调用函数时，Python必须将函数调用的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种方式被称为 <font face="楷体"> <u>位置实参 </u></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line">best_book(<span class="string">"Lucy"</span>, <span class="string">"scientific"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>The best book is Lucy<br>It’s a scientific</p></blockquote><p>调用方式与C大体相同，不多赘述。</p><h3 id="7-2-2-关键字实参"><a href="#7-2-2-关键字实参" class="headerlink" title="7.2.2 关键字实参"></a>7.2.2 关键字实参</h3><p> <font face="楷体"> <u>关键字实参 </u></font> 是传递给函数的 <b>名称-值对</b>。你直接在实参总将名称和值关联起来，因此向函数传递参数时不会混淆顺序。关键字实参让你无需考虑函数调用中的实参顺序，还清除指出各个值的用途。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line">best_book(book_type = <span class="string">"scientific"</span>, book_name = <span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出同上</p></blockquote><h3 id="7-2-3-默认值"><a href="#7-2-3-默认值" class="headerlink" title="7.2.3 默认值"></a>7.2.3 默认值</h3><p>编写函数时，可以给每个形参指定默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type=<span class="string">'scientific'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_book(book_name=<span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type=<span class="string">'scientific'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_book(<span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出皆为同上</p></blockquote><ul><li>有默认值的形参必须放在无默认值的形参后面（与C++相同）</li></ul><p><br><br></p><h2 id="7-3-返回值"><a href="#7-3-返回值" class="headerlink" title="7.3 返回值"></a>7.3 返回值</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">    full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">me = name(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><blockquote><p>Eion Lee</p></blockquote><h3 id="7-3-1-让实参变成可选的"><a href="#7-3-1-让实参变成可选的" class="headerlink" title="7.3.1 让实参变成可选的"></a>7.3.1 让实参变成可选的</h3><p>就上面的例子来说，考虑到有的人有中间名，有的人没有<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name, last_name, middle_name = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name + <span class="string">" "</span> + middle_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">me = name(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>)</span><br><span class="line">you = name(<span class="string">'TZ'</span>, <span class="string">'BEX'</span>, <span class="string">'F'</span>)</span><br><span class="line">print(me)</span><br><span class="line">print(you)</span><br></pre></td></tr></table></figure></p><blockquote><p>Eion Lee<br>Tz F Bex</p></blockquote><h3 id="7-3-2-返回字典"><a href="#7-3-2-返回字典" class="headerlink" title="7.3.2 返回字典"></a>7.3.2 返回字典</h3><p>返回值可以是复杂的变量，比如字典和列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(fn, ln, gd)</span>:</span></span><br><span class="line">    p = &#123;</span><br><span class="line">        <span class="string">'first_name'</span>: fn,</span><br><span class="line">        <span class="string">'last_name'</span>: ln,</span><br><span class="line">        <span class="string">'gender'</span>: gd</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T1 = person(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>, <span class="string">'male'</span>)</span><br><span class="line">print(T1)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘first_name’: ‘Eion’, ‘last_name’: ‘Lee’, ‘gender’: ‘male’}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(f, s, t)</span>:</span></span><br><span class="line">    p = [f, s, t]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T1 = person(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(T1)</span><br></pre></td></tr></table></figure><blockquote><p>[1, 2, 3]</p></blockquote><p><br><br></p><h2 id="7-4-传递列表"><a href="#7-4-传递列表" class="headerlink" title="7.4 传递列表"></a>7.4 传递列表</h2><hr><p>将列表传递给函数非常有用。函数可以直接访问列表的内容，并对其进行修改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(names)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        print(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">guests = [<span class="string">'Tom'</span>,<span class="string">'Alice'</span>,<span class="string">'Bob'</span>]</span><br><span class="line">greeting(guests)</span><br></pre></td></tr></table></figure></p><blockquote><p>Hello, Tom!<br>Hello, Alice!<br>Hello, Bob!</p></blockquote><h3 id="7-4-1-用函数修改列表"><a href="#7-4-1-用函数修改列表" class="headerlink" title="7.4.1 用函数修改列表"></a>7.4.1 用函数修改列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(required)</span>:</span></span><br><span class="line">    finished = []</span><br><span class="line">    <span class="keyword">while</span> required:</span><br><span class="line">       cur = required.pop()</span><br><span class="line">       print(cur + <span class="string">" finished"</span>)</span><br><span class="line">       finished.append(cur)</span><br><span class="line">    <span class="keyword">return</span> finished</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re = [<span class="string">'Tom'</span>, <span class="string">'Alice'</span>, <span class="string">'Bob'</span>]</span><br><span class="line">fi = print_list(re)</span><br><span class="line">print(<span class="string">"\nUninished:"</span>)</span><br><span class="line">print(re)</span><br></pre></td></tr></table></figure><blockquote><p>Bob finished<br>Alice finished<br>Tom finished<br><br><br>Uninished:<br>[]</p></blockquote><h3 id="7-4-2-禁止函数修改列表"><a href="#7-4-2-禁止函数修改列表" class="headerlink" title="7.4.2 禁止函数修改列表"></a>7.4.2 禁止函数修改列表</h3><p>有时不需要函数修改列表。比如打印完后，还想查阅原来需要打印的名单，则不能让函数修改这份名单。<br>为解决这个问题，可以向函数<b>传递列表的副本</b>，而不是原列表<br>传递列表的副本可以这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_list(re[:])</span><br></pre></td></tr></table></figure></p><p>即： <u>将列表的<b>完整切片</b>传递给函数。</u><font size="5">★ </font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(required)</span>:</span></span><br><span class="line">    finished = []</span><br><span class="line">    <span class="keyword">while</span> required:</span><br><span class="line">       cur = required.pop()</span><br><span class="line">       print(cur + <span class="string">" finished"</span>)</span><br><span class="line">       finished.append(cur)</span><br><span class="line">    <span class="keyword">return</span> finished</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re = [<span class="string">'Tom'</span>, <span class="string">'Alice'</span>, <span class="string">'Bob'</span>]</span><br><span class="line">fi = print_list(re[:])</span><br><span class="line">print(<span class="string">"\nRequired:"</span>)</span><br><span class="line">print(re)</span><br></pre></td></tr></table></figure><blockquote><p>Bob finished<br>Alice finished<br>Tom finished<br><br><br>Required:<br>[‘Tom’, ‘Alice’, ‘Bob’]</p></blockquote><p><br><br></p><h2 id="7-5-传递任意数量的参数"><a href="#7-5-传递任意数量的参数" class="headerlink" title="7.5 传递任意数量的参数"></a>7.5 传递任意数量的参数</h2><hr><p>有时候，预先不知道要传递多少个实参。但Python允许函数从调用语句中收集任意数量的实参。<br><br><br>例如，要计算若干个正数的和。下面的函数只有一个形参*nums,不管调用语句提供多少实参，这个形参都会把它们收入到一个<b>元组</b>中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summ</span><span class="params">(*nums)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">s = summ(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><blockquote><p>28</p></blockquote><p>形参名*nums中的星号让Python创建一个名为nums的<b>空元组</b>，并将所有收到的参数都封装进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summ</span><span class="params">(*nums)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    print(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">s = summ(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>(1, 2, 3, 4, 5, 6, 7)</p></blockquote><h3 id="7-5-1-结合使用位置参数和任意数量实参"><a href="#7-5-1-结合使用位置参数和任意数量实参" class="headerlink" title="7.5.1 结合使用位置参数和任意数量实参"></a>7.5.1 结合使用位置参数和任意数量实参</h3><p>如果要让函数接受不同类型的实参，<u>必须在函数定义中将接纳任意数量的实参的形参放在最后。</u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pizza</span><span class="params">(size, *ingds)</span>:</span></span><br><span class="line">    print(<span class="string">"Size: "</span> + str(size))</span><br><span class="line">    <span class="keyword">for</span> ingd <span class="keyword">in</span> ingds:</span><br><span class="line">        print(<span class="string">" - "</span> + ingd)</span><br><span class="line"></span><br><span class="line">pizza(<span class="number">12</span>, <span class="string">'pepper'</span>, <span class="string">'tomato'</span>)</span><br><span class="line">pizza(<span class="number">14</span>, <span class="string">'potato'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Size: 12<br>- pepper<br>- tomato<br>Size: 14<br>- potato</p></blockquote><h3 id="7-5-2-使用任意数量的关键字实参"><a href="#7-5-2-使用任意数量的关键字实参" class="headerlink" title="7.5.2 使用任意数量的关键字实参"></a>7.5.2 使用任意数量的关键字实参</h3><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键-值对。<br>比如要生成一份简历，但不知道会加入多少信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">me = profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘name’: ‘Eion’, ‘gender’: ‘male’, ‘age’: ‘18’, ‘job’: ‘stu’}</p></blockquote><p>形参名**info中的两个星号让Python创建一个名为info的<b>空字典</b>，并将所有收到的键值对都封装进去。<br><br><br></p><h2 id="7-6-将函数存储在模块中"><a href="#7-6-将函数存储在模块中" class="headerlink" title="7.6 将函数存储在模块中"></a>7.6 将函数存储在模块中</h2><p>函数的有点之一是，使用它们可以将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解的多。你还可以更进一步，将函数存储在被称为<font face="楷体">模块</font>的独立文件中，在将模块<font face="楷体">导入</font>到主程序。<br><code>import</code>语句允许当前运行的程序文件中使用模块的代码。</p><h3 id="7-6-1-导入整个模块"><a href="#7-6-1-导入整个模块" class="headerlink" title="7.6.1 导入整个模块"></a>7.6.1 导入整个模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">me = func.profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><blockquote><p>{‘name’: ‘Eion’, ‘gender’: ‘male’, ‘age’: ‘18’, ‘job’: ‘stu’}</p></blockquote><h3 id="7-6-2-导入特定的函数"><a href="#7-6-2-导入特定的函数" class="headerlink" title="7.6.2 导入特定的函数"></a>7.6.2 导入特定的函数</h3><p>还可以导入模块中的特定函数，语法如下：<br><code>from 模块名 import  函数1, 函数2, ....</code><br>通过逗号分隔多个函数</p><ul><li>若用这种语法，则调用函数时<u>不需要用句点指定模块名。</u></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> profile</span><br><span class="line"></span><br><span class="line">me = profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><h3 id="7-6-3-使用as给函数-模块指定别名"><a href="#7-6-3-使用as给函数-模块指定别名" class="headerlink" title="7.6.3 使用as给函数/模块指定别名"></a>7.6.3 使用as给函数/模块指定别名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> profile <span class="keyword">as</span> pf</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> func <span class="keyword">as</span> fc</span><br></pre></td></tr></table></figure><h3 id="7-6-4-导入模块中的所有函数"><a href="#7-6-4-导入模块中的所有函数" class="headerlink" title="7.6.4 导入模块中的所有函数"></a>7.6.4 导入模块中的所有函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>该语句中的星号让Python将模块func中的所有函数复制到这个程序文件中。</p><ul><li>由于是导入函数，所以所有函数都不需要加句点调用。</li><li>但最好不要采用这种方法：如果遇到不同模块中有着相同名称的函数，则会出错。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第七章-函数&quot;&gt;&lt;a href=&quot;#第七章-函数&quot; class=&quot;headerlink&quot; title=&quot;第七章 函数&quot;&gt;&lt;/a&gt;第七章 函数&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(六)</title>
    <link href="/2019/07/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>/2019/07/13/Python学习笔记-六/</id>
    <published>2019-07-13T11:51:29.000Z</published>
    <updated>2019-07-13T11:51:53.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六章-输入与while循环"><a href="#第六章-输入与while循环" class="headerlink" title="第六章 输入与while循环"></a>第六章 输入与while循环</h1><a id="more"></a><p><br><br></p><h2 id="6-1-函数input-的工作原理"><a href="#6-1-函数input-的工作原理" class="headerlink" title="6.1 函数input()的工作原理"></a>6.1 函数input()的工作原理</h2><hr><p>函数<code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">''</span></span><br><span class="line">name = input(<span class="string">"who are you?"</span>)</span><br><span class="line">print(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>who are you?<br>输入：tim<br>输出：<br>Hello, tim!</p></blockquote><p>函数input()接受一个参数：即要向用户展示的<font face="楷体">提示或说明</font>。<br>程序等待用户输入，在用户按回车键后继续运行。</p><h3 id="6-1-1-用int-获取数值输入"><a href="#6-1-1-用int-获取数值输入" class="headerlink" title="6.1.1 用int()获取数值输入"></a>6.1.1 用int()获取数值输入</h3><p>使用函数input()时，Python会将用户输入解读为字符串。<br>可以使用<code>int()</code>函数，让Python将参数汇总的的字符串转化为数值。（与str()对应）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="string">''</span></span><br><span class="line">age = input(<span class="string">"How old are you?\n"</span>)</span><br><span class="line">age = int(age)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"You are an adult."</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>输入：19<br>输出：You are an adult.</p></blockquote><p><br><br></p><h2 id="6-2-while循环"><a href="#6-2-while循环" class="headerlink" title="6.2 while循环"></a>6.2 while循环</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">5</span>:</span><br><span class="line">   print(num)</span><br><span class="line">   num += <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>1<br>2<br>3<br>4<br>5</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"i am a repeater\n"</span>)</span><br><span class="line"><span class="keyword">while</span> s != <span class="string">'quit'</span></span><br><span class="line">    print(s)</span><br><span class="line">    s = input()</span><br></pre></td></tr></table></figure><blockquote><p>复读机，直到用户输入quit停止</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span></span><br><span class="line">count = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    print(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count &lt; <span class="number">0</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>5<br>4<br>3<br>2<br>1<br>0</p></blockquote><h3 id="6-2-1-在循环中使用break和continue"><a href="#6-2-1-在循环中使用break和continue" class="headerlink" title="6.2.1 在循环中使用break和continue"></a>6.2.1 在循环中使用break和continue</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = input()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"You just inputed "</span> + s)</span><br></pre></td></tr></table></figure><blockquote><p>复读机，直到输入quit</p></blockquote><p>continue不多赘述，与C语言作用相同<br><br><br></p><h2 id="6-3-用while循环来处理列表和字典"><a href="#6-3-用while循环来处理列表和字典" class="headerlink" title="6.3 用while循环来处理列表和字典"></a>6.3 用while循环来处理列表和字典</h2><hr><h3 id="6-3-1-在列表之间移动元素"><a href="#6-3-1-在列表之间移动元素" class="headerlink" title="6.3.1 在列表之间移动元素"></a>6.3.1 在列表之间移动元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">target = [<span class="string">'apple'</span>, <span class="string">'bannana'</span>, <span class="string">'peach'</span>]</span><br><span class="line">shopping_car = []</span><br><span class="line"><span class="keyword">while</span> target:</span><br><span class="line">    cur = target.pop()</span><br><span class="line">    print(<span class="string">"Buy "</span> + cur)</span><br><span class="line">    shopping_car.append(cur)</span><br><span class="line">print(<span class="string">"You have bought these:"</span>)</span><br><span class="line">print(shopping_car)</span><br><span class="line">print(<span class="string">"These not bought:"</span>)</span><br><span class="line">print(target)</span><br></pre></td></tr></table></figure><blockquote><p>Buy peach<br>Buy bannana<br>Buy apple<br>You have bought these:<br>[‘peach’, ‘bannana’, ‘apple’]<br>These not bought:<br>[]</p></blockquote><h3 id="6-3-2-删除所有列表中的特定值"><a href="#6-3-2-删除所有列表中的特定值" class="headerlink" title="6.3.2 删除所有列表中的特定值"></a>6.3.2 删除所有列表中的特定值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'peach'</span>, <span class="string">'apple'</span>, <span class="string">'apple'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">'apple'</span> <span class="keyword">in</span> fruits:</span><br><span class="line">    fruits.remove(<span class="string">'apple'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><blockquote><p>[‘orange’, ‘peach’]</p></blockquote><h3 id="6-3-3-利用输入填充字典"><a href="#6-3-3-利用输入填充字典" class="headerlink" title="6.3.3 利用输入填充字典"></a>6.3.3 利用输入填充字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cilent = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name = input(<span class="string">"Please input your name:"</span>)</span><br><span class="line">    nick_name = input(<span class="string">"Please input your nickname:"</span>)</span><br><span class="line">    cilent[nick_name] = name</span><br><span class="line">    re = input(<span class="string">"Would you like to continue? (yes/no)"</span>)</span><br><span class="line">    <span class="keyword">if</span> re == <span class="string">'no'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(cilent)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六章-输入与while循环&quot;&gt;&lt;a href=&quot;#第六章-输入与while循环&quot; class=&quot;headerlink&quot; title=&quot;第六章 输入与while循环&quot;&gt;&lt;/a&gt;第六章 输入与while循环&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(五)</title>
    <link href="/2019/07/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>/2019/07/13/Python学习笔记-五/</id>
    <published>2019-07-13T08:58:20.000Z</published>
    <updated>2019-07-13T09:02:11.634Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五章-字典"><a href="#第五章-字典" class="headerlink" title="第五章 字典"></a>第五章 字典</h1><a id="more"></a><p><br><br></p><h2 id="5-1-使用字典"><a href="#5-1-使用字典" class="headerlink" title="5.1 使用字典"></a>5.1 使用字典</h2><hr><p>在Python中，<font face="楷体">字典</font> 是一系列 <font face="楷体">键-值对</font> 。每个键都与一个值相关，可以用键值访问与之关联的值。<br>用放在<u>花括号</u>{ }中的一系列键-值对表示字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line">print(Tom[<span class="string">'gender'</span>])</span><br></pre></td></tr></table></figure></p><p>输出：</p><blockquote><p>male</p></blockquote><h3 id="5-1-1-添加键值对"><a href="#5-1-1-添加键值对" class="headerlink" title="5.1.1 添加键值对"></a>5.1.1 添加键值对</h3><p>字典是一种<b>动态结构</b>，可随时在其中添加键值对。要添加键值对，可依次指明字典名、用方括号括其键、将值赋值给它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line">Tom[<span class="string">'hobby'</span>] = <span class="string">'football'</span></span><br><span class="line">print(Tom)</span><br></pre></td></tr></table></figure></p><p>输出：</p><blockquote><p>{‘gender’: ‘male’, ‘age’: 15, ‘home’: ‘New York’, ‘hobby’: ‘football’}</p></blockquote><h3 id="5-1-2-修改字典中的值"><a href="#5-1-2-修改字典中的值" class="headerlink" title="5.1.2 修改字典中的值"></a>5.1.2 修改字典中的值</h3><p>直接赋值，不多赘述</p><h3 id="5-1-3-删除键值对"><a href="#5-1-3-删除键值对" class="headerlink" title="5.1.3 删除键值对"></a>5.1.3 删除键值对</h3><p>对于字典中不需要的信息，可以用<code>del</code>语句直接彻底删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">del</span> Tom[age]</span><br><span class="line">print(Tom)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘gender’: ‘male’, ‘home’: ‘New York’}</p></blockquote><p><br><br></p><h2 id="5-2-遍历字典"><a href="#5-2-遍历字典" class="headerlink" title="5.2 遍历字典"></a>5.2 遍历字典</h2><hr><h3 id="5-2-1-遍历字典所有信息"><a href="#5-2-1-遍历字典所有信息" class="headerlink" title="5.2.1 遍历字典所有信息"></a>5.2.1 遍历字典所有信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> Tom.items():</span><br><span class="line">   print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line">   print(<span class="string">"Value: "</span> + value)</span><br></pre></td></tr></table></figure><ul><li>要编写遍历字典的for循环，需要声明两个变量，用于存储键和值。</li><li>方法<code>items()</code>返回一个<b>键值对列表</b>。</li></ul><h3 id="5-2-2-遍历字典中所有的键"><a href="#5-2-2-遍历字典中所有的键" class="headerlink" title="5.2.2 遍历字典中所有的键"></a>5.2.2 遍历字典中所有的键</h3><p>在不需要使用字典中的值时，方法<code>keys()</code>很有用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> Tom.keys():</span><br><span class="line">   print(<span class="string">"Key: "</span> + key)</span><br></pre></td></tr></table></figure></p><blockquote><p>Key: gender<br>Key: home</p></blockquote><ul><li>keys()返回一个<b>键列表</b></li></ul><h3 id="5-2-3-遍历字典中所有的值"><a href="#5-2-3-遍历字典中所有的值" class="headerlink" title="5.2.3 遍历字典中所有的值"></a>5.2.3 遍历字典中所有的值</h3><p>同理，用方法<code>values()</code> 可以得到一个<b>值列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> Tom.values():</span><br><span class="line">   print(<span class="string">"Values: "</span> + val)</span><br></pre></td></tr></table></figure></b></p><blockquote><p>Values: male<br>Values: New York</p></blockquote><p><br><br></p><h2 id="5-3-嵌套"><a href="#5-3-嵌套" class="headerlink" title="5.3 嵌套*"></a>5.3 嵌套*</h2><hr><p>字典、元组、列表之间可以相互嵌套<br>比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">c = &#123;</span><br><span class="line">    <span class="number">1</span>: a,</span><br><span class="line">    <span class="number">2</span>: b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">20</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">c = [a, b]</span><br></pre></td></tr></table></figure><p>但需要注意：</p><ul><li>被嵌套的字典、列表、元组<u>并不是复制一套新副本进去</u>，而是将其<b>“引用”</b>被包含进去。即改变被包含的元素，原列表/元组/字典同样会改变。</li><li>被包含的简单变量不会变化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典包含列表</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">c = &#123;</span><br><span class="line">    <span class="number">1</span>: a,</span><br><span class="line">    <span class="number">2</span>: b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">print(c[<span class="number">1</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><blockquote><p>c[1] : [3, 2]<br>a : [3, 2]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表包含字典</span></span><br><span class="line">a = &#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">20</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">c = [a, b]</span><br><span class="line"></span><br><span class="line">c[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">print(c[<span class="number">0</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><blockquote><p>c[0] : {1: 100, 2: 20}<br>a : {1: 100, 2: 20}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表包含简单变量</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">a = [i, <span class="number">2</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">print(a[<span class="number">0</span>])</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><blockquote><p>a[0] : 2<br>i : 1</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第五章-字典&quot;&gt;&lt;a href=&quot;#第五章-字典&quot; class=&quot;headerlink&quot; title=&quot;第五章 字典&quot;&gt;&lt;/a&gt;第五章 字典&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(四)</title>
    <link href="/2019/07/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>/2019/07/12/Python学习笔记-四/</id>
    <published>2019-07-12T07:22:46.000Z</published>
    <updated>2019-07-12T07:30:00.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章-if语句"><a href="#第四章-if语句" class="headerlink" title="第四章 if语句"></a>第四章 if语句</h1><a id="more"></a><p><br><br></p><h2 id="4-1-条件测试"><a href="#4-1-条件测试" class="headerlink" title="4.1 条件测试"></a>4.1 条件测试</h2><hr><h3 id="4-1-1-检查是否相等"><a href="#4-1-1-检查是否相等" class="headerlink" title="4.1.1 检查是否相等"></a>4.1.1 检查是否相等</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">'bmw'</span></span><br><span class="line">print(car == <span class="string">'bmw'</span>)</span><br><span class="line">print(car == <span class="string">'byd'</span>)</span><br><span class="line">print(car != <span class="string">'byd'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>True<br>False<br>True</p></blockquote><ul><li><code>==</code> 等于</li><li><code>!=</code> 不等于</li><li><code>&gt;, &gt;=, &lt;, &lt;=</code> 大小于等于</li></ul><h3 id="4-1-2-检查多个条件"><a href="#4-1-2-检查多个条件" class="headerlink" title="4.1.2 检查多个条件"></a>4.1.2 检查多个条件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">'bmw'</span></span><br><span class="line">phone = <span class="string">'iphone'</span></span><br><span class="line">print(car == <span class="string">'bmw'</span> <span class="keyword">and</span> phone == <span class="string">'iphone'</span>)</span><br><span class="line">print(car == <span class="string">'byd'</span> <span class="keyword">or</span> phone == <span class="string">'samsung'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>True<br>False</p></blockquote><ul><li><code>and</code> 逻辑且</li><li><code>or</code> 逻辑或</li></ul><h3 id="4-1-3-检查特定值是否在列表中"><a href="#4-1-3-检查特定值是否在列表中" class="headerlink" title="4.1.3 检查特定值是否在列表中"></a>4.1.3 检查特定值是否在列表中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">print(<span class="number">30</span> <span class="keyword">in</span> nums)</span><br><span class="line">print(<span class="number">40</span> <span class="keyword">not</span> <span class="keyword">in</span> nums)</span><br></pre></td></tr></table></figure><blockquote><p>True<br>True</p></blockquote><ul><li><code>in</code> 在列表中</li><li><code>not in</code>不在列表中</li></ul><h3 id="4-1-4-布尔表达式"><a href="#4-1-4-布尔表达式" class="headerlink" title="4.1.4 布尔表达式"></a>4.1.4 布尔表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span></span><br><span class="line">flag = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>不多赘述<br><br><br></p><h2 id="4-2-if语句"><a href="#4-2-if语句" class="headerlink" title="4.2 if语句"></a>4.2 if语句</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"You are old enough"</span>)</span><br><span class="line">print(<span class="string">"You can vote now"</span>)</span><br></pre></td></tr></table></figure><p>没有输出结果<br><br>Python的if语句不需要加括号。<b><u>注意冒号</u></b></p><h3 id="4-2-1-if-else语句"><a href="#4-2-1-if-else语句" class="headerlink" title="4.2.1 if-else语句"></a>4.2.1 if-else语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"You are old enough"</span>)</span><br><span class="line">print(<span class="string">"You can vote now"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"You are too young"</span>)</span><br><span class="line">print(<span class="string">"Please wait for "</span> + str(<span class="number">18</span>-age) + <span class="string">" year(s)"</span>)</span><br></pre></td></tr></table></figure><p>输出结果:</p><blockquote><p>You are too young<br>Please wait for 3 year(s)</p></blockquote><h3 id="4-2-2-if-elif-else语句"><a href="#4-2-2-if-elif-else语句" class="headerlink" title="4.2.2 if-elif-else语句"></a>4.2.2 if-elif-else语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"You are an adult"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">12</span>:</span><br><span class="line">print(<span class="string">"You are a teenager"</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">print(<span class="string">"You are a child"</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>You are a teenager</p></blockquote><h3 id="4-2-3-检查列表是否为空"><a href="#4-2-3-检查列表是否为空" class="headerlink" title="4.2.3 检查列表是否为空"></a>4.2.3 检查列表是否为空</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="keyword">if</span> nums:</span><br><span class="line">print(<span class="string">"list is not empty"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"list is empty"</span>)</span><br></pre></td></tr></table></figure><p>输出为：</p><blockquote><p>list is empty</p></blockquote><h3 id="4-2-4-if语句与布尔表达式"><a href="#4-2-4-if语句与布尔表达式" class="headerlink" title="4.2.4 if语句与布尔表达式"></a>4.2.4 if语句与布尔表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    print(<span class="string">"YES"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"NO"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>YES</p></blockquote><p>不多赘述</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第四章-if语句&quot;&gt;&lt;a href=&quot;#第四章-if语句&quot; class=&quot;headerlink&quot; title=&quot;第四章 if语句&quot;&gt;&lt;/a&gt;第四章 if语句&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(三)</title>
    <link href="/2019/07/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>/2019/07/12/Python学习笔记-三/</id>
    <published>2019-07-12T06:24:40.000Z</published>
    <updated>2019-07-12T07:33:43.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-操作列表"><a href="#第三章-操作列表" class="headerlink" title="第三章 操作列表"></a>第三章 操作列表</h1><a id="more"></a><p><br><br></p><h2 id="3-1-遍历整个列表"><a href="#3-1-遍历整个列表" class="headerlink" title="3.1 遍历整个列表"></a>3.1 遍历整个列表</h2><hr><p>我们可以用for循环遍历整个列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br><span class="line">   print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>apple<br>banana<br>orange</p></blockquote><ul><li><b>不要忘了<font size="5"><u>冒号</u></font></b></li></ul><h3 id="3-1-1-深入研究循环"><a href="#3-1-1-深入研究循环" class="headerlink" title="3.1.1 深入研究循环"></a>3.1.1 深入研究循环</h3><p> ① 在上述循环中，程序先读到这一行代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br></pre></td></tr></table></figure></p><p>这让Python从列表中获取第一个元素’apple’ ，<b>将其赋值给 i </b><br><br><br></p><p>② 接着程序执行循环体中的语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(i)</span><br></pre></td></tr></table></figure></p><p>由此将i的值（即’apple’）打印出来<br><br><br>③ 程序总共重复上述步骤三次，结束循环<br><br><br></p><ul><li>需要注意的是，循环过程中，是<u>将列表的元素赋值给循环标记</u>（i）的</li></ul><p>如下代码可以体现这一点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br><span class="line">    i = i.title()</span><br><span class="line">    print(i)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>Apple<br>Banana<br>Orange<br>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p><b>原列表中的元素并没有因i的改变而发生变化</b></p><h3 id="3-1-2-在循环中执行更多操作"><a href="#3-1-2-在循环中执行更多操作" class="headerlink" title="3.1.2 在循环中执行更多操作"></a>3.1.2 在循环中执行更多操作</h3><p>在一次迭代中可以执行无数句语句，只需将它们按相同格式缩进即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br><span class="line">    print(i)</span><br><span class="line">    print(<span class="string">"I love "</span> + i.title())</span><br><span class="line">print(<span class="string">"I love them all!"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>apple<br>I love Apple<br>banana<br>I love Banana<br>orange<br>I love Orange<br>I love them all!</p></blockquote><p><br><br></p><h2 id="3-2-创建数值列表"><a href="#3-2-创建数值列表" class="headerlink" title="3.2 创建数值列表"></a>3.2 创建数值列表</h2><hr><h3 id="3-2-1-使用函数range"><a href="#3-2-1-使用函数range" class="headerlink" title="3.2.1 使用函数range()"></a>3.2.1 使用函数range()</h3><p><code>range()</code> 函数可以生产一系列连续的数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>2<br>3</p></blockquote><ul><li>range(a, b)生成的区间为 <u> a ~ (b-1) </u></li><li><b>range()生成的不是列表</b></li></ul><p>range()函数还可以<b>指定步长</b>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>1<br>3<br>5<br>7<br>9</p></blockquote><h3 id="3-2-2-使用list-和range-函数创建数值列表"><a href="#3-2-2-使用list-和range-函数创建数值列表" class="headerlink" title="3.2.2 使用list()和range()函数创建数值列表"></a>3.2.2 使用list()和range()函数创建数值列表</h3><p>可以使用函数<code>list()</code>将range()转化成数字列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(range(<span class="number">1</span>, <span class="number">4</span>)))</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>[1, 2, 3]</p></blockquote><h3 id="3-2-3-max-，min-，sum-函数"><a href="#3-2-3-max-，min-，sum-函数" class="headerlink" title="3.2.3 max()，min()，sum()函数"></a>3.2.3 max()，min()，sum()函数</h3><p>将数字列表名称作为函数<code>max()</code>的参数，返回列表中的最大值<br>同理<code>min()</code>返回最小值，<code>sum()</code>返回列表所有元素的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line">print(max(nums))</span><br><span class="line">print(min(nums))</span><br><span class="line">print(sum(nums))</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>10<br>1<br>16</p></blockquote><h3 id="3-2-4-列表解析"><a href="#3-2-4-列表解析" class="headerlink" title="3.2.4 列表解析*"></a>3.2.4 列表解析<font size="6">*</font></h3><p>用前面介绍的方式形成一个平方列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">   squares.append(i**<span class="number">2</span>)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</p></blockquote><p>使用列表解析，可以一行之内完成上述代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></p><p>输出结果同上<br><br><br></p><ol><li>使用这种语法, 首先指定一个描述性的列表名，如square；</li><li>然后指定一个左方括号，并定义一个表达式。在这里表达式为 i ** 2</li><li>接着编写一个for循环，给表达式提供值（此处没有冒号），并加上右方括号</li></ol><p><br><br></p><h2 id="3-3-使用列表的一部分：切片"><a href="#3-3-使用列表的一部分：切片" class="headerlink" title="3.3 使用列表的一部分：切片"></a>3.3 使用列表的一部分：切片</h2><hr><p>要创建切片，可指定要使用的<u>第一个元素和最后一个元素的索引</u>，<b>和range一样，最后一个元素不取</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits[<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’]</p></blockquote><ul><li>如果没有指定起始索引，如 fruit[:2]，则默认从列表开头开始</li><li>同理如果没有指定结束为止，如 fruit[2:]，则默认到列表尾结束</li><li>fruit[-2:] 表示从倒数第二个到最后一个的切片</li></ul><p><br><br></p><h2 id="3-4-复制列表"><a href="#3-4-复制列表" class="headerlink" title="3.4 复制列表"></a>3.4 复制列表</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">your_fruits = my_fruits  <span class="comment">#尽量不要这么复制</span></span><br><span class="line">print(your_fruits)</span><br></pre></td></tr></table></figure><blockquote><p>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p>可直接将列表名赋值给新列表，以达到复制的效果。<font size="5"><b> <u>但尽量不要这么做！</u></b></font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">your_fruits = my_fruits</span><br><span class="line">my_fruits.append(<span class="string">'peach'</span>)</span><br><span class="line">print(your_fruits)</span><br></pre></td></tr></table></figure></p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘peach’]</p></blockquote><p>可以发现，在将my_fruits赋值给your_fruit后，在my列表后添加了新元素，your列表后也同样出现了这个新元素.<br>说明，被赋值的新列表和原列表用的同一个列表，新列表 是跟着 原列表 一起改变的<b>（类似于C++里的引用）</b></p><p><font size="5"><b>*</b></font> 比较正确规范的做法是<b><u>将切片复制给新列表</u></b>&lt;/u&gt;,这样是将新的副本复制给新列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">your_fruits = my_fruits[:]</span><br><span class="line">my_fruits.append(<span class="string">'peach'</span>)</span><br><span class="line">print(your_fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p>新列表并没有发生改变</p><h2 id="3-5-元组"><a href="#3-5-元组" class="headerlink" title="3.5 元组"></a>3.5 元组</h2><hr><p>列表是可以修改的。然而有时候需要创建一系列不可修改的元素，<font face="楷体" size="3"><u>元组</u> </font>可以满足这种需求。</p><h3 id="3-5-1-定义元组"><a href="#3-5-1-定义元组" class="headerlink" title="3.5.1 定义元组"></a>3.5.1 定义元组</h3><p>元组使用<b>圆括号</b>来标识，同样可以用索引来访问其值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dim = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">print(dim[<span class="number">0</span>])</span><br><span class="line">print(dim[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><blockquote><p>200<br>50</p></blockquote><h3 id="3-5-2-遍历元组"><a href="#3-5-2-遍历元组" class="headerlink" title="3.5.2 遍历元组"></a>3.5.2 遍历元组</h3><p>和遍历链表一样，不多赘述</p><h3 id="3-5-3-修改元组变量"><a href="#3-5-3-修改元组变量" class="headerlink" title="3.5.3 修改元组变量"></a>3.5.3 修改元组变量</h3><p>虽然不能修改元组的元素，但可以给<u>存储元组的变量</u>(比如此处的dim)赋值。因此，需要通过<strong>重新定义</strong>的方法修改元组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dim = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">print(dim)</span><br><span class="line">dim = (<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">print(dim)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>(200, 50)<br>(2, 5)</p></blockquote><p><strong>给元组变量赋值的操作是合法的</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三章-操作列表&quot;&gt;&lt;a href=&quot;#第三章-操作列表&quot; class=&quot;headerlink&quot; title=&quot;第三章 操作列表&quot;&gt;&lt;/a&gt;第三章 操作列表&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(二)</title>
    <link href="/2019/07/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>/2019/07/11/Python学习笔记-二/</id>
    <published>2019-07-11T06:42:23.000Z</published>
    <updated>2019-07-12T07:37:49.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-列表简介"><a href="#第二章-列表简介" class="headerlink" title="第二章 列表简介"></a>第二章 列表简介</h1><a id="more"></a><p><br><br></p><h2 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h2><hr><p><font face="楷体" size="3"><u>列表</u> </font>由一系列元素按特定顺序排列组成。</p><p>在Python中，用方括号（ [ ] ）来表示列表，并用逗号分隔其中的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>如果将列表打印出来，Python将打印列表的内部表示，包括方括号。<br>输出结果：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><h3 id="2-1-1-访问列表元素"><a href="#2-1-1-访问列表元素" class="headerlink" title="2.1.1 访问列表元素"></a>2.1.1 访问列表元素</h3><p>列表是有序集合，要访问列表元素，只需像C语言中的数组一样，将元素的索引或位置表示出来即可。<br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>apple</p></blockquote><ul><li>可以发现列表的索引与数组一样都是从0开始的。</li><li>但Python还提供了一种特殊语法，索引-1返回倒数第一个元素。<u>所以一个长度为a的列表索引取值范围为：[ -a, a-1]  </u><br><br> <br></li></ul><h2 id="2-2-修改、添加和删除元素"><a href="#2-2-修改、添加和删除元素" class="headerlink" title="2.2 修改、添加和删除元素"></a>2.2 修改、添加和删除元素</h2><hr><h3 id="2-1-1-修改"><a href="#2-1-1-修改" class="headerlink" title="2.1.1 修改"></a>2.1.1 修改</h3><p>可直接用赋值的方法修改列表的元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">"peach"</span></span><br><span class="line">print(fruits[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><h3 id="2-2-2-添加"><a href="#2-2-2-添加" class="headerlink" title="2.2.2 添加"></a>2.2.2 添加</h3><h4 id="1-在列表末尾添加元素"><a href="#1-在列表末尾添加元素" class="headerlink" title="1.在列表末尾添加元素"></a>1.在列表末尾添加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits.append(<span class="string">'peach'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘peach’]</p></blockquote><p>方法<code>append()</code>会将参数的元素添加到列表末尾，而不影响其他元素</p><h4 id="2-在列表中插入元素"><a href="#2-在列表中插入元素" class="headerlink" title="2.在列表中插入元素"></a>2.在列表中插入元素</h4><p>使用<code>insert()</code>可在列表中的任何位置插入新的元素。<b>为此需要指定新元素和索引的值。</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits.insert(<span class="number">2</span>,<span class="string">'peach'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><ul><li>在此示例中，insert(2, ‘peach’) 将新元素: ‘peach’（第二个参数）插入到原列表的第2个位置（第一个参数）；同时，从原来第2个位置往后的所有元素后移一位。</li></ul><h3 id="2-2-3-删除"><a href="#2-2-3-删除" class="headerlink" title="2.2.3 删除"></a>2.2.3 删除</h3><h4 id="1-使用del语句删除元素"><a href="#1-使用del语句删除元素" class="headerlink" title="1.使用del语句删除元素"></a>1.使用del语句删除元素</h4><p>如果<u>已知所需删除的元素的位置</u>，可以使用<code>del语句</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">del</span> fruits[<span class="number">0</span>]</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘banana’, ‘orange’]</p></blockquote><h4 id="2-使用方法pop-删除元素"><a href="#2-使用方法pop-删除元素" class="headerlink" title="2.使用方法pop()删除元素"></a>2.使用方法pop()删除元素</h4><p>有时候需要<u>将元素从列表中删除，并接着使用它的值。</u></p><p>① 方法<code>pop()</code>可删除列表末尾的元素，并返回其值（类比弹出栈的栈顶元素）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line">popped_fruit = fruits.pop()</span><br><span class="line">print(popped_fruit)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]<br>orange<br>[‘apple’, ‘banana’]</p></blockquote><p>② pop()可以在括号中加入参数，表示要删除的元素的索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"></span><br><span class="line">popped_fruit = fruits.pop(<span class="number">2</span>)</span><br><span class="line">print(popped_fruit)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>orange</p></blockquote><h4 id="3-根据值使用remove方法删除元素"><a href="#3-根据值使用remove方法删除元素" class="headerlink" title="3.根据值使用remove方法删除元素"></a>3.根据值使用remove方法删除元素</h4><p>有时候，我们<u>不知道所需删除的元素的具体位置，只知道需要删除的元素的值</u>，可以使用方法<code>remove()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.remove(<span class="string">'apple'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘apple’]<br>[‘banana’, ‘orange’, ‘apple’]</p></blockquote><p><font size="4" face="黑体"><strong>注意</strong>: </font>  remove只能删除第一个指定的元素<br><br><br></p><h2 id="2-3-组织列表"><a href="#2-3-组织列表" class="headerlink" title="2.3 组织列表"></a>2.3 组织列表</h2><hr><h3 id="2-3-1-使用方法sort-对列表永久性排序"><a href="#2-3-1-使用方法sort-对列表永久性排序" class="headerlink" title="2.3.1 使用方法sort()对列表永久性排序"></a>2.3.1 使用方法sort()对列表永久性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.sort()</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘banana’, ‘orange’, ‘apple’]<br>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p>使用sort()之后，列表元素的顺序发生了永久性的变化</p><ul><li>如果要按相反顺序排序列表，可以向sort()方法传递参数<code>reverse = True</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">fruits.sort(reverse = <span class="literal">True</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为：</p><blockquote><p>[‘orange’, ‘banana’, ‘apple’]</p></blockquote><h3 id="2-3-2-使用函数sorted-对列表暂时性排序"><a href="#2-3-2-使用函数sorted-对列表暂时性排序" class="headerlink" title="2.3.2 使用函数sorted()对列表暂时性排序"></a>2.3.2 使用函数sorted()对列表暂时性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Here is the original list:"</span>)</span><br><span class="line">print(fruits)</span><br><span class="line">print(<span class="string">"\nHere is the sorted list:"</span>)</span><br><span class="line">print(sorted(fruits))</span><br><span class="line">print(<span class="string">"\nHere is the original list again:"</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>Here is the original list:<br>[‘banana’, ‘orange’, ‘apple’]</p><p>Here is the sorted list:<br>[‘apple’, ‘banana’, ‘orange’]</p><p>Here is the original list again:<br>[‘banana’, ‘orange’, ‘apple’]</p></blockquote><p>可见使用sorted后，列表元素的顺序并没有发生改变，sorted函数返回的是<b>排序过的新列表</b></p><ul><li>同样，可以向sorted()函数传递参数<code>reverse = True</code> 使其反向排序</li></ul><h3 id="2-3-3-倒着打印列表"><a href="#2-3-3-倒着打印列表" class="headerlink" title="2.3.3 倒着打印列表"></a>2.3.3 倒着打印列表</h3><p>翻转列表元素的排列顺序，可以使用方法<code>reverse()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">fruits.reverse()</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘orange’, ‘banana’]</p></blockquote><p>可见方法reverse()永久性地改变了列表元素的排列顺序，<b>翻转了原来的列表元素顺序</b></p><h3 id="2-3-4-确定列表的长度"><a href="#2-3-4-确定列表的长度" class="headerlink" title="2.3.4 确定列表的长度"></a>2.3.4 确定列表的长度</h3><p>使用函数<code>len()</code>可以快速得到列表的长度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(len(fruits))</span><br></pre></td></tr></table></figure></p><p>输出结果为:</p><blockquote><p>3</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章-列表简介&quot;&gt;&lt;a href=&quot;#第二章-列表简介&quot; class=&quot;headerlink&quot; title=&quot;第二章 列表简介&quot;&gt;&lt;/a&gt;第二章 列表简介&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(一)</title>
    <link href="/2019/07/10/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>/2019/07/10/Python学习笔记-一/</id>
    <published>2019-07-10T05:58:37.000Z</published>
    <updated>2019-07-11T02:47:32.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-变量和简单数据类型"><a href="#第一章-变量和简单数据类型" class="headerlink" title="第一章 变量和简单数据类型"></a>第一章 变量和简单数据类型</h1><a id="more"></a><p><br><br></p><h2 id="1-1-变量的使用和命名"><a href="#1-1-变量的使用和命名" class="headerlink" title="1.1 变量的使用和命名"></a>1.1 变量的使用和命名</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"Hello World"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p><b>运行结果：</b></p><blockquote><p>Hello World</p></blockquote><p><b>变量命名规则：</b></p><ul><li>变量名只能包含<b><u>字母、数字、下划线</u></b> </li><li>变量名可以字母或者下划线打头，<u>但不能以数字打头</u></li><li>不能将Python关键字当做变量名<br><br><br></li></ul><h2 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h2><hr><p> <b>字符串</b> 就是一新系列字符。在Python中，用引号括起来的都是字符串。其中引号可以是<u>单引号</u>，也可是<u>双引号</u>，<strong><u>这使得你能够在字符串中包含引号和撇号</u></strong>。<br> 例如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"This's a string"</span></span><br><span class="line"><span class="string">'This is also a string'</span></span><br><span class="line"><span class="string">'I told you, "Python is the best in the world!" '</span></span><br><span class="line"><span class="string">"It's beautiful."</span></span><br></pre></td></tr></table></figure></p><h3 id="1-2-1-使用方法修改字符串的大小写"><a href="#1-2-1-使用方法修改字符串的大小写" class="headerlink" title="1.2.1 使用方法修改字符串的大小写"></a>1.2.1 使用方法修改字符串的大小写</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"ada lovelace"</span></span><br><span class="line">print(name.title())</span><br><span class="line">name = <span class="string">"ADa"</span></span><br><span class="line">print(name.title())</span><br><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br></pre></td></tr></table></figure><p> 输出结果：</p><blockquote><p>Ada Lovelace<br>Ada<br>ADA<br>ada</p></blockquote><p><font face="楷体" size="3"><u>方法</u> </font>是Python可对数据进行的操作。</p><ul><li>方法<code>title()</code>以首字母大写的方式显示每个单词。</li><li>方法<code>upper()</code>以大写显示所有字母字符</li><li>方法<code>lower()</code>以小写显示所有字符字母</li></ul><h3 id="1-2-2-合并（拼接）字符串"><a href="#1-2-2-合并（拼接）字符串" class="headerlink" title="1.2.2 合并（拼接）字符串"></a>1.2.2 合并（拼接）字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">"ada"</span></span><br><span class="line">second_name = <span class="string">"lovelace"</span></span><br><span class="line">full_name = first_name + <span class="string">" "</span> + second_name</span><br><span class="line">print(full_name)</span><br><span class="line">print(full_name*<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>ada lovelace<br>ada lovelaceada lovelaceada lovelace</p></blockquote><p>Python用 <strong>加号 (+)和乘号 (*)</strong> 来合并字符串。这种合并方法称为 <em>拼接</em> 。</p><p><em>e.g:</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接上代码</span></span><br><span class="line">message = <span class="string">"Hello, "</span> + full_name.title() + <span class="string">"!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>Hello, Ada Lovelace!</p></blockquote><h3 id="1-2-3-删除空白"><a href="#1-2-3-删除空白" class="headerlink" title="1.2.3 删除空白"></a>1.2.3 删除空白</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">" python "</span></span><br><span class="line">print(s.lstrip())</span><br><span class="line">print(s.rstrip())</span><br><span class="line">print(s.strip())</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>python·  （·代表空格）<br>·python<br>python<br>·python·</p></blockquote><p><em>空白</em> 泛指任何非打印字符，包括<u>空格、制表符和换行符</u>。<br><br></p><ul><li>方法<code>strip()</code>删除字符串首尾空格。</li><li>方法<code>lstrip()</code>删除字符串首空格。</li><li>方法<code>rstrip()</code>删除字符串尾空格。</li><li>可以发现，在使用过这些方法后，原字符串并没有发生相应的变化<br><br><br></li></ul><h2 id="1-3-数字"><a href="#1-3-数字" class="headerlink" title="1.3 数字"></a>1.3 数字</h2><hr><h3 id="1-3-1-整数"><a href="#1-3-1-整数" class="headerlink" title="1.3.1 整数"></a>1.3.1 整数</h3><p>Python使用两个乘号表示乘法运算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure></p><h3 id="1-3-2-浮点数"><a href="#1-3-2-浮点数" class="headerlink" title="1.3.2 浮点数"></a>1.3.2 浮点数</h3><p>这个没什么好讲的</p><h3 id="1-3-3-函数str"><a href="#1-3-3-函数str" class="headerlink" title="1.3.3 函数str()"></a>1.3.3 函数str()</h3><p>在字符串中需要用到数字变量的值时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">print(<span class="string">"Happy "</span> + age + <span class="string">"th Birthday"</span>)  <span class="comment">#这种写法是错误的</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">返回错误报告：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/Pytest/1.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="string">"Happy "</span> + age + <span class="string">"th Birthday"</span>)</span><br><span class="line">  TypeError: can only concatenate str (<span class="keyword">not</span> <span class="string">"int"</span>) to str</span><br></pre></td></tr></table></figure></p><p>之所以会出现这样的错误，是因为<u>类型不匹配</u><br>Python无法将 int 和 str 类型的变量拼接在一起</p><p>为此可以调用<code>str()</code>函数，将非字符串变量表示为字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">print(<span class="string">"Happy "</span> + str(age) + <span class="string">"th Brithday"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>Happy 25th Birthday</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-变量和简单数据类型&quot;&gt;&lt;a href=&quot;#第一章-变量和简单数据类型&quot; class=&quot;headerlink&quot; title=&quot;第一章 变量和简单数据类型&quot;&gt;&lt;/a&gt;第一章 变量和简单数据类型&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>随便写写</title>
    <link href="/2019/06/15/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    <id>/2019/06/15/随便写写/</id>
    <published>2019-06-15T06:35:00.000Z</published>
    <updated>2019-07-12T06:31:45.880Z</updated>
    
    <content type="html"><![CDATA[<p><b>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</b></p><script type="math/tex; mode=display">f'(x_0)=\lim_{\Delta x\to 0} \frac{f(x_0+\Delta x) - f(x_0)}{\Delta x}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;b&gt;使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑&lt;/b&gt;&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f&#39;(x_0)=\lim_{\Delta x\to 0} \frac
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/06/14/hello-world/"/>
    <id>/2019/06/14/hello-world/</id>
    <published>2019-06-14T05:26:58.678Z</published>
    <updated>2019-06-15T09:18:04.238Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
