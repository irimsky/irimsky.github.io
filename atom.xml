<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Irimsky</title>
  
  <subtitle>爱我所爱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-07-28T12:42:30.381Z</updated>
  <id>/</id>
  
  <author>
    <name>Irimsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性回归的正规方程法</title>
    <link href="/2019/07/28/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B%E6%B3%95/"/>
    <id>/2019/07/28/线性回归的正规方程法/</id>
    <published>2019-07-28T10:07:53.000Z</published>
    <updated>2019-07-28T12:42:30.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h1><hr><p>正规方程是通过求解下面的方程来找出使得代价函数最小的参数的： $\frac{\partial}{\partial \theta_j} J(\theta_i) = 0$</p><p>假设我们的训练集特征矩阵为 $X$（包含了 𝑥0 = 1）并且我们的训练集结果为向量 $y$，则利<br>用正规方程解出向量 <script type="math/tex">\theta = (X^TX)^{-1}X^Ty</script><br><a id="more"></a><br>比如如下的数据：<br><img src="https://img-blog.csdnimg.cn/20190728183729893.png" alt="在这里插入图片描述"></p><script type="math/tex; mode=display">X =  \begin{bmatrix}  1 & 2104 & 5 & 1 & 45\\  1 & 1416 & 3 & 2 & 40\\  1 & 1534 & 3 & 2 & 30 \\  1 & 852 & 2 & 1 & 36 & \\  \end{bmatrix}</script><script type="math/tex; mode=display">y = \begin{bmatrix}  460\\  232\\  315\\  178\\  \end{bmatrix}</script><p><br><br><br><b>正规方程的Python实现：</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalEqn</span><span class="params">(X, y)</span>:</span>    </span><br><span class="line">theta = np.linalg.inv(X.T@X)@X.T@y <span class="comment">#X.T@X等价于 X.T.dot(X) </span></span><br><span class="line"><span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="与梯度下降比较"><a href="#与梯度下降比较" class="headerlink" title="与梯度下降比较"></a>与梯度下降比较</h1><hr><div class="table-container"><table><thead><tr><th>梯度下降</th><th>正规方程</th></tr></thead><tbody><tr><td>需要选择学习率𝛼</td><td>不需要</td></tr><tr><td>需要多次迭代</td><td>一次运算得出</td></tr><tr><td>当特征数量𝑛大时也能较好适用</td><td>需要计算$(X^TX)^-1$。如果特征数量𝑛较大则 运算代价大，<br>因为矩阵逆的计算时间复杂度 为𝑂(𝑛3) </td></tr><tr><td>适用于各种类型的模型</td><td>只适用于线性模型，不适合逻辑回归模型等其他模型 </td></tr></tbody></table></div><h1 id="矩阵不可逆时的情况"><a href="#矩阵不可逆时的情况" class="headerlink" title="矩阵不可逆时的情况"></a>矩阵不可逆时的情况</h1><hr><p>$(X^TX)$会出现不可逆的情况。<br>原因可能有：</p><ol><li><b>有多余的特征变量成了线性相关关系</b><br>比如一个特征是厘米单位的长度，而另一个特征是毫米单位的长度，两列数据在自乘之后成了100倍的线性关系。<br>这时就需要把多余的特征量删除。</li><li><b>有太多的特征量（m &lt;&lt; n）</b> <em>有时还会导致‘过拟合(overfit)’的现象</em><br>比如m = 10, n = 100时的情况，则需要在10个训练样本中找出101个参数，这是一种比较复杂且容易出问题的任务。<br>解决方法有：<br>①删除一些特征量<br>②<font color="blue"><b>正则化</b></font><br><br></li></ol><h1 id="附：正则方程推导过程"><a href="#附：正则方程推导过程" class="headerlink" title="附：正则方程推导过程"></a>附：正则方程推导过程</h1><hr><script type="math/tex; mode=display">J(\theta_0,\theta_1,\dots,\theta_n) = \frac {1}{2m}\sum_{i=1}^{m}\ (h_\theta(x^{(i)})  - y^{(i)})^2</script><p>转化为矩阵表示则有：</p><script type="math/tex; mode=display">J(\theta) = \frac{1}{2} (X\theta-y)^T(X\theta-y)</script><script type="math/tex; mode=display">\ \ \ \ \ \ = \frac{1}{2} (\theta^TX^T-y^T)(X\theta-y)</script><script type="math/tex; mode=display">\ \ \ \ \ \ = \frac{1}{2} (\theta^TX^TX\theta-\theta^TX^Ty-y^TX\theta + y^Ty)</script><p><br><br><br>接下来对$\theta$求偏导。要用到几个矩阵求导法则：<br>$\frac{dAB}{dB} = A^T$、$\frac{dA^TXA}{dX}=2AX$</p><p>所以有：</p><script type="math/tex; mode=display">\frac{\partial}{\partial \theta} J(\theta) = \frac{1}{2}(2X^TX\theta - X^Ty -(y^TX)^T+0)</script><script type="math/tex; mode=display">= (X^TX\theta - X^Ty)</script><p>令其=0，可得：</p><script type="math/tex; mode=display">\theta = (X^TX)^{-1}X^Ty</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正规方程&quot;&gt;&lt;a href=&quot;#正规方程&quot; class=&quot;headerlink&quot; title=&quot;正规方程&quot;&gt;&lt;/a&gt;正规方程&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;正规方程是通过求解下面的方程来找出使得代价函数最小的参数的： $\frac{\partial}{\partial \theta_j} J(\theta_i) = 0$&lt;/p&gt;
&lt;p&gt;假设我们的训练集特征矩阵为 $X$（包含了 𝑥0 = 1）并且我们的训练集结果为向量 $y$，则利&lt;br&gt;用正规方程解出向量 &lt;script type=&quot;math/tex&quot;&gt;\theta = (X^TX)^{-1}X^Ty&lt;/script&gt;&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="梯度下降" scheme="/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
      <category term="正规方程" scheme="/tags/%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多元梯度下降</title>
    <link href="/2019/07/24/%E5%A4%9A%E5%85%83%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>/2019/07/24/多元梯度下降/</id>
    <published>2019-07-24T13:45:09.000Z</published>
    <updated>2019-07-28T12:40:57.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h1><hr><p><img src="https://s2.ax1x.com/2019/07/24/eVgGQA.png" alt="在这里插入图片描述"><br>- 符号解释：</p><p>$n$：特征的个数<br>$x^{(i)}$：第i个训练样本<br>$x^{(i)}_{j}$：第$i$个训练样本的第$j$个特征值<br><a id="more"></a><br>预测函数：</p><script type="math/tex; mode=display">h_\theta(x) = \theta_0 +\theta_1x_1 + \theta_2x_2 + ...+\theta_nx_n</script><p>为了方便，我们定义$x_0=1$</p><script type="math/tex; mode=display">x = \begin{bmatrix} x_0\\x_1\\x_2\\\vdots\\x_n\end{bmatrix}</script><script type="math/tex; mode=display">\theta = \begin{bmatrix} \theta_0\\\theta_1\\\theta_2\\\vdots\\\theta_n\end{bmatrix}</script><p>则有<script type="math/tex">h_\theta(x) = \theta_0 x_0+\theta_1x_1 + \theta_2x_2 + ...+\theta_nx_n</script></p><script type="math/tex; mode=display">= \theta^T·x\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><h1 id="多元梯度下降"><a href="#多元梯度下降" class="headerlink" title="多元梯度下降"></a>多元梯度下降</h1><hr><p>预测函数：<script type="math/tex">h_\theta(x) = \theta^T·x =\theta_0 x_0+\theta_1x_1 + \theta_2x_2 + ...+\theta_nx_n</script><br>代价函数：<script type="math/tex">J(\theta_0,\theta_1,\dots,\theta_n) = \frac{1}{2m}\sum_{i=1}^{m}{(h_\theta(x^{(i)})-y^{(i)})^2}</script></p><p>梯度下降算法：</p><script type="math/tex; mode=display">Repeat\{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j}J(\theta_0, \theta_1,\dots,\theta_n)  \ \ \  for\ j = 0,1,\dots,n</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><p><br><br><br>求导得：</p><script type="math/tex; mode=display">Repeat\{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_j := \theta_j - \alpha \frac {1}{m} \sum ^{m}_{i=1}(h_\theta(x^{(i)})-y^{(i)})·x_j^{(i)}</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><p><br><br></p><h1 id="梯度下降法实践1：特征缩放"><a href="#梯度下降法实践1：特征缩放" class="headerlink" title="梯度下降法实践1：特征缩放"></a>梯度下降法实践1：特征缩放</h1><hr><p>在我们面对多维特征问题的时候，我们要保证这些特征都具有相近的尺度，这将帮助梯<br>度下降算法更快地收敛。</p><p>比如以房价问题为例，假设我们使用两个特征，房屋的尺寸和房间的数量，尺寸的值为 0<br>2000 平方英尺，而房间数量的值则是 0-5，以两个参数分别为横纵坐标，绘制代价函数的等<br>高线图能，<b>看出图像会<font color="gren">显得很扁</font>，梯度下降算法<font color="red">需要非常多次的迭代</font>才能收敛。 </b></p><p><img src="https://s2.ax1x.com/2019/07/24/eVg3zd.png" alt="在这里插入图片描述"><br><br><br><b>特征缩放</b>是一种有效的解决方法：<u>尝试将所有特征的尺度都尽量缩放到-1 到 1 之间</u>。如图：<br><img src="https://s2.ax1x.com/2019/07/24/eVgJsI.png" alt="在这里插入图片描述"><br><b>最简单的方法是令<script type="math/tex">x_n = \frac{x_n - \mu_n}{s_n}</script><br><br><br>其中，$\mu_n$是<b>平均值</b>，$s_n$是<b>标准差</b>，或者<b>极差（最大值减最小值）。</b></b></p><p><br></p><h1 id="梯度下降法实践2-学习率-alpha"><a href="#梯度下降法实践2-学习率-alpha" class="headerlink" title="梯度下降法实践2:  学习率$\alpha$"></a>梯度下降法实践2:  学习率$\alpha$</h1><hr><p>梯度下降算法收敛所需要的迭代次数根据模型的不同而不同，我们不能提前预知，我们<br><b>可以绘制迭代次数和代价函数的图表来观测算法需要几次迭代趋于收敛。</b><br><img src="https://s2.ax1x.com/2019/07/24/eVg1RH.png" alt="在这里插入图片描述"><br>$J(\theta)$应该在每次迭代后都减少。<br>我们也可以设置：<b>当一次迭代后减少的值小于特定阈值时停止。</b></p><p>梯度下降算法的每次迭代受到学习率的影响</p><ul><li>如果学习率𝑎过小，则达到收敛所需的迭代次数会非常高；</li><li>如果学习率𝑎过大，每次迭代可能不会减小代价函数，可能会越过局部最小值导致无法收敛。</li></ul><p>通常使用这些学习率：<br>𝛼 = 0.01，0.03，0.1，0.3，1，3，10 </p><h1 id="Python代码实现"><a href="#Python代码实现" class="headerlink" title="Python代码实现"></a>Python代码实现</h1><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'ex1data2.txt'</span>, names=[<span class="string">'size'</span>, <span class="string">'rooms'</span>, <span class="string">'price'</span>])</span><br><span class="line"><span class="comment"># print(df.head())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_feature</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> df.apply(<span class="keyword">lambda</span> column: (column - column.mean()) / column.std())<span class="comment">#特征缩放</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = normalize_feature(df)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_X</span><span class="params">(df)</span>:</span></span><br><span class="line">    ones = pd.DataFrame(&#123;<span class="string">'ones'</span>: np.ones(len(df))&#125;)</span><br><span class="line">    data = pd.concat([ones, df], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data.iloc[:, :<span class="number">-1</span>].as_matrix()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_y</span><span class="params">(df)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.array(df.iloc[:, <span class="number">-1</span>].as_matrix())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = get_X(df)</span><br><span class="line">y = get_y(df)</span><br><span class="line">m = X.shape[<span class="number">0</span>]</span><br><span class="line">n = X.shape[<span class="number">1</span>]</span><br><span class="line">theta = np.zeros(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lr_cost</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    inner = (X.dot(theta) - y)</span><br><span class="line">    cost = inner.T.dot(inner)</span><br><span class="line">    <span class="keyword">return</span> cost/(<span class="number">2</span> * m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    inner = X.T.dot(X.dot(theta) - y)</span><br><span class="line">    <span class="keyword">return</span> inner/m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_gradient</span><span class="params">(theta, X, y, epoch, alpha=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">    _theta = theta.copy()</span><br><span class="line">    cost_data = [lr_cost(theta, X, y)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(epoch):</span><br><span class="line">        _theta = _theta - alpha * gradient(_theta, X, y)</span><br><span class="line">        cost_data.append(lr_cost(_theta, X, y))</span><br><span class="line">    <span class="keyword">return</span> _theta, cost_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">epoch = <span class="number">500</span></span><br><span class="line">final_theta, cost_data = batch_gradient(theta, X, y, epoch)</span><br><span class="line">print(final_theta)</span><br><span class="line">sns.tsplot(time=np.arange(len(cost_data)), data=cost_data)</span><br><span class="line">plt.xlabel(<span class="string">'epoch'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.ylabel(<span class="string">'cost'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多元线性回归&quot;&gt;&lt;a href=&quot;#多元线性回归&quot; class=&quot;headerlink&quot; title=&quot;多元线性回归&quot;&gt;&lt;/a&gt;多元线性回归&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/07/24/eVgGQA.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;- 符号解释：&lt;/p&gt;
&lt;p&gt;$n$：特征的个数&lt;br&gt;$x^{(i)}$：第i个训练样本&lt;br&gt;$x^{(i)}_{j}$：第$i$个训练样本的第$j$个特征值&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="梯度下降" scheme="/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2251 Dungeon Master （BFS+优先队列）</title>
    <link href="/2019/07/22/POJ-2251-Dungeon-Master-%EF%BC%88BFS-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%EF%BC%89/"/>
    <id>/2019/07/22/POJ-2251-Dungeon-Master-（BFS-优先队列）/</id>
    <published>2019-07-22T01:51:36.000Z</published>
    <updated>2019-07-22T02:13:47.144Z</updated>
    
    <content type="html"><![CDATA[<p>这题是今年4月我们校队选拔时的最后一题，当时用的是一样的方法怎么做却都是WA，最后也没做出来；时隔3个月再做一遍才AC，也算填上了一个坑。。。orz<br> <a id="more"></a><br><br><br></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a><font color="blue">Description</font></h2><p>你被困在一个三维的空间中,现在要寻找最短路径逃生！<br>空间由立方体单位构成<br>你每次向上下前后左右移动一个单位需要一分钟<br>你不能对角线移动并且四周封闭<br>是否存在逃出生天的可能性？如果存在，则需要多少时间？</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><font color="blue">Input</font></h2><p>输入第一行是一个数表示空间的数量。<br>　　每个空间的描述的第一行为L，R和C（皆不超过30）。<br>　　L表示空间的高度。<br>　　R和C分别表示每层空间的行与列的大小。<br>　　随后L层地牢，每层R行，每行C个字符。<br>　　每个字符表示空间的一个单元。’#’表示不可通过单元，’.’表示空白单元。你的起始位置在’S’，出                   口为’E’。<br>　　每层空间后都有一个空行。L，R和C均为0时输入结束。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><font color="blue">Output</font></h2><p>每个迷宫对应一行输出。<br>如果可以逃生，则输出如下<br>Escaped in x minute(s).<br>x为最短脱离时间。<br>如果无法逃生，则输出如下<br>Trapped!</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><font color="blue">Sample Input</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">3 4 5</span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line">1 3 3</span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"></span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><font color="blue">Sample Output</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Escaped in 11 minute(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure><p> <br><br><br>思路：BFS模板题，没什么好讲的<br><br><br></p><p>AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> t[<span class="number">32</span>][<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">32</span>][<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">6</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;; <span class="comment">//移动的六个方向</span></span><br><span class="line"><span class="keyword">int</span> sl,sr,sc,er,ec,el;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">   <span class="keyword">int</span> l,r,c,cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l,r,c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查是否越界或者撞到墙壁，如果没有则返回true</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nex_lim</span><span class="params">(<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> cc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ll&lt;<span class="number">0</span>||ll&gt;=l||rr&lt;<span class="number">0</span>||rr&gt;=r||cc&lt;<span class="number">0</span>||cc&gt;=c||t[ll][rr][cc] == <span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="built_in">queue</span>&lt;node&gt; &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        node f = q.front();</span><br><span class="line">        <span class="keyword">int</span> fl = f.l, fr = f.r, fc = f.c, ft = f.cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(nex_lim(fl+dir[i][<span class="number">0</span>],fr+dir[i][<span class="number">1</span>],fc+dir[i][<span class="number">2</span>]) &amp;&amp; !vis[fl+dir[i][<span class="number">0</span>]][fr+dir[i][<span class="number">1</span>]][fc+dir[i][<span class="number">2</span>]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(fl+dir[i][<span class="number">0</span>]==el &amp;&amp; fr+dir[i][<span class="number">1</span>]== er &amp;&amp; fc+dir[i][<span class="number">2</span>] == ec)</span><br><span class="line">                    <span class="keyword">return</span> ft+<span class="number">1</span>;</span><br><span class="line">                node temp = &#123;fl+dir[i][<span class="number">0</span>],fr+dir[i][<span class="number">1</span>],fc+dir[i][<span class="number">2</span>],ft+<span class="number">1</span>&#125;;</span><br><span class="line">                vis[fl+dir[i][<span class="number">0</span>]][fr+dir[i][<span class="number">1</span>]][fc+dir[i][<span class="number">2</span>]] = <span class="number">1</span>; <span class="comment">//访问过的点不要忘记标成vis1</span></span><br><span class="line">                q.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;l,&amp;r,&amp;c); getchar();</span><br><span class="line">    <span class="keyword">while</span>(l)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;r;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;c;k++)</span><br><span class="line">                &#123;</span><br><span class="line"></span><br><span class="line">                    t[i][j][k] = getchar();</span><br><span class="line">                    <span class="keyword">if</span>(t[i][j][k]==<span class="string">'S'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        sl = i; sr = j; sc = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(t[i][j][k]==<span class="string">'E'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        el = i; er = j; ec = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                getchar();</span><br><span class="line">            &#125;</span><br><span class="line">            getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">        node temp = &#123;sl,sr,sc,<span class="number">0</span>&#125;;</span><br><span class="line">        q.push(temp); <span class="comment">//因为queue没有clear方法，所以声明为内部变量而不是全局变量</span></span><br><span class="line">        vis[sl][sr][sc] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a = bfs(q);</span><br><span class="line">        <span class="keyword">if</span>(a!=<span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Escaped in "</span> &lt;&lt;a &lt;&lt; <span class="string">" minute(s)."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Trapped!"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;l,&amp;r,&amp;c); getchar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题是今年4月我们校队选拔时的最后一题，当时用的是一样的方法怎么做却都是WA，最后也没做出来；时隔3个月再做一遍才AC，也算填上了一个坑。。。orz&lt;br&gt;
    
    </summary>
    
      <category term="简单搜索" scheme="/categories/%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="ACM" scheme="/tags/ACM/"/>
    
      <category term="BFS" scheme="/tags/BFS/"/>
    
      <category term="简单搜索" scheme="/tags/%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python练手项目（1）Pygame制作游戏</title>
    <link href="/2019/07/17/Python%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%EF%BC%881%EF%BC%89Pygame%E5%88%B6%E4%BD%9C%E6%B8%B8%E6%88%8F/"/>
    <id>/2019/07/17/Python练手项目（1）Pygame制作游戏/</id>
    <published>2019-07-17T14:05:29.000Z</published>
    <updated>2019-07-21T13:23:27.707Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20190721115149934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <a id="more"></a></p><h1 id="背景部分"><a href="#背景部分" class="headerlink" title="背景部分"></a>背景部分</h1><hr><h2 id="创建Pygame窗口以及响应用户输入"><a href="#创建Pygame窗口以及响应用户输入" class="headerlink" title="创建Pygame窗口以及响应用户输入"></a>创建Pygame窗口以及响应用户输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    screen = pygame.display.set_mode((<span class="number">1200</span>, <span class="number">700</span>))</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure><ol><li>首先我们导入模块<code>pygame</code>和<code>sys</code>。sys用于退出游戏</li><li>游戏以函数<code>run_game()</code>开头。</li><li><code>pygame.init()</code>用于初始化游戏背景。</li><li><code>pygame.display.set_mode()</code>用于创建一个名为screen的显示窗口。实参(1200,700)是一个元组，指定游戏窗口的尺寸。</li><li>对象screen是一个surface。在Pygame中，surface是屏幕的一部分，用于显示游戏元素（比如外星人、飞船），游戏中每个元素都是一个surface。激活游戏的动画循环后，每经过一次循环都将重新绘制这个surface。</li><li>为访问Pygame侦听到的时间，我们使用方法<code>pygame.event.get()</code>。所有的<b>键盘和鼠标事件</b>都将促使for循环运行。比如玩家点击窗口的关闭按钮时，将检测到pygame.QUIT事件，我们就调用<code>sys.exit()</code>来退出游戏。</li><li><code>pygame.display.flip()</code>命令Pygame让最近绘制的屏幕可见。它在每次执行while循环时都会绘制一个空屏幕，并擦去旧屏幕。</li></ol><h2 id="绘制背景色"><a href="#绘制背景色" class="headerlink" title="绘制背景色"></a>绘制背景色</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在while循环中加入如下语句：</span></span><br><span class="line">    screen.fill((<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>))</span><br></pre></td></tr></table></figure><p>Pygame中，颜色是以RGB值表示的。</p><h2 id="创建设置类"><a href="#创建设置类" class="headerlink" title="创建设置类"></a>创建设置类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br></pre></td></tr></table></figure><p>将所有游戏的设置存储在这个类中， 则invasion.py可修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    sett = Settings()</span><br><span class="line">    screen = pygame.display.set_mode(</span><br><span class="line">        (sett.screen_length, sett.screen_width)</span><br><span class="line">    )</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">        screen.fill(sett.bg_color)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="飞船部分"><a href="#飞船部分" class="headerlink" title="飞船部分"></a>飞船部分</h1><hr><h2 id="添加飞船图像"><a href="#添加飞船图像" class="headerlink" title="添加飞船图像"></a>添加飞船图像</h2><p>就选用书配套的素材吧</p><h2 id="创建Ship类"><a href="#创建Ship类" class="headerlink" title="创建Ship类"></a>创建Ship类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        self.image = pygame.image.load(<span class="string">"ship.bmp"</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line">        </span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""在指定位置绘制飞船"""</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br></pre></td></tr></table></figure><h2 id="在屏幕上绘制飞船"><a href="#在屏幕上绘制飞船" class="headerlink" title="在屏幕上绘制飞船"></a>在屏幕上绘制飞船</h2><p>在invasion.py中创建飞船对象，并调用其方法blitme()：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    sett = Settings()</span><br><span class="line">    screen = pygame.display.set_mode(</span><br><span class="line">        (sett.screen_width, sett.screen_length)</span><br><span class="line">    )</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line">    ship = Ship(screen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">        screen.fill(sett.bg_color)</span><br><span class="line">        ship.blitme()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p>运行后结果：<br><img src="https://img-blog.csdnimg.cn/20190717163003208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="重构-game-function模块"><a href="#重构-game-function模块" class="headerlink" title="重构:game_function模块"></a>重构:game_function模块</h1><hr><h2 id="函数check-events"><a href="#函数check-events" class="headerlink" title="函数check_events()"></a>函数check_events()</h2><p>我们把管理事件的代码移到一个名为check_events()的函数里，以简化run_game()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br></pre></td></tr></table></figure></p><h2 id="函数update-screen"><a href="#函数update-screen" class="headerlink" title="函数update_screen()"></a>函数update_screen()</h2><p>为进一步简化run_game()，将更新屏幕的代码移到一个名为update_screen()的函数里，并将函数定义放在game_function中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, ship)</span>:</span></span><br><span class="line">    screen.fill(sett.bg_color)</span><br><span class="line">    ship.blitme()</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p><p><br>&lt;/br&gt;<br><br><br></p><h1 id="飞船移动部分"><a href="#飞船移动部分" class="headerlink" title="飞船移动部分"></a>飞船移动部分</h1><hr><h2 id="响应按键"><a href="#响应按键" class="headerlink" title="响应按键"></a>响应按键</h2><p>每当用户按键时，都在Pygame里注册一个<b>事件</b>。事件都是通过方法<code>pygame.event.get()</code>获取的，因此在函数check_events()中，我们需要制定检查哪些类型的事件。<br>每次按键都被注册一个<code>KEYDOWN</code>事件。检测到该事件后，我们需要检查是否按下了特定的键，执行特定的操作。比如按下右键后，要让飞船向右移动。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(ship)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                ship.rect.centerx += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>我们在参数列表里加入了ship,因为需要能够访问到飞船内部的属性。</p><h2 id="允许不断移动"><a href="#允许不断移动" class="headerlink" title="允许不断移动"></a>允许不断移动</h2><p>玩家按住→键是希望飞船不停移动，直到松开为止。<br>我们可以让游戏检测<code>pygame.KEYUP</code>事件，然后结合KEYUP和KEYDOWN事件实现持续移动。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ship.py</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, screen)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.right_move = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move:</span><br><span class="line">            self.rect.centerx += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>在飞船的类内初始化时多添了一个属性<b>移动标志变量</b><code>right_move</code><br>多添了一个方法<code>update()</code>，用于检查该标志变量，实现飞船属性更新：这个变量为True时，飞船就会向右移动。<br>而这个标志变量会<b>因KEYDOWN变为True，因KEYUP变为False</b>，以此来实现持续移动</p><p>同时，要在invasion.py的while循环里调用update()方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py   </span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(ship)</span><br><span class="line">        ship.update()</span><br><span class="line">        gf.update_screen(sett, screen, ship)</span><br></pre></td></tr></table></figure></p><h2 id="左右移动"><a href="#左右移动" class="headerlink" title="左右移动"></a>左右移动</h2><p>只需照着向右移动就能做出向左移动</p><h2 id="调整飞行速度"><a href="#调整飞行速度" class="headerlink" title="调整飞行速度"></a>调整飞行速度</h2><p>每次执行while循环，飞船最多移动1像素。但可以在settings模块里加入属性<code>ship_speed</code>，用于控制飞船的速度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        self.ship_speed = <span class="number">0.7</span></span><br></pre></td></tr></table></figure><p>同时在ship.py中修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.center = float(self.rect.centerx)</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move:</span><br><span class="line">            self.center += sett.ship_speed</span><br><span class="line">        <span class="keyword">if</span> self.left_move:</span><br><span class="line">            self.center -= sett.ship_speed</span><br><span class="line"></span><br><span class="line">        self.rect.centerx = self.center</span><br></pre></td></tr></table></figure></p><ul><li>在<strong>init</strong>（）的形参中加入了setting类的sett，让飞船的方法update()可以获取其速度设置。</li><li>rect只存储整数，所以我们新建一个属性<code>center</code>，用<code>flota()</code>将<code>rect.centerx</code>转化成小数存储到<code>center</code>中。更新center之后，再根据它来更新控制飞船位置的rect.centerx（虽然centerx只存储self.center的整数部分，但对于显示飞船而言问题不大。）</li></ul><h2 id="限制飞船活动范围"><a href="#限制飞船活动范围" class="headerlink" title="限制飞船活动范围"></a>限制飞船活动范围</h2><p>为了防止飞船飞出屏幕外，我们在飞船位置变更前添加if语句判断飞船是否将飞出框外。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ship.py</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.center += self.sett.ship_speed</span><br><span class="line">        <span class="keyword">if</span> self.left_move <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.center -= self.sett.ship_speed</span><br></pre></td></tr></table></figure></p><p>如果rect的左/右边缘没有触及屏幕左/右边缘，才可以移动。</p><h2 id="重构check-event"><a href="#重构check-event" class="headerlink" title="重构check_event()"></a>重构check_event()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, ship)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keyup</span><span class="params">(event, ship)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(ship)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, ship)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br></pre></td></tr></table></figure><p><br><br></p><h1 id="子弹部分"><a href="#子弹部分" class="headerlink" title="子弹部分"></a>子弹部分</h1><h2 id="添加子弹设置"><a href="#添加子弹设置" class="headerlink" title="添加子弹设置"></a>添加子弹设置</h2><p>在setting.py中添加新类Bullet所需的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">    <span class="comment"># 屏幕设置</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 子弹设置</span></span><br><span class="line">    self.bullet_speed = <span class="number">1</span></span><br><span class="line">    self.bullet_width = <span class="number">3</span></span><br><span class="line">    self.bullet_height = <span class="number">15</span></span><br><span class="line">    self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br></pre></td></tr></table></figure></p><h2 id="创建Bullet类"><a href="#创建Bullet类" class="headerlink" title="创建Bullet类"></a>创建Bullet类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bullet.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""一个对飞船的子弹管理的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, ship)</span>:</span></span><br><span class="line">        <span class="string">"""在飞船处创建一个子弹对象"""</span></span><br><span class="line">    super(Bullet, self).__init__()</span><br><span class="line">    self.screen = screen</span><br><span class="line"></span><br><span class="line">    self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, sett.bullet_width, sett.bullet_height)</span><br><span class="line">    self.rect.centerx = ship.rect.centerx</span><br><span class="line">    self.rect.top = ship.rect.top</span><br><span class="line"></span><br><span class="line">    self.y = float(self.rect.y)</span><br><span class="line"></span><br><span class="line">    self.color = sett.bullet_color</span><br><span class="line">    self.speed_factor = sett.bullet_speed</span><br></pre></td></tr></table></figure><p>子弹并非基于图像，因此我们必须使用<code>pygame.Rect()</code>类从空白开始创建一个矩形。创建这个类的实例时，必须提供矩形<b>左上角的x坐标和y坐标</b>，还有宽度和高度。我们先在（0，0）处创建一个矩形，并在接下来放在正确的位置，这个位置取决于飞船的位置。</p><p>接下来编写<code>update()</code>和<code>draw_bullet</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""向上移动子弹"""</span></span><br><span class="line">    </span><br><span class="line">self.y -= self.speed</span><br><span class="line">self.rect.y = self.y</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_bullet</span><span class="params">(self)</span>:</span></span><br><span class="line">    pygame.draw.rect(self.screen, self.color, self.rect)</span><br></pre></td></tr></table></figure></p><h2 id="将子弹存到编组中"><a href="#将子弹存到编组中" class="headerlink" title="将子弹存到编组中"></a>将子弹存到编组中</h2><p>在玩家每次按下空格时都射出一发子弹。首先我们在invasion.py中创建一个编组（Group）用于存储所有子弹，以便能够管理发射出去的子弹。<br>这个编组是pygame.sprite.Group类的一个实例；Group类 类似于列表，但提供了有助于游戏开发的功能。在主循环中，我们使用这个编组在屏幕上绘制子弹，更新每一个子弹的位置。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> game_function <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    bullets = Group()</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line">        bullets.update()</span><br><span class="line">        gf.update_screen(sett, screen, ship, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p>我们将bullets作为实参传递给了check_events()和update_screen()。在check_event（）中我们要用空格处理bullets；在update_screen中则要更新绘制到屏幕上的bullets。<br><b>当你对编组调用update()时，编组将自动对每一个”精灵”调用update()</b>，即对每一个子弹。</p><h2 id="开火"><a href="#开火" class="headerlink" title="开火"></a>开火</h2><p>因为只有在按下空格键时飞船才会开火，所以我们只需修改<code>check_keydown_events()</code>而不用修改keyup<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"><span class="keyword">from</span> bullet <span class="keyword">import</span>  Bullet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">        bullets.add(new_bullet)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    screen.fill(sett.bg_color)</span><br><span class="line">    ship.blitme()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets:</span><br><span class="line">        bullet.draw_bullet()</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p><h2 id="删除已经消失的子弹"><a href="#删除已经消失的子弹" class="headerlink" title="删除已经消失的子弹"></a>删除已经消失的子弹</h2><p>我们需要将已经飞出屏幕的子弹删除，减少内存负担。<br>为此，我们需要在每次更新子弹位置后，检测rect的bottom属性小于0的子弹，并删除它们。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line">        bullets.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line"><span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">bullets.remove(bullet)</span><br><span class="line">print(len(bullets))</span><br><span class="line"></span><br><span class="line">        gf.update_screen(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure><ul><li><b>在for循环中，不应从列表或编组中删除条目，因此必须是遍历<u>编组的副本</u></b>，故需要调用方法<code>copy()</code>，返回一个编组的副本。</li><li>输出编组的长度，即有效子弹的数量，是为了显示子弹的数量，核实已消失的子弹确实被删除了。</li></ul><p>子弹效果如图：<br><img src="https://img-blog.csdnimg.cn/2019071722263984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="限制子弹数量"><a href="#限制子弹数量" class="headerlink" title="限制子弹数量"></a>限制子弹数量</h2><p>多数同类型游戏里面都会有对子弹数量的限制，鼓励玩家有目标地射击。<br>我们在此限制子弹最大数量为4.</p><p>首先在Setting类里设置允许的最大子弹数：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#setting.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">       <span class="comment"># 屏幕设置</span></span><br><span class="line">       ...</span><br><span class="line">       <span class="comment"># 子弹设置</span></span><br><span class="line">       ...</span><br><span class="line">       self.bullet_allowed = <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>在check_keydown_event()中检测到空格前，添加if语句判断子弹数量(群组长度)是否已经超过最大限制。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        <span class="keyword">if</span> len(bullets) &lt; sett.bullet_allowed:</span><br><span class="line">            new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">            bullets.add(new_bullet)</span><br></pre></td></tr></table></figure></p><h2 id="重构bullet函数"><a href="#重构bullet函数" class="headerlink" title="重构bullet函数"></a>重构bullet函数</h2><p>我们可以把子弹更新函数和删除子弹的代码写进一个函数<code>update_bullet()</code>里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullet</span><span class="params">(bullets)</span>:</span></span><br><span class="line">    bullets.update()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            bullets.remove(bullet)</span><br><span class="line">        print(len(bullets))</span><br></pre></td></tr></table></figure></p><p>故主循环里的代码可简化：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line"></span><br><span class="line">        gf.update_bullet(bullets)</span><br><span class="line">        gf.update_screen(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure></p><p>同时，把检查子弹数量是否超额的代码已经添加新子弹的代码整合进一个<code>fire_bullet()</code>函数里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fire_bullet</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(bullets) &lt; sett.bullet_allowed:</span><br><span class="line">        new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">        bullets.add(new_bullet)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        fire_bullet(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure></p><h1 id="外星人部分"><a href="#外星人部分" class="headerlink" title="外星人部分"></a>外星人部分</h1><p><br><br></p><h2 id="创建Alien类"><a href="#创建Alien类" class="headerlink" title="创建Alien类"></a>创建Alien类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""单个外星人的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.setting = sett</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载外星人图像，设置rect属性</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">'alien.bmp'</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每个外星人最初都在屏幕左上角</span></span><br><span class="line">        self.rect.x = self.rect.width</span><br><span class="line">        self.rect.y = self.rect.height</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储外星人准确位置</span></span><br><span class="line">        self.x = float(self.rect.x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br></pre></td></tr></table></figure><h2 id="创建Alien实例"><a href="#创建Alien实例" class="headerlink" title="创建Alien实例"></a>创建Alien实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, ship, alien, bullets)</span><br><span class="line"><span class="comment"># update_screen里调用 alien.blitme()</span></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190718103249589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="创建一群外星人"><a href="#创建一群外星人" class="headerlink" title="创建一群外星人"></a>创建一群外星人</h2><h3 id="确定一行可以容纳多少外星人"><a href="#确定一行可以容纳多少外星人" class="headerlink" title="确定一行可以容纳多少外星人"></a>确定一行可以容纳多少外星人</h3><p>我们要根据屏幕水平宽度确定一行可容纳多少外星人。我们要在屏幕两边留下边距，把它设置为外星人图像的宽度。所以放置外星人的水平空间为：</p><blockquote><p>available_space_x = sett.screen_width - (2 * alien_width)</p></blockquote><p><br><br>外星人之间还得留下空间，设置为一个外星人的宽度。因此一行可容纳的外星人数量：</p><blockquote><p>number_aliens_x = available_space_x / (2 * alien_width)</p></blockquote><h3 id="创建多行外星人"><a href="#创建多行外星人" class="headerlink" title="创建多行外星人"></a>创建多行外星人</h3><p>为创建一行外星人，首先在invasion.py中创建一个名为aliens的空编组，用于存储全部外星人，再调用game_function.py中的创建外星人群的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">ship = Ship(sett, screen)</span><br><span class="line">    bullets = Group()</span><br><span class="line">    aliens = Group()</span><br><span class="line">aliens = Group()</span><br><span class="line"></span><br><span class="line">    gf.create_fleet(sett, screen, aliens)</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    available_space_x = sett.screen_width - <span class="number">2</span> * alien_width</span><br><span class="line">    number_aliens_x = int(available_space_x / (<span class="number">2</span> * alien_width))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">        <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">        alien = Alien(sett, screen)</span><br><span class="line">        alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">        alien.rect.x = alien.x</span><br><span class="line">        aliens.add(alien)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    aliens.draw(screen)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>效果如图：<br><img src="https://img-blog.csdnimg.cn/20190718110516394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="重构create-fleet"><a href="#重构create-fleet" class="headerlink" title="重构create_fleet()"></a>重构create_fleet()</h2><p> 为create_fleet()新添两个函数<code>create_alien()</code>和<code>get_number_aliens_x()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number_aliens_x</span><span class="params">(sett, alien_width)</span>:</span></span><br><span class="line">    available_space_x = sett.screen_width - <span class="number">2</span> * alien_width</span><br><span class="line">    number_aliens_x = int(available_space_x / (<span class="number">2</span> * alien_width))</span><br><span class="line">    <span class="keyword">return</span> number_aliens_x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_alien</span><span class="params">(sett, screen, aliens, alien_width, alien_number)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">    alien.rect.x = alien.x</span><br><span class="line">    aliens.add(alien)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    number_aliens_x = get_number_aliens_x(sett, alien_width)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">        create_alien(sett, screen, aliens, alien_width, alien_number)</span><br></pre></td></tr></table></figure><h2 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h2><p>要创建外星人群，需要计算屏幕可容纳多少行，并对创建一行外星人的循环重复相应的次数。为计算可容纳的行数，我们<u>将屏幕高度减去第一行的外星人的上边距（外星人高度）、飞船的高度以及最初外星人高度加上外星人边距：</u></p><blockquote><p>available_space_y = sett.screen_height - 3*alien_height - ship_height</p></blockquote><p>这样可以给飞船上方留出一定空白区域。</p><p>每行下方都要留出一定的空白区域，并将其设置为外星人的高度。为计算可容纳的行数，我们将可用垂直空间除以外星人高度的两倍：</p><blockquote><p>number_rows = available_space_y /(2 * alien_height)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_funtion.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_nuber_rows</span><span class="params">(sett, alien_height, ship_height)</span>:</span></span><br><span class="line">    available_space_y = sett.screen_length - <span class="number">3</span> * alien_height - ship_height</span><br><span class="line">    number_rows = int(available_space_y / (<span class="number">2</span> * alien_height))</span><br><span class="line">    <span class="keyword">return</span> number_rows</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_alien</span><span class="params">(sett, screen, aliens, alien_width, alien_number, row_number)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">    ...</span><br><span class="line">    alien.rect.y = alien.rect.height + <span class="number">2</span> * alien.rect.height * row_number</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, ship, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    ...</span><br><span class="line">    number_rows = get_nuber_rows(sett, alien_height, ship.rect.height)</span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> row_number <span class="keyword">in</span> range(number_rows):</span><br><span class="line">        <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">            create_alien(sett, screen, aliens, alien_width, alien_number, row_number)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190718210645558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="移动外星人"><a href="#移动外星人" class="headerlink" title="移动外星人"></a>移动外星人</h1><h2 id="让外星人向右移动"><a href="#让外星人向右移动" class="headerlink" title="让外星人向右移动"></a>让外星人向右移动</h2><p>为移动外星人，我们将使用alien.py中的方法update()，且对外星人群中的每个外星人都调用它。<br>首先添加一个外星人移动速度的设置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        ...</span><br><span class="line">        self.alien_speed = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>然后在Alien类里实现update()：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x += self.setting.alien_speed</span><br><span class="line">        self.rect.x = self.x</span><br></pre></td></tr></table></figure></p><p>接着在game_function.py里编写<code>update_aliens()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(aliens)</span>:</span></span><br><span class="line">    aliens.update()</span><br></pre></td></tr></table></figure></p><p>aliens编组将自动对每一个外星人调用update()。</p><p>在主循环里调用update_aliens(aliens):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    gf.check_events(sett, screen, ship, bullets)</span><br><span class="line">    ship.update()</span><br><span class="line">    gf.update_bullet(bullets)</span><br><span class="line">    gf.update_aliens(aliens)</span><br><span class="line">    gf.update_screen(sett, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><h2 id="创建表示外星人移动方向的设置"><a href="#创建表示外星人移动方向的设置" class="headerlink" title="创建表示外星人移动方向的设置"></a>创建表示外星人移动方向的设置</h2><p>让外星人在撞到屏幕右边缘后会向下移动，再向左移动，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line">self.alien_speed = <span class="number">1</span></span><br><span class="line">self.alien_drop_speed = <span class="number">10</span></span><br><span class="line"><span class="comment"># 下降速度</span></span><br><span class="line">self.fleet_direction = <span class="number">1</span></span><br><span class="line"><span class="comment"># 1表示向右，-1表示向左, 可以直接作为速度的系数用于坐标运算</span></span><br></pre></td></tr></table></figure></p><h2 id="检查外星人是否撞到边缘"><a href="#检查外星人是否撞到边缘" class="headerlink" title="检查外星人是否撞到边缘"></a>检查外星人是否撞到边缘</h2><p>检查外星人是否撞到边缘，为类Alien编写方法<code>check_edges()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">check_edges</span><span class="params">(self)</span>:</span></span><br><span class="line">     screen_rect = self.screen.get_rect()</span><br><span class="line">     <span class="keyword">if</span> self.rect.right &gt;= screen_rect.right:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">elif</span> self.rect.left &lt;= screen_rect.left:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></p><p>同时修改update():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.x += self.setting.alien_speed * self.setting.fleet_direction</span><br><span class="line">    self.rect.x = self.x</span><br></pre></td></tr></table></figure></p><h2 id="向下移动并改变移动方向"><a href="#向下移动并改变移动方向" class="headerlink" title="向下移动并改变移动方向"></a>向下移动并改变移动方向</h2><p>有<b>一个外星人</b>到达屏幕边缘时，需要将<b>整群外星人</b>下移并转向。所以我们需要对game_function.py做大修改，因为我们需要检查每一个外星人是不是已经到了边缘。为此我们编写<code>check_fleet_edge()</code>和<code>change_fleet_dir()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_fleet_dir</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""将整群外星人下移"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        alien.rect.y += sett.alien_drop_speed</span><br><span class="line">    sett.fleet_direction *= <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_fleet_edges</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""有一个外星人到达边缘"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.check_edges():</span><br><span class="line">            change_fleet_dir(sett, aliens)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br></pre></td></tr></table></figure></p><p>同时修改主循环中update_aliens()的参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gf.update_aliens(sett, aliens)</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="射杀外星人"><a href="#射杀外星人" class="headerlink" title="射杀外星人"></a>射杀外星人</h1><h2 id="检测子弹与外星人的碰撞"><a href="#检测子弹与外星人的碰撞" class="headerlink" title="检测子弹与外星人的碰撞"></a>检测子弹与外星人的碰撞</h2><p>子弹击中外星人时，我们要让外星人消失。为此我们需要在更新子弹位置后判断其是否碰撞。</p><p>我们用<code>sprite.groupcollide()</code>方法来检测两个群组的成员是否有碰撞。<br>它将每颗子弹的rect同每个外星人的rect进行比较，并<b>返回一个字典</b>，其中包含发生碰撞的子弹和外星人。在这个字典中，每个键都是一颗子弹，而对应的值都是被击中的外星人。（这个字典在之后计分要用到）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullets</span><span class="params">(aliens, bullets)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>这行代码先遍历每颗子弹再遍历每个外星人，每当有两者rect重叠，它就在返回的字典中添加一对键值对。最后两个实参告诉pygame删除发生碰撞的子弹和外星人（第一个true表示子弹会被删除，如果改为false则子弹碰撞时不会被删除，而是一直飞到屏幕外）</p><p>接着要在invasion.py中的update_bullets()参数中添加aliens。</p><p><img src="https://img-blog.csdnimg.cn/20190719102209460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="生成新的外星人群"><a href="#生成新的外星人群" class="headerlink" title="生成新的外星人群"></a>生成新的外星人群</h2><p>当一个外星人群被消灭后，应该再出现另一群外星人。<br>我们先检查编组aliens是否为空，如果为空，就调用create_fleet()。我们将在update_bullets()中进行这个检查，<b>因为外星人都是在这里被消灭的</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullets</span><span class="params">(sett, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">   create_fleet(sett, screen, ship, aliens)</span><br></pre></td></tr></table></figure></p><p>同时要修改invasion.py中update_bullets的参数。</p><h2 id="重构update-bullets"><a href="#重构update-bullets" class="headerlink" title="重构update_bullets()"></a>重构update_bullets()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullet</span><span class="params">(sett, screen, ship, bullets, aliens)</span>:</span></span><br><span class="line">    bullets.update()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            bullets.remove(bullet)</span><br><span class="line">        print(len(bullets))</span><br><span class="line">    check_bullet_collision(sett, screen, ship, bullets, aliens)</span><br></pre></td></tr></table></figure><h1 id="结束游戏"><a href="#结束游戏" class="headerlink" title="结束游戏"></a>结束游戏</h1><p>需要添加失败事件：外星人撞到飞船，或者有外星人降到屏幕底端，飞船将会被摧毁，玩家用光生命树后游戏结束。</p><h2 id="检测飞船与外星人碰撞"><a href="#检测飞船与外星人碰撞" class="headerlink" title="检测飞船与外星人碰撞"></a>检测飞船与外星人碰撞</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, ship, aliens)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens):</span><br><span class="line">        print(<span class="string">"shit!"</span>)</span><br></pre></td></tr></table></figure><p>方法<code>spritecollideany()</code>接受两个实参：一个精灵和一个编组。它检查编组是否有其他成员与精灵发生了碰撞，并在找到与精灵发生碰撞的成员后停止遍历，返回True. 如果没有碰撞则返回None。</p><h2 id="响应外星人与飞船碰撞"><a href="#响应外星人与飞船碰撞" class="headerlink" title="响应外星人与飞船碰撞"></a>响应外星人与飞船碰撞</h2><p>飞船与外星人碰撞后：飞船生命-1、全屏外星人和子弹清空并暂停一段时间后出现新的外星人群。</p><p>寻找编写一个用于跟踪游戏统计信息的新类—Gamestats, 并将其保存为文件stats. py ：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stats.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>同时在invasion.py中创建一个名为stats的实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sett = Settings()</span><br><span class="line">stats = Gamestats(sett)</span><br></pre></td></tr></table></figure></p><p>接着编写飞船碰撞时的响应：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    aliens.empty()</span><br><span class="line">    bullets.empty()</span><br><span class="line"></span><br><span class="line">    create_fleet(sett, screen, ship, aliens)</span><br><span class="line">    ship.center = screen.get_rect().centerx</span><br><span class="line">    <span class="comment"># 将飞船调整至中心位置</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens):</span><br><span class="line">        ship_hit(sett, stats, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><p>同时要在invasion.py中修改update_aliens()参数列表</p><h2 id="有外星人到达底部"><a href="#有外星人到达底部" class="headerlink" title="有外星人到达底部"></a>有外星人到达底部</h2><p>为此我们写一个函数<code>check_alien_bottom()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alien_bottom</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    screen_rect = screen.get_rect()</span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        <span class="keyword">if</span> alien.rect.bottom &gt;= screen_rect.bottom:</span><br><span class="line">            ship_hit(sett, stats, screen, ship, aliens, bullets)</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens) <span class="keyword">or</span> alien_bottom(sett, stats, screen, ship, aliens, bullets):</span><br><span class="line">        ship_hit(sett, stats, screen, ship, aliens, bullets)</span><br></pre></td></tr></table></figure></p><h2 id="游戏结束"><a href="#游戏结束" class="headerlink" title="游戏结束"></a>游戏结束</h2><p> 当life减为0后，游戏结束。我们在GameStats里添加一个作为标志的属性active，以便在玩家的飞船用完后结束游戏：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stats.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.active = <span class="literal">True</span></span><br></pre></td></tr></table></figure></p><p>当玩家的生命减为0时，该变量变为false<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life&gt;<span class="number">0</span>:</span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        ship.center = screen.get_rect().centerx</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h1 id="添加PLAY按钮"><a href="#添加PLAY按钮" class="headerlink" title="添加PLAY按钮"></a>添加PLAY按钮</h1><p>添加PLAY按钮，让程序开始时处于非活动状态，则要修改stats.py中的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h2 id="创建Button类"><a href="#创建Button类" class="headerlink" title="创建Button类"></a>创建Button类</h2><p>由于pygame没有内置创建按钮的方法，所以我们创建一个Button类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># button.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, msg)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        self.width, self.height = <span class="number">200</span>, <span class="number">50</span></span><br><span class="line">        self.button_color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">        self.text_color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line">        <span class="comment"># 指定字体字号来渲染文字</span></span><br><span class="line"></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, self.width, self.height)</span><br><span class="line">        self.rect.center = self.screen_rect.center</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字符串渲染成图像</span></span><br><span class="line">        self.prep_msg(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_msg</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        <span class="string">"""将字符串渲染成图像"""</span></span><br><span class="line">        <span class="comment"># 第二个布尔参数是反锯齿开关</span></span><br><span class="line">        self.msg_image = self.font.render(msg, <span class="literal">True</span>, self.text_color, self.button_color)</span><br><span class="line">        self.msg_image_rect = self.msg_image.get_rect()</span><br><span class="line">        self.msg_image_rect.center = self.rect.center</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.fill(self.button_color, self.rect)</span><br><span class="line">        self.screen.blit(self.msg_image, self.msg_image_rect)</span><br></pre></td></tr></table></figure></p><h2 id="在屏幕上绘制按钮"><a href="#在屏幕上绘制按钮" class="headerlink" title="在屏幕上绘制按钮"></a>在屏幕上绘制按钮</h2><p>只需要一个Play按钮，故我们直接在invasion.py中创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> button <span class="keyword">import</span> Button</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    play_button = Button(sett, screen, <span class="string">'PLAY'</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, stats, ship, aliens, bullets, play_button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></p><p>接着修改game_function.py的update_screen，以便在游戏处于非活动状态时显示按钮<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, stats, ship, aliens, bullets, button)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        button.draw_button()</span><br><span class="line"><span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br></pre></td></tr></table></figure></p><p><b>一定要把draw放在flip前面</b>，这样才能让绘制完所有其他元素之后再绘制按钮，然后切换到新屏幕。</p><p><img src="https://img-blog.csdnimg.cn/20190720103745320.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="开始游戏"><a href="#开始游戏" class="headerlink" title="开始游戏"></a>开始游戏</h2><p>在按下按钮时开始新游戏，需要对鼠标事件进行监视。<br>在game_function.py中添加如下代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(stats, button, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY):</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            mouse_X, mouse_Y = pygame.mouse.get_pos()</span><br><span class="line">            check_play(stats, button, mouse_X, mouse_Y)</span><br></pre></td></tr></table></figure></p><h2 id="重置游戏"><a href="#重置游戏" class="headerlink" title="重置游戏"></a>重置游戏</h2><p>游戏结束后，会再显示PLAY按钮。每次单击它都应该重置整个游戏，重置统计信息，删除现有的外星人和子弹，创建新的外星人，让飞船居中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY):</span><br><span class="line">        stats.reset_stats()</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        ship.center = screen.get_rect().centerx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            mouse_X, mouse_Y = pygame.mouse.get_pos()</span><br><span class="line">            check_play(sett, screen, stats, button, ship, aliens, bullets, mouse_X, mouse_Y)</span><br></pre></td></tr></table></figure></p><h2 id="将Play按钮切换到非活动状态"><a href="#将Play按钮切换到非活动状态" class="headerlink" title="将Play按钮切换到非活动状态"></a>将Play按钮切换到非活动状态</h2><p>有一个问题是，即使在游戏活动状态，按钮图形不会显示，但是点击其原来的位置依然会重置游戏。所以要在监视鼠标事件时添加一个if条件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><h2 id="隐藏光标"><a href="#隐藏光标" class="headerlink" title="隐藏光标"></a>隐藏光标</h2><p>在点击Play后的游戏活动状态，鼠标光标应该被隐藏<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">False</span>)</span><br><span class="line">        stats.reset_stats()</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        aliens.empty()</span><br><span class="line">        bullets.empty()</span><br><span class="line"></span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        ship.center = screen.get_rect().centerx</span><br></pre></td></tr></table></figure></p><p>并在游戏结束后重现它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h1 id="提高难度"><a href="#提高难度" class="headerlink" title="提高难度"></a>提高难度</h1><p>随着游戏的进行，游戏的难度应当得到提升。</p><h2 id="修改速度设置"><a href="#修改速度设置" class="headerlink" title="修改速度设置"></a>修改速度设置</h2><p>我们要通过提高游戏整体速度来提升难度，所以飞船、子弹、外星人的速度是在变的。为此我们可以将settting里的设置属性分为静态和动态两部分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_height = <span class="number">15</span></span><br><span class="line">        self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">        self.bullet_allowed = <span class="number">4</span></span><br><span class="line">        self.speed_scale = <span class="number">1.1</span></span><br><span class="line">        <span class="comment"># 速度提升率</span></span><br><span class="line">        self.init_dynamic()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_dynamic</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alien_speed = <span class="number">1</span></span><br><span class="line">        self.alien_drop_speed = <span class="number">10</span></span><br><span class="line">        <span class="comment"># 下降速度</span></span><br><span class="line">        self.fleet_direction = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 1表示向右，-1表示向左, 可以直接作为速度的系数用于坐标运算</span></span><br><span class="line">        self.bullet_speed = <span class="number">2</span></span><br><span class="line">        self.ship_speed = <span class="number">1.5</span></span><br></pre></td></tr></table></figure></p><p>接着编写提升速度的方法<code>increase_speed()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">increase_speed</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.alien_speed *= self.speed_scale</span><br><span class="line">    self.bullet_speed *= self.speed_scale</span><br><span class="line">    self.ship_speed *= self.speed_scale</span><br></pre></td></tr></table></figure></p><p>并在每消灭一群外星人时调用一次这个方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        sett.increase_speed()</span><br></pre></td></tr></table></figure></p><h2 id="重置速度"><a href="#重置速度" class="headerlink" title="重置速度"></a>重置速度</h2><p>每次开始新游戏时，速度都要重置一次<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        ...</span><br><span class="line">        sett.init_dynamic()</span><br></pre></td></tr></table></figure></p><p><br><br></p><h1 id="记分"><a href="#记分" class="headerlink" title="记分"></a>记分</h1><p>在stats类里添加一个属性记录得分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">1</span></span><br><span class="line">        self.score = <span class="number">0</span></span><br></pre></td></tr></table></figure></p><h2 id="显示得分"><a href="#显示得分" class="headerlink" title="显示得分"></a>显示得分</h2><p>为了在屏幕上显示得分，我们首先创建一个新类scoreboard：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreBoard</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, stats)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.stats = stats</span><br><span class="line"></span><br><span class="line">        self.text_color = (<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        self.prep_score()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        score_str = str(self.stats.score)</span><br><span class="line">        self.score_image = self.font.render(score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.score_rect = self.score_image.get_rect()</span><br><span class="line">        self.score_rect.right = self.screen_rect.right - <span class="number">20</span></span><br><span class="line">        self.score_rect.top = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">self.screen.blit(self.score_image, self.score_rect)</span><br></pre></td></tr></table></figure></p><h2 id="创建记分牌实例"><a href="#创建记分牌实例" class="headerlink" title="创建记分牌实例"></a>创建记分牌实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> scoreboard <span class="keyword">import</span> ScoreBoard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    ...</span><br><span class="line">    sb = ScoreBoard(sett, screen, stats)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ...</span><br><span class="line">        gf.update_screen(sett, screen, stats, sb, ship, aliens, bullets, play_button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure><p>同时要在update_screen()中调用<code>show_score()</code></p><h2 id="得分"><a href="#得分" class="headerlink" title="得分"></a>得分</h2><p>击杀外星人后要增加分数。只需要检查子弹击中外星人时<b>返回的字典（collision）</b>即可.<br>我们现在setting中设置一个外星人的得分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">   ...</span><br><span class="line">    self.alien_score = <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>接着在<code>check_bullet_collision()</code>中检查字典。<b>（这个字典的键是一颗子弹，值是被这颗子弹击中的外星人列表）</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> collisions:</span><br><span class="line">    <span class="keyword">for</span> aliens <span class="keyword">in</span> collisions.key():</span><br><span class="line">        stats.score += sett.alien_score * len(aliens)</span><br><span class="line">        sb.prep_score()</span><br></pre></td></tr></table></figure></p><p>主循环中要修改update_bullets()的参数</p><h2 id="提高点数"><a href="#提高点数" class="headerlink" title="提高点数"></a>提高点数</h2><p>随着游戏难度提升，一个外星人的得分应当提高。<br>所以在setting中增加一个得分提升的幅度属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.score_scale = <span class="number">1.5</span></span><br></pre></td></tr></table></figure></p><p>在游戏难度提升时，即速度提高时，修改setting的属性alien_score<br>（因为alien_score会变动，所以要把这个属性分类为动态，使其在动态初始化方法中被赋初值）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        ...</span><br><span class="line">        self.init_dynamic()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_dynamic</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.alien_score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_speed</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.alien_score = int(self.alien_score * self.score_scale)</span><br></pre></td></tr></table></figure></p><h2 id="将得分圆整"><a href="#将得分圆整" class="headerlink" title="将得分圆整"></a>将得分圆整</h2><p>大部分游戏都会将游戏得分显示为10的整倍数。我们可以把得分圆整。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoreboard.py</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">       rounded_score = int(round(self.stats.score, <span class="number">-1</span>))</span><br><span class="line">       score_str = <span class="string">"&#123;:,&#125;"</span>.format(rounded_score)</span><br><span class="line">       ...</span><br></pre></td></tr></table></figure></p><p><code>round()</code>的第二个参数为精确到的小数位。<br>第二个参数为负数，则<code>round()</code>将圆整到最近的10、100、1000等整倍数。</p><p><code>&quot;{:,}&quot;.format(rounded_score)</code>为一个字符串格式设置指令，它让Python将数值转换成字符串时在其中插入逗号。</p><h2 id="最高分"><a href="#最高分" class="headerlink" title="最高分"></a>最高分</h2><p>我们在stats中增加一个属性最高分，并将其展示在屏幕顶端中央。<br>但是为了让数据保存，这个最高分存储在外部文件中，所以每次都需要从外部文件读入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">            self.high_score = int(hs.read())</span><br></pre></td></tr></table></figure></p><p>每当一场游戏结束后，都要更新最高分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> stats.score &gt; stats.high_score:</span><br><span class="line">            stats.high_score = stats.score</span><br></pre></td></tr></table></figure></p><p>每次关闭前都要在外部文件更新最高分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">                hs.write(str(stats.high_score))</span><br><span class="line">            sys.exit()</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>接着要在最顶端显示最高分：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoreboard.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreBoard</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, stats)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        self.prep_score()</span><br><span class="line">        self.prep_high()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_high</span><span class="params">(self)</span>:</span></span><br><span class="line">        high_score_str = <span class="string">"&#123;:,&#125;"</span>. format(self.stats.high_score)</span><br><span class="line">        print(high_score_str)</span><br><span class="line">        self.high_score_image = self.font.render(high_score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.high_score_rect = self.high_score_image.get_rect()</span><br><span class="line">        self.high_score_rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.high_score_rect.top = self.screen_rect.top</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.score_image, self.score_rect)</span><br><span class="line">        self.screen.blit(self.high_score_image, self.high_score_rect)</span><br></pre></td></tr></table></figure></p><p>同时，在更新过最高分之后调用<code>prep_high()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> stats.score &gt; stats.high_score:</span><br><span class="line">            stats.high_score = stats.score</span><br><span class="line">            sb.prep_high()</span><br></pre></td></tr></table></figure></p><p>用到ship_hit()的地方都要修改参数</p><p><img src="https://img-blog.csdnimg.cn/20190720231853369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="奖励子弹"><a href="#奖励子弹" class="headerlink" title="奖励子弹"></a>奖励子弹</h2><p>我们新增一个机制，当玩家分数达到一定程度后，我们将接下来的3发子弹的宽度提高100倍，提高消灭外星人的效率。</p><p>首先，现在stats.py中设置奖励标准：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.award_level = <span class="number">1</span> <span class="comment"># 奖励等级</span></span><br><span class="line">        self.bullet_award = <span class="literal">False</span> <span class="comment"># 奖励状态</span></span><br><span class="line">        self.award_b = <span class="number">0</span> <span class="comment"># 已用奖励子弹数量</span></span><br><span class="line">        self.award_score = <span class="number">1500</span> <span class="comment"># 奖励分数标准</span></span><br></pre></td></tr></table></figure></p><p>因为外星人的分数会随着游戏难度增加而增加，所以奖励分数标准应该在每一次奖励后增加。所以我们在setting.py中增加一个属性<code>award_score_scale</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_height = <span class="number">15</span></span><br><span class="line">        self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">        self.bullet_allowed = <span class="number">4</span></span><br><span class="line">        self.speed_scale = <span class="number">1.1</span></span><br><span class="line">        <span class="comment"># 速度提升率</span></span><br><span class="line">        self.score_scale = <span class="number">1.5</span></span><br><span class="line">        self.award_score_scale = <span class="number">1.4</span></span><br><span class="line">        <span class="comment"># 分数提升率</span></span><br></pre></td></tr></table></figure></p><p>接着，在game_funciton.py中编写判断函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.score &gt;= stats.award_level * stats.award_score:</span><br><span class="line">        stats. bullet_award = <span class="literal">True</span></span><br><span class="line">        sett.bullet_width = <span class="number">300</span></span><br><span class="line">        stats.award_level += <span class="number">1</span></span><br><span class="line">        stats.award_b = <span class="number">0</span></span><br><span class="line">        stats.award_score *= sett.award_score_scale</span><br></pre></td></tr></table></figure></p><p>每此奖励完之后，奖励等级（award_level）要提升，奖励分数标准（award_score）要提升，已用奖励子弹数（award_b）清零。</p><p>然后要让奖励状态在三发子弹后变回False。因为子弹是在按下空格后发射，所以我们可以在检测空格事件的函数中实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award_check</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">        <span class="keyword">if</span> stats.award_b == <span class="number">3</span>:</span><br><span class="line">            stats.bullet_award = <span class="literal">False</span></span><br><span class="line">            sett.bullet_width = <span class="number">3</span></span><br><span class="line">        stats.award_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, stats, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">            award_check(sett, stats)</span><br><span class="line">            fire_bullet(sett, screen, ship, bullets)</span><br></pre></td></tr></table></figure><p>因为奖励状态是随着得分转变的，所以我们在得分的函数里调用<code>award()</code>，即check_bullet_collision()：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        sett.increase_speed()</span><br><span class="line">    <span class="keyword">if</span> collisions:</span><br><span class="line">        <span class="keyword">for</span> aliens <span class="keyword">in</span> collisions.values():</span><br><span class="line">            stats.score += sett.alien_score * len(aliens)</span><br><span class="line">            sb.prep_score()</span><br><span class="line">            award(sett, stats)</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190721111827818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="左上角显示剩余生命"><a href="#左上角显示剩余生命" class="headerlink" title="左上角显示剩余生命"></a>左上角显示剩余生命</h1><p>最后，我们来显示玩家还剩多少艘飞船，但用的是图形而不是数字。<br>首先，需要让Ship继承Sprite，以便创建飞船编组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">(Sprite)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        super().__init__()</span><br></pre></td></tr></table></figure></p><p>接着在scoreboard. py 中，创建一个可供显示的飞船编组。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.screen.blit(self.score_image, self.score_rect)</span><br><span class="line">    self.screen.blit(self.high_score_image, self.high_score_rect)</span><br><span class="line">    self.ships.draw(self.screen)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prep_ship</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""显示剩余飞船"""</span></span><br><span class="line">    self.ships = Group()</span><br><span class="line">    <span class="keyword">for</span> ship_num <span class="keyword">in</span> range(self.stats.life):</span><br><span class="line">        ship = Ship(self.sett, self.screen)</span><br><span class="line">        ship.rect.x = <span class="number">10</span> + ship_num * ship.rect.width</span><br><span class="line">        ship.rect.y = <span class="number">10</span></span><br><span class="line">        self.ships.add(ship)</span><br></pre></td></tr></table></figure></p><p>要在游戏开始时显示这个剩余生命，所以我们在开始新游戏时调用prep_ships()。这个将在check_play()中进行：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, sb, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        ...</span><br><span class="line">        sb.prep_score()</span><br><span class="line">        sb.prep_ship()</span><br></pre></td></tr></table></figure></p><p>同时，当损失生命值时，左上角的生命牌需要更新，要在ship_hit()中还要调用prep_ship()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">    sb.prep_ship()</span><br></pre></td></tr></table></figure></p><ul><li>别忘了对对相关函数的参数列表修改<br><img src="https://img-blog.csdnimg.cn/20190721115149934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h1 id="最后的重构"><a href="#最后的重构" class="headerlink" title="最后的重构"></a>最后的重构</h1><ul><li>将清屏和重新创建舰队的代码编写为一个函数<code>clear_recreate()</code></li><li>将点击PLAY按钮后的分数板和动态设置重置的函数整合为<code>restart()</code></li><li>将scoreboard .py中的<strong>init</strong>()调用的prep方法整合</li></ul><p>最终代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ship.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span><span class="params">(Sprite)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.image = pygame.image.load(<span class="string">"ship.bmp"</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom</span><br><span class="line">        self.center = float(self.rect.centerx)</span><br><span class="line"></span><br><span class="line">        self.right_move = <span class="literal">False</span></span><br><span class="line">        self.left_move = <span class="literal">False</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""在指定位置绘制飞船"""</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.right_move <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.center += self.sett.ship_speed</span><br><span class="line">        <span class="keyword">if</span> self.left_move <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.center -= self.sett.ship_speed</span><br><span class="line"></span><br><span class="line">        self.rect.centerx = self.center</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># alien.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""单个外星人的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.setting = sett</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 加载外星人图像，设置rect属性</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">'alien.bmp'</span>)</span><br><span class="line">        self.rect = self.image.get_rect()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每个外星人最初都在屏幕左上角</span></span><br><span class="line">        self.rect.x = self.rect.width</span><br><span class="line">        self.rect.y = self.rect.height</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 存储外星人准确位置</span></span><br><span class="line">        self.x = float(self.rect.x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blitme</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.image, self.rect)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_edges</span><span class="params">(self)</span>:</span></span><br><span class="line">        screen_rect = self.screen.get_rect()</span><br><span class="line">        <span class="keyword">if</span> self.rect.right &gt;= screen_rect.right:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> self.rect.left &lt;= screen_rect.left:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x += self.setting.alien_speed * self.setting.fleet_direction</span><br><span class="line">        self.rect.x = self.x</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bullet.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span><span class="params">(Sprite)</span>:</span></span><br><span class="line">    <span class="string">"""一个对飞船的子弹管理的类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, ship)</span>:</span></span><br><span class="line"></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, sett.bullet_width, sett.bullet_height)</span><br><span class="line">        self.rect.centerx = ship.rect.centerx</span><br><span class="line">        self.rect.top = ship.rect.top</span><br><span class="line"></span><br><span class="line">        self.y = float(self.rect.y)</span><br><span class="line"></span><br><span class="line">        self.color = sett.bullet_color</span><br><span class="line">        self.speed = sett.bullet_speed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""向上移动子弹"""</span></span><br><span class="line"></span><br><span class="line">        self.y -= self.speed</span><br><span class="line">        self.rect.y = self.y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_bullet</span><span class="params">(self)</span>:</span></span><br><span class="line">        pygame.draw.rect(self.screen, self.color, self.rect)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Settings</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""存储游戏所有设置的类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""初始化游戏的设置"""</span></span><br><span class="line">        <span class="comment"># 屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_length = <span class="number">700</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>)</span><br><span class="line">        <span class="comment"># 子弹设置</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_height = <span class="number">15</span></span><br><span class="line">        self.bullet_color = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">        self.bullet_allowed = <span class="number">4</span></span><br><span class="line">        self.speed_scale = <span class="number">1.1</span></span><br><span class="line">        <span class="comment"># 速度提升率</span></span><br><span class="line">        self.score_scale = <span class="number">1.5</span></span><br><span class="line">        self.award_score_scale = <span class="number">1.4</span></span><br><span class="line">        <span class="comment"># 分数提升率</span></span><br><span class="line">        self.awared_width = <span class="number">300</span></span><br><span class="line">        <span class="comment"># 奖励宽度</span></span><br><span class="line">        self.init_dynamic()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_dynamic</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alien_speed = <span class="number">1</span></span><br><span class="line">        self.alien_drop_speed = <span class="number">10</span></span><br><span class="line">        <span class="comment"># 下降速度</span></span><br><span class="line">        self.fleet_direction = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 1表示向右，-1表示向左, 可以直接作为速度的系数用于坐标运算</span></span><br><span class="line">        self.bullet_speed = <span class="number">2</span></span><br><span class="line">        self.ship_speed = <span class="number">1.5</span></span><br><span class="line">        self.alien_score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_speed</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alien_speed *= self.speed_scale</span><br><span class="line">        self.bullet_speed *= self.speed_scale</span><br><span class="line">        self.ship_speed *= self.speed_scale</span><br><span class="line">        self.alien_score = int(self.alien_score * self.score_scale)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stats.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gamestats</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett)</span>:</span></span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.reset_stats()</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'r'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">            self.high_score = int(hs.read())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_stats</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.life = <span class="number">3</span></span><br><span class="line">        self.score = <span class="number">0</span></span><br><span class="line">        self.active = <span class="literal">False</span></span><br><span class="line">        self.award_level = <span class="number">1</span></span><br><span class="line">        self.bullet_award = <span class="literal">False</span></span><br><span class="line">        self.award_b = <span class="number">0</span></span><br><span class="line">        self.award_score = <span class="number">1500</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># button.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, msg)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line"></span><br><span class="line">        self.width, self.height = <span class="number">200</span>, <span class="number">50</span></span><br><span class="line">        self.button_color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">        self.text_color = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line">        <span class="comment"># 指定字体字号来渲染文字</span></span><br><span class="line"></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>, <span class="number">0</span>, self.width, self.height)</span><br><span class="line">        self.rect.center = self.screen_rect.center</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将字符串渲染成图像</span></span><br><span class="line">        self.prep_msg(msg)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_msg</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">        <span class="string">"""将字符串渲染成图像"""</span></span><br><span class="line">        <span class="comment"># 第二个布尔参数是反锯齿开关</span></span><br><span class="line">        self.msg_image = self.font.render(msg, <span class="literal">True</span>, self.text_color, self.button_color)</span><br><span class="line">        self.msg_image_rect = self.msg_image.get_rect()</span><br><span class="line">        self.msg_image_rect.center = self.rect.center</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw_button</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.fill(self.button_color, self.rect)</span><br><span class="line">        self.screen.blit(self.msg_image, self.msg_image_rect)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoreboard.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame.font</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScoreBoard</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sett, screen, stats)</span>:</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.screen_rect = screen.get_rect()</span><br><span class="line">        self.sett = sett</span><br><span class="line">        self.stats = stats</span><br><span class="line"></span><br><span class="line">        self.text_color = (<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">        self.font = pygame.font.SysFont(<span class="literal">None</span>, <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line">        self.prep_image()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_image</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.prep_score()</span><br><span class="line">        self.prep_high()</span><br><span class="line">        self.prep_ship()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        rounded_score = int(round(self.stats.score, <span class="number">-1</span>))</span><br><span class="line">        score_str = <span class="string">"&#123;:,&#125;"</span>.format(rounded_score)</span><br><span class="line">        self.score_image = self.font.render(score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.score_rect = self.score_image.get_rect()</span><br><span class="line">        self.score_rect.right = self.screen_rect.right - <span class="number">20</span></span><br><span class="line">        self.score_rect.top = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_high</span><span class="params">(self)</span>:</span></span><br><span class="line">        high_score_str = <span class="string">"&#123;:,&#125;"</span>. format(self.stats.high_score)</span><br><span class="line">        self.high_score_image = self.font.render(high_score_str, <span class="literal">True</span>, self.text_color, self.sett.bg_color)</span><br><span class="line"></span><br><span class="line">        self.high_score_rect = self.high_score_image.get_rect()</span><br><span class="line">        self.high_score_rect.centerx = self.screen_rect.centerx</span><br><span class="line">        self.high_score_rect.top = self.screen_rect.top</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_score</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.screen.blit(self.score_image, self.score_rect)</span><br><span class="line">        self.screen.blit(self.high_score_image, self.high_score_rect)</span><br><span class="line">        self.ships.draw(self.screen)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prep_ship</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""显示剩余飞船"""</span></span><br><span class="line">        self.ships = Group()</span><br><span class="line">        <span class="keyword">for</span> ship_num <span class="keyword">in</span> range(self.stats.life):</span><br><span class="line">            ship = Ship(self.sett, self.screen)</span><br><span class="line">            ship.rect.x = <span class="number">10</span> + ship_num * ship.rect.width</span><br><span class="line">            ship.rect.y = <span class="number">10</span></span><br><span class="line">            self.ships.add(ship)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># game_function.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> bullet <span class="keyword">import</span> Bullet</span><br><span class="line"><span class="keyword">from</span> alien <span class="keyword">import</span> Alien</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fire_bullet</span><span class="params">(sett, screen, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(bullets) &lt; sett.bullet_allowed:</span><br><span class="line">        new_bullet = Bullet(sett, screen, ship)</span><br><span class="line">        bullets.add(new_bullet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_number_aliens_x</span><span class="params">(sett, alien_width)</span>:</span></span><br><span class="line">    available_space_x = sett.screen_width - <span class="number">2</span> * alien_width</span><br><span class="line">    number_aliens_x = int(available_space_x / (<span class="number">2</span> * alien_width))</span><br><span class="line">    <span class="keyword">return</span> number_aliens_x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_nuber_rows</span><span class="params">(sett, alien_height, ship_height)</span>:</span></span><br><span class="line">    available_space_y = sett.screen_length - <span class="number">3</span> * alien_height - ship_height</span><br><span class="line">    number_rows = int(available_space_y / (<span class="number">2</span> * alien_height))</span><br><span class="line">    <span class="keyword">return</span> number_rows</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_alien</span><span class="params">(sett, screen, aliens, alien_width, alien_number, row_number)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个外星人并加入群组</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien.x = alien_width + <span class="number">2</span> * alien_width * alien_number</span><br><span class="line">    alien.rect.y = alien.rect.height + <span class="number">2</span> * alien.rect.height * row_number</span><br><span class="line">    alien.rect.x = alien.x</span><br><span class="line">    aliens.add(alien)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_fleet</span><span class="params">(sett, screen, ship, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""创建外星人群"""</span></span><br><span class="line">    <span class="comment"># 创建一个外星人，并计算一行可容纳多少外星人</span></span><br><span class="line">    alien = Alien(sett, screen)</span><br><span class="line">    alien_width = alien.rect.width</span><br><span class="line">    alien_height = alien.rect.height</span><br><span class="line">    number_aliens_x = get_number_aliens_x(sett, alien_width)</span><br><span class="line">    number_rows = get_nuber_rows(sett, alien_height, ship.rect.height)</span><br><span class="line">    <span class="comment"># 创建第一行外星人</span></span><br><span class="line">    <span class="keyword">for</span> row_number <span class="keyword">in</span> range(number_rows):</span><br><span class="line">        <span class="keyword">for</span> alien_number <span class="keyword">in</span> range(number_aliens_x):</span><br><span class="line">            create_alien(sett, screen, aliens, alien_width, alien_number, row_number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award_check</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">        <span class="keyword">if</span> stats.award_b == <span class="number">3</span>:</span><br><span class="line">            stats.bullet_award = <span class="literal">False</span></span><br><span class="line">            sett.bullet_width = <span class="number">3</span></span><br><span class="line">        stats.award_b += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keydown</span><span class="params">(event, sett, screen, stats, ship, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_SPACE:</span><br><span class="line">        <span class="keyword">if</span> stats.bullet_award:</span><br><span class="line">            award_check(sett, stats)</span><br><span class="line">        fire_bullet(sett, screen, ship, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_keyup</span><span class="params">(event, ship)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.right_move = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.left_move = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear_recreate</span><span class="params">(sett, screen, ship, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="string">"""清除屏幕重新开始"""</span></span><br><span class="line">    aliens.empty()</span><br><span class="line">    bullets.empty()</span><br><span class="line"></span><br><span class="line">    create_fleet(sett, screen, ship, aliens)</span><br><span class="line">    ship.center = screen.get_rect().centerx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(sett, sb)</span>:</span></span><br><span class="line">    sett.init_dynamic()</span><br><span class="line">    sb.prep_score()</span><br><span class="line">    sb.prep_ship()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_play</span><span class="params">(sett, screen, stats, button, ship, sb, aliens, bullets, mouseX, mouseY)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> button.rect.collidepoint(mouseX, mouseY) <span class="keyword">and</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">False</span>)</span><br><span class="line">        stats.reset_stats()</span><br><span class="line">        stats.active = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        clear_recreate(sett, screen, ship, aliens, bullets)</span><br><span class="line">        restart(sett, sb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_events</span><span class="params">(sett, screen, stats, button, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"highScore.txt"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> hs:</span><br><span class="line">                hs.write(str(stats.high_score))</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYDOWN:</span><br><span class="line">            check_keydown(event, sett, screen, stats, ship, bullets)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.KEYUP:</span><br><span class="line">            check_keyup(event, ship)</span><br><span class="line">        <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            mouse_X, mouse_Y = pygame.mouse.get_pos()</span><br><span class="line">            check_play(sett, screen, stats, button, ship, sb, aliens, bullets, mouse_X, mouse_Y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_bullet_collision</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> len(aliens) == <span class="number">0</span>:</span><br><span class="line">        create_fleet(sett, screen, ship, aliens)</span><br><span class="line">        sett.increase_speed()</span><br><span class="line">    <span class="keyword">if</span> collisions:</span><br><span class="line">        <span class="keyword">for</span> aliens <span class="keyword">in</span> collisions.values():</span><br><span class="line">            stats.score += sett.alien_score * len(aliens)</span><br><span class="line">            sb.prep_score()</span><br><span class="line">            award(sett, stats)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bullet</span><span class="params">(sett, screen, stats, sb, ship, bullets, aliens)</span>:</span></span><br><span class="line">    bullets.update()</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets.copy():</span><br><span class="line">        <span class="keyword">if</span> bullet.rect.bottom &lt;= <span class="number">0</span>:</span><br><span class="line">            bullets.remove(bullet)</span><br><span class="line">    check_bullet_collision(sett, screen, stats, sb, ship, bullets, aliens)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_screen</span><span class="params">(sett, screen, stats, sb, ship, aliens, bullets, button)</span>:</span></span><br><span class="line">    screen.fill(sett.bg_color)</span><br><span class="line">    ship.blitme()</span><br><span class="line">    sb.show_score()</span><br><span class="line">    aliens.draw(screen)</span><br><span class="line">    <span class="keyword">for</span> bullet <span class="keyword">in</span> bullets:</span><br><span class="line">        bullet.draw_bullet()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> stats.active:</span><br><span class="line">        button.draw_button()</span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_fleet_dir</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""将整群外星人下移"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        alien.rect.y += sett.alien_drop_speed</span><br><span class="line">    sett.fleet_direction *= <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_fleet_edges</span><span class="params">(sett, aliens)</span>:</span></span><br><span class="line">    <span class="string">"""有一个外星人到达边缘"""</span></span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens.sprites():</span><br><span class="line">        <span class="keyword">if</span> alien.check_edges():</span><br><span class="line">            change_fleet_dir(sett, aliens)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alien_bottom</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line">    screen_rect = screen.get_rect()</span><br><span class="line">    <span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">        <span class="keyword">if</span> alien.rect.bottom &gt;= screen_rect.bottom:</span><br><span class="line">            ship_hit(sett, stats, screen, ship, sb, aliens, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_hit</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line"></span><br><span class="line">    stats.life -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> stats.life &gt; <span class="number">0</span>:</span><br><span class="line">        clear_restart(sett, screen, ship, aliens, bullets)</span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pygame.mouse.set_visible(<span class="literal">True</span>)</span><br><span class="line">        stats.active = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> stats.score &gt; stats.high_score:</span><br><span class="line">            stats.high_score = stats.score</span><br><span class="line">            sb.prep_high()</span><br><span class="line"></span><br><span class="line">    sb.prep_ship()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_aliens</span><span class="params">(sett, stats, screen, ship, sb, aliens, bullets)</span>:</span></span><br><span class="line">    check_fleet_edges(sett, aliens)</span><br><span class="line">    aliens.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pygame.sprite.spritecollideany(ship, aliens) <span class="keyword">or</span> alien_bottom(sett, stats, screen, ship, sb, aliens, bullets):</span><br><span class="line">        ship_hit(sett, stats, screen, ship, sb, aliens, bullets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">award</span><span class="params">(sett, stats)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> stats.score &gt;= stats.award_level * stats.award_score:</span><br><span class="line">        stats. bullet_award = <span class="literal">True</span></span><br><span class="line">        sett.bullet_width = sett.awared_width</span><br><span class="line">        stats.award_level += <span class="number">1</span></span><br><span class="line">        stats.award_b = <span class="number">0</span></span><br><span class="line">        stats.award_score *= sett.award_score_scale</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># invasion.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> game_function <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Group</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"><span class="keyword">from</span> stats <span class="keyword">import</span> Gamestats</span><br><span class="line"><span class="keyword">from</span> button <span class="keyword">import</span> Button</span><br><span class="line"><span class="keyword">from</span> scoreboard <span class="keyword">import</span> ScoreBoard</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_game</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()</span><br><span class="line">    sett = Settings()</span><br><span class="line">    stats = Gamestats(sett)</span><br><span class="line">    screen = pygame.display.set_mode(</span><br><span class="line">        (sett.screen_width, sett.screen_length)</span><br><span class="line">    )</span><br><span class="line">    pygame.display.set_caption(<span class="string">"Thunder"</span>)</span><br><span class="line"></span><br><span class="line">    play_button = Button(sett, screen, <span class="string">'PLAY'</span>)</span><br><span class="line">    ship = Ship(sett, screen)</span><br><span class="line">    bullets = Group()</span><br><span class="line">    aliens = Group()</span><br><span class="line">    sb = ScoreBoard(sett, screen, stats)</span><br><span class="line"></span><br><span class="line">    gf.create_fleet(sett, screen, ship, aliens)</span><br><span class="line">    <span class="comment"># 开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(sett, screen, stats, play_button, ship, sb, aliens, bullets)</span><br><span class="line">        ship.update()</span><br><span class="line">        gf.update_bullet(sett, screen, stats, sb, ship, bullets, aliens)</span><br><span class="line">        gf.update_aliens(sett, stats, screen, ship, sb, aliens, bullets)</span><br><span class="line">        gf.update_screen(sett, screen, stats, sb, ship, aliens, bullets, play_button)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190721115149934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lyaW1za3k=,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
      <category term="项目" scheme="/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>简单线性回归和梯度下降</title>
    <link href="/2019/07/16/%E7%AE%80%E5%8D%95%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E5%92%8C%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>/2019/07/16/简单线性回归和梯度下降/</id>
    <published>2019-07-16T14:04:08.000Z</published>
    <updated>2019-07-24T13:47:04.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一元线性回归"><a href="#一元线性回归" class="headerlink" title="一元线性回归"></a>一元线性回归</h1><hr><p><b>回归（Regression）</b>一词简单来说，指的是：我们根据之前的数据预测出一个准确的输出值</p><p><b>线性回归（Liner Regression）</b>：寻找一条直线，最大程度地<b>拟合</b>样本特征和样本输出标记之间的关系。样本特征只有一个，就被称为<b>简单线性回归</b>。<br> <a id="more"></a></p><p><img src="https://s2.ax1x.com/2019/07/16/ZbHb1e.png" alt="蓝点为数据，红线为拟合线"></p><p>假设预测的线性函数的表达式为：<script type="math/tex">h_\theta(x) = \theta_0 + \theta_1x</script><br>其中$\theta_0 ，\theta_1$为此模型的<b>参数（parameter）</b>,分别对应于<u>截距</u>和<u>斜率</u>。我们所要做的是选择合适的参数使其最大程度地拟合我们的数据。<br><br></p><ul><li>之后要用到的标记如下：<br>$m$ 代表训练集中实例的数量<br>$x$ 代表特征/输入变量<br>$y$ 代表目标变量/输出变量<br>$(x, y)$ 代表训练集中的实例<br>$(x^{(i)},y^{(i)})$ 代表第$i$ 个观察实例 </li></ul><p><br><br>为了评估模型的准确程度，使这个值不受个别极端数据影响而产生巨大波动，我们选取 <b> 方差的二分之一</b> 作为评判误差程度的标准，即：</p><script type="math/tex; mode=display">J(\theta_0,\theta_1) = \frac {1}{2m}\sum_{i=1}^{m}\ (h_\theta(x^{(i)})  - y^{(i)})^2</script><p>$J(\theta_0,\theta_1)$ 即为该模型的<b>代价函数（Cost Function）</b>，有时称为 损失函数（Loss Funtion）</p><p>于是乎我们的目标就变成了：</p><script type="math/tex; mode=display">minimize\ \ J(\theta_0,\theta_1)</script><p><br><br></p><ul><li>与代价函数相对的一个概念为<b>效用函数 （Utility Function）</b></li><li>通过分析问题，确定问题的代价函数或者效用函数，通过最优化获得机器学习的模型，是一类机器学习算法的基本思路，也是参数学习方法的基础。<br><br><br><h1 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h1></li></ul><hr><p><b>最小二乘法</b>是一种对该问题的最优化方法。</p><p><br><br><br>$J(\theta_0,\theta_1)$是一个多元函数。使其对各元的偏导数等于0，则可得该函数的极值。<br>即：</p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_0}  = 0,\ \frac{\partial J} {\partial \theta_1}  = 0</script><p>接下来为求解过程：</p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_0}  = \frac {1}{2m} \sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-1) = 0</script><script type="math/tex; mode=display">=> \sum ^{m}_{i=1}(y^{(i)} - \theta_1x^{(i)} - \theta_0) =0</script><script type="math/tex; mode=display">=>\sum ^{m}_{i=1} y^{(i)} - \theta_1 \sum ^{m}_{i=1}x^{(i)} - \sum ^{m}_{i=1}\theta_0 = 0 \</script><script type="math/tex; mode=display">=> \ \sum ^{m}_{i=1} y^{(i)} - \theta_1 \sum ^{m}_{i=1}x^{(i)} - m\theta_0 = 0</script><script type="math/tex; mode=display">=>（两边同时除以m）  \ \theta_0 = \overline {y} \ - \ \theta_1 \overline{x} \ \ \ \ ①</script><p><br><br></p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_1}  =  \frac {1}{2m}\sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-x^{(i)}) = 0</script><script type="math/tex; mode=display">=> \sum ^{m}_{i=1}(y^{(i)} - \theta_1x^{(i)} - \theta_0)x^{(i)} =0</script><script type="math/tex; mode=display">（将①式代入其中）=>  \sum ^{m}_{i=1}(y^{(i)} - \theta_1x^{(i)} -\overline {y} \ + \ \theta_1 \overline{x} )x^{(i)} =0</script><script type="math/tex; mode=display">=>  \sum ^{m}_{i=1}y^{(i)} x^{(i)} - \theta_1(x^{(i)})^2 -\overline {y} x^{(i)} \ + \ \theta_1 \overline{x} x^{(i)} =0</script><script type="math/tex; mode=display">=>  \sum ^{m}_{i=1}(y^{(i)} x^{(i)} -\overline {y} x^{(i)}) -\ \theta_1\sum ^{m}_{i=1}((x^{(i)})^2 -  \ \overline{x} x^{(i)}) =0</script><script type="math/tex; mode=display">\theta_1 = \frac{\sum ^{m}_{i=1}(y^{(i)} x^{(i)} -\overline {y} x^{(i)})}{\sum ^{m}_{i=1}((x^{(i)})^2 -  \ \overline{x} x^{(i)})}</script><p>此式还可继续化简<br>对于项$\sum ^{m}_{i=1}\overline{y} x^{(i)}$:</p><script type="math/tex; mode=display">= m\overline{y}\ \overline{x} = \overline{x}\sum ^{m}_{i=1}y^{(i)} = \sum ^{m}_{i=1}\overline{y}\ \overline{x}</script><p>故这几项都可以互相转化，则有：</p><script type="math/tex; mode=display">原式 = \frac{\sum ^{m}_{i=1}(y^{(i)} x^{(i)} -\overline {y} x^{(i)}-\overline{x}y^{(i)} + \overline{x}·\overline{y})}{\sum ^{m}_{i=1}((x^{(i)})^2 -  \ \overline{x} x^{(i)})-\overline{x}x^{(i)}+\overline{x}^2)}</script><script type="math/tex; mode=display">=\frac{\sum ^{m}_{i=1}(x^{(i)}-\overline{x})(y^{(i)}-\overline{y})}{\sum ^{m}_{i=1}(x^{(i)} -  \ \overline{x})^2}</script><p><br><br><br></p><p><strong>综上，可得结论：</strong></p><script type="math/tex; mode=display">\theta_1 = \frac{\sum ^{m}_{i=1}(x^{(i)}-\overline{x})(y^{(i)}-\overline{y})}{\sum ^{m}_{i=1}(x^{(i)} -  \ \overline{x})^2}</script><script type="math/tex; mode=display">\theta_0 = \overline {y} \ - \ \theta_1 \overline{x}</script><p><br><br><br>MATLAB实现：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = polyfit(x, y, <span class="number">1</span>);</span><br><span class="line">h = polyval(a,x,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">'*'</span>,x,h,<span class="string">'-'</span>);</span><br></pre></td></tr></table></figure></p><p>polyfit(x, y, n)是matlab中用于曲线拟合的函数，其原理就是最小二乘法。第三个参数代表拟合的阶数。<br>函数返回的是一个行矩阵:$[ \theta_n, \theta_{n-1}, \theta_{n-2},.. . ,\theta_0]$<br><br><br></p><h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><hr><p>梯度下降是一个用来求函数最小值的算法，我们可以使用梯度下降算法来求出代价函数$J(\theta_0,\theta_1)$的最小值。 </p><p>梯度下降的思想是：<br>开始时我们随机选择一个参数的组合(𝜃0,𝜃1,……,𝜃𝑛)，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合（即<b>梯度</b>）。我们持续这么做直到到到一个<strong>局部最小值（local minimum）</strong>。<u>因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是<strong>全局最小值（global minimum）</strong>.</u>选择不同的初始参数组合，可能会找到不同的局部最小值。 </p><p><img src="https://s2.ax1x.com/2019/07/16/ZbHfmR.jpg" alt="梯度下降示意图"></p><p><b>批量梯度下降（Batch gradient descent）</b>的算法如下：</p><script type="math/tex; mode=display">repeat\ until\ convergence\ \{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j}J(\theta_0, \theta_1)  \ \ \ for  \  j = 0\ and \ 1</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><p>其中<b>α</b>是<b>学习率（learning rate）</b>，又可以说是<b>步长</b>，决定了我们沿着能让代价函数下降程度最大的方向迈出的步子有多大。</p><ul><li>α的值<b>不能取得太大</b>，否则有很大可能“错过极小值”，无法收敛，甚至发散。但也<b>不能太小</b>，否则迭代次数会很大，影响效率<img src="https://s2.ax1x.com/2019/07/16/ZbH4Tx.png" alt="在这里插入图片描述"></li><li>实际上，在梯度下降法中，当接近局部最低点时，梯度下降法会自动采取更小的<br>幅度。这是因为当我们接近局部最低点时，很显然在局部最低时导数等于零，所以当我们接<br>近局部最低时，<b>导数值会自动变得越来越小</b>，所以梯度下降将自动采取较小的幅度，所以我们没有必要在过程中另外再减少α的值<img src="https://s2.ax1x.com/2019/07/16/ZbHh01.png" alt></li></ul><h1 id="梯度下降的线性回归"><a href="#梯度下降的线性回归" class="headerlink" title="梯度下降的线性回归"></a>梯度下降的线性回归</h1><p>将梯度下降应用到刚刚的代价函数上，求其最小值。<br><br></p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_0}  = \frac {1}{2m} \sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-1)\ \</script><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_1}  =  \frac {1}{2m}\sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-x^{(i)})</script><p>故梯度下降算法可写成：</p><script type="math/tex; mode=display">Repeat\{ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><script type="math/tex; mode=display">\theta_0 := \theta_0 - \alpha \frac {1}{m} \sum ^{m}_{i=1}(h_\theta(x^{(i)})-y^{(i)})</script><script type="math/tex; mode=display">\theta_1 := \theta_1 - \alpha \frac {1}{m} \sum ^{m}_{i=1}(h_\theta(x^{(i)})-y^{(i)})·x^{(i)}</script><script type="math/tex; mode=display">\}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \</script><blockquote><p>这个名字”批量梯度下降”，指的是在梯度下降的每一步中，我们都<b>用到了所有的训练样本</b>。在梯度下降中，在计算微分求导项时，我们需要进行求和运算，所以，在每一个单独的梯度下降中，我们最终都要对所有𝑚个训练样本求和。因此，批量梯度下降法这个名字说明了我们需要考虑所有这一”批”训练样本。而事实上，有时也有其他类型的梯度下降法，不是这种”批量”型的，不考虑整个的训练集，而是每次只关注训练集中的一些小的子集。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一元线性回归&quot;&gt;&lt;a href=&quot;#一元线性回归&quot; class=&quot;headerlink&quot; title=&quot;一元线性回归&quot;&gt;&lt;/a&gt;一元线性回归&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;b&gt;回归（Regression）&lt;/b&gt;一词简单来说，指的是：我们根据之前的数据预测出一个准确的输出值&lt;/p&gt;
&lt;p&gt;&lt;b&gt;线性回归（Liner Regression）&lt;/b&gt;：寻找一条直线，最大程度地&lt;b&gt;拟合&lt;/b&gt;样本特征和样本输出标记之间的关系。样本特征只有一个，就被称为&lt;b&gt;简单线性回归&lt;/b&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="机器学习" scheme="/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="梯度下降" scheme="/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
      <category term="MATLAB" scheme="/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(九)：文件</title>
    <link href="/2019/07/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B9%9D/"/>
    <id>/2019/07/15/Python学习笔记-九/</id>
    <published>2019-07-15T13:06:39.000Z</published>
    <updated>2019-07-21T13:21:24.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第九章-文件"><a href="#第九章-文件" class="headerlink" title="第九章 文件"></a>第九章 文件</h1> <a id="more"></a><p><br><br></p><h2 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title="9.1 从文件中读取数据"></a>9.1 从文件中读取数据</h2><hr><h3 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title="9.1.1 读取整个文件"></a>9.1.1 读取整个文件</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi.txt</span><br><span class="line"></span><br><span class="line"><span class="number">3.14159</span></span><br><span class="line">  <span class="number">26535</span></span><br><span class="line">  <span class="number">89793</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14159</span></span><br><span class="line">  <span class="number">26535</span></span><br><span class="line">  <span class="number">89793</span></span><br></pre></td></tr></table></figure></p><ul><li><code>with open()</code>可以不需要在访问文件后关闭，随着with的结束，文件会自动关闭</li><li><code>open()</code>将目标文件打开，当做一个对象。</li><li><code>read()</code>将文件中所有内容读取为一个长长的字符串</li><li><p>输出的文本最后有空行是因为read()达到文件尾时会返回一个空字符串。消除空行可用rstrip()</p><h3 id="9-1-2-逐行读取"><a href="#9-1-2-逐行读取" class="headerlink" title="9.1.2 逐行读取"></a>9.1.2 逐行读取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></li></ul><p>输出：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line">  <span class="number">26535</span></span><br><span class="line">  </span><br><span class="line">  <span class="number">89793</span></span><br></pre></td></tr></table></figure></p><p>  每行之间都有一个空行，是因为文本文件每行结尾都有一个<b>换行符</b>,而print()每次都会自动换行，所以多了一个换行。<br>  将<code>print(line)</code>改为<code>print(line.rstrip())</code>即可解决</p><h3 id="9-1-3-创建一个包含文件各行内容的列表"><a href="#9-1-3-创建一个包含文件各行内容的列表" class="headerlink" title="9.1.3 创建一个包含文件各行内容的列表"></a>9.1.3 创建一个包含文件各行内容的列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'pi.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.strip())</span><br></pre></td></tr></table></figure><p><code>readlines()</code>读取文本中的每一行，并存储在一个列表里。<br>调用len()可以获知文件内容的行数。<br><b>这样可以让在with open结束后依然可以使用文本内容。</b></p><h3 id="9-1-4-replace-替换字符串的内容"><a href="#9-1-4-replace-替换字符串的内容" class="headerlink" title="9.1.4 replace()替换字符串的内容"></a>9.1.4 replace()替换字符串的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'I Love C++'</span></span><br><span class="line">s.replace(<span class="string">'C++'</span>,<span class="string">'Python'</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><blockquote><p>I Love Python</p></blockquote><p><br><br></p><h2 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title="9.2 写入文件"></a>9.2 写入文件</h2><hr><h3 id="9-2-1-写入空文件"><a href="#9-2-1-写入空文件" class="headerlink" title="9.2.1 写入空文件"></a>9.2.1 写入空文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    fo.write(<span class="string">'I love you'</span>)</span><br></pre></td></tr></table></figure><p>打开文件，会发现文件内容为：</p><blockquote><p>I love you</p></blockquote><h3 id="9-2-2-写入多行"><a href="#9-2-2-写入多行" class="headerlink" title="9.2.2 写入多行"></a>9.2.2 写入多行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    fo.write(<span class="string">'I love you'</span>)</span><br><span class="line">    fo.write(<span class="string">'I love you too'</span>)</span><br></pre></td></tr></table></figure><p>打开文件，会发现文件内容为：</p><blockquote><p>I love youI love you too</p></blockquote><p>write()不会像print()一样自动换行，所以要<b>自己添加换行符</b>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'filename'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fo:</span><br><span class="line">    fo.write(<span class="string">'I love you\n'</span>)</span><br><span class="line">    fo.write(<span class="string">'I love you too'</span>)</span><br></pre></td></tr></table></figure><h3 id="9-2-3-在文件后附加内容"><a href="#9-2-3-在文件后附加内容" class="headerlink" title="9.2.3 在文件后附加内容"></a>9.2.3 在文件后附加内容</h3><p>就是打开模式改为’a’</p><p><br> <br></p><h2 id="9-3-异常"><a href="#9-3-异常" class="headerlink" title="9.3 异常"></a>9.3 异常</h2><hr><h3 id="9-3-1-ZeroDivisionError异常"><a href="#9-3-1-ZeroDivisionError异常" class="headerlink" title="9.3.1 ZeroDivisionError异常"></a>9.3.1 ZeroDivisionError异常</h3><p>如果程序中出现除以0的情况，程序将会反馈Traceback错误信息：ZeroDivisionError</p><h3 id="9-3-2-try-except-代码块"><a href="#9-3-2-try-except-代码块" class="headerlink" title="9.3.2 try-except 代码块"></a>9.3.2 try-except 代码块</h3><p>当你认为可能发生错误时，可编写一个<code>try-except</code>代码块来处理可能引发的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"You can't divide by zero"</span>)</span><br></pre></td></tr></table></figure><ul><li>当<code>try</code>代码块出现异常时，Python将跳过<code>try</code>代码块而去执行<code>except</code>代码块。</li></ul><h3 id="9-3-3-else-代码块"><a href="#9-3-3-else-代码块" class="headerlink" title="9.3.3 else 代码块"></a>9.3.3 else 代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1 = <span class="number">5</span></span><br><span class="line">num2 = int(input())</span><br><span class="line">answer = num1/num2</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"You can't divide by zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(answer)</span><br></pre></td></tr></table></figure><p>-当<code>try</code>代码块执行成功时，将会接着执行<code>else</code>代码块</p><h3 id="9-3-4-FileNotFoundError异常"><a href="#9-3-4-FileNotFoundError异常" class="headerlink" title="9.3.4 FileNotFoundError异常"></a>9.3.4 FileNotFoundError异常</h3><p>文件打开失败时会返回改错误</p><h3 id="9-3-5-split-处理字符串"><a href="#9-3-5-split-处理字符串" class="headerlink" title="9.3.5 split()处理字符串"></a>9.3.5 split()处理字符串</h3><p><code>split()</code>函数将字符串根据空格分隔，并创建一个 <b>单词列表</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'I love you'</span></span><br><span class="line">words = s.split()</span><br><span class="line">print(words)</span><br></pre></td></tr></table></figure></p><blockquote><p>[‘I’, ‘love’, ‘you’]</p></blockquote><p>调用len()函数即可以获知字符串单词个数。</p><h3 id="9-3-6-处理多个文件"><a href="#9-3-6-处理多个文件" class="headerlink" title="9.3.6 处理多个文件"></a>9.3.6 处理多个文件</h3><p>有一种方法是将一系列文件名存在列表里：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">files = [<span class="string">'f1.txt'</span>, <span class="string">'f2.txt'</span>, <span class="string">'f3.txt'</span>]</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">with</span> open(filename):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><h3 id="9-3-7-使用pass语句跳过异常语句"><a href="#9-3-7-使用pass语句跳过异常语句" class="headerlink" title="9.3.7 使用pass语句跳过异常语句"></a>9.3.7 使用pass语句跳过异常语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>pass</code>语句会让Python什么都不做，“一声不吭”。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第九章-文件&quot;&gt;&lt;a href=&quot;#第九章-文件&quot; class=&quot;headerlink&quot; title=&quot;第九章 文件&quot;&gt;&lt;/a&gt;第九章 文件&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(八)：类</title>
    <link href="/2019/07/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AB/"/>
    <id>/2019/07/15/Python学习笔记-八/</id>
    <published>2019-07-15T09:36:04.000Z</published>
    <updated>2019-07-21T13:08:48.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八章-类"><a href="#第八章-类" class="headerlink" title="第八章 类"></a>第八章 类</h1> <a id="more"></a><p><br><br></p><h2 id="8-1-创建和使用类"><a href="#8-1-创建和使用类" class="headerlink" title="8.1 创建和使用类"></a>8.1 创建和使用类</h2><hr><h3 id="8-1-1-创建类"><a href="#8-1-1-创建类" class="headerlink" title="8.1.1 创建类"></a>8.1.1 创建类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""模拟小狗的类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        <span class="string">""" 初始化类信息"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" sit down!"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name.title() + <span class="string">" roll over!"</span>)</span><br></pre></td></tr></table></figure><ol><li>方法<code>__init__()</code></li></ol><ul><li>类中的函数称为<font face="楷体"><u>方法</u></font> ；你前面学到的有关函数的一切都适用于方法。</li><li>方法<strong>init</strong>()是一个特殊的方法，每当你根据Dog类创建新实例时，Python都会自动运行它。</li><li>在这个方法的名称里，开头和末尾都有两个下划线，<b>这是一种约定</b>，为了避免与普通方法名称冲突</li><li>该方法里有三个形参：self、 name和age。其中<b>self是必不可少的，还必须放在所有参数前面</b>。因为<b>每个与类相关联的方法都调用都自动传递self</b>,它是一个指向实例本身的<u>引用</u>，让实例能够访问类中的属性和方法。我们创建Dog实例时，Python将调用<strong>init</strong>()方法。我们通过实参向Dog()传递名字和年龄，而self会自动传递。所以每次我们只需要给最后两个形参（age和name）即可。</li><li><p>在方法<strong>init</strong>()的定义中，两个变量都有前缀self。以self为前缀的变量都可供类中的所有方法使用，可以通过类的任何实例访问这些量。<br>self.name=name获取存储在形参name中的值，并存储到变量name中，然后该变量被关联到创建的实例。<br>像这样可以通过实例访问的变量称为<font face="楷体"><u>属性</u></font>。</p><ol><li>Dog类还定义了另外两个方法：sit()和roll()。由于这些方法不需要额外的信息，因此他们只有一个形参self。</li></ol></li></ul><h3 id="8-1-2-根据类创建实例"><a href="#8-1-2-根据类创建实例" class="headerlink" title="8.1.2 根据类创建实例"></a>8.1.2 根据类创建实例</h3><p>可将类视为有关如何创建实例的说明。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'Tim'</span>, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">"My dog's name is "</span> + my_dog.name)</span><br><span class="line">print(<span class="string">"My dog's age is "</span> + str(my_dog.age))</span><br><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll()</span><br></pre></td></tr></table></figure></p><blockquote><p>My dog’s name is Tim<br>My dog’s age is 2<br>Tim sit down!<br>Tim roll over!</p></blockquote><p><br><br></p><h2 id="8-2-继承"><a href="#8-2-继承" class="headerlink" title="8.2 继承"></a>8.2 继承</h2><p>一个类继承另一个类时，它将<b>自动获得另一个类的所有属性和方法</b></p><hr><h3 id="8-2-1-子类的方法-init"><a href="#8-2-1-子类的方法-init" class="headerlink" title="8.2.1 子类的方法 __init__()"></a>8.2.1 子类的方法 __init__()</h3><p>创建子类的实例时，<u>Pyhton首先需要完成的是给父类的所有属性赋值</u>。为此，子类的init方法需要父类“施以援手”。<br>例如，下面来模拟电动汽车，其为继承自“车”的子类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>)</span><br><span class="line">print(my_tesla.get_name())</span><br></pre></td></tr></table></figure></p><blockquote><p>Tesla Model 2016</p></blockquote><ul><li>定义子类时，必须在括号内指定父类的名称</li><li>super()是一个特殊的函数，帮助Python将父类和子类关联。这行代码让Python调用ElectricCar的父类的方法<strong>init</strong>()，让ElectricCar实例包含父类的所有属性。父类又称超类(super class)，super函数也是因此得名。</li></ul><h3 id="8-2-2-给子类定义属性和方法"><a href="#8-2-2-给子类定义属性和方法" class="headerlink" title="8.2.2 给子类定义属性和方法"></a>8.2.2 给子类定义属性和方法</h3><p>让一个类继承另一个类之后，可以拥有自己独特的属性。<br>比如电动汽车有一项指标是电池容量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, make, model, year, batterysize)</span>:</span></span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.batterysize = batterysize</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_bat_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.batterysize</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>, <span class="number">70</span>)</span><br><span class="line">print(my_tesla.get_bat_size())</span><br></pre></td></tr></table></figure></p><blockquote><p>70</p></blockquote><h3 id="8-2-3-重写父类的方法"><a href="#8-2-3-重写父类的方法" class="headerlink" title="8.2.3 重写父类的方法"></a>8.2.3 重写父类的方法</h3><p>对于父类的方法，只要不符合子类的”规则”，都可以进行<b>重写</b>。即在子类中定义一个重名的方法，这样Python将不会考虑父类中的这个方法。<br>比如描述电动汽车的名字还需要带上电池容量，则需要重写get_name函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = self.make + <span class="string">' '</span> + self.model + <span class="string">' '</span> + str(self.year) + <span class="string">' '</span> + str(self.batterysize)</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>, <span class="string">'model'</span>, <span class="number">2016</span>, <span class="number">70</span>)</span><br><span class="line">print(my_tesla.get_name())</span><br></pre></td></tr></table></figure></p><blockquote><p>Tesla Model 2016 70</p></blockquote><h3 id="8-2-3-将类作为其他类的属性"><a href="#8-2-3-将类作为其他类的属性" class="headerlink" title="8.2.3 将类作为其他类的属性"></a>8.2.3 将类作为其他类的属性</h3><p>和C++类的嵌套相似，不多赘述</p><p><br></p><h2 id="8-3-导入类"><a href="#8-3-导入类" class="headerlink" title="8.3 导入类"></a>8.3 导入类</h2><div class="table-container"><table><thead><tr><th>语法</th><th>作用 </th></tr></thead><tbody><tr><td>from 模块名 import 类名</td><td>导入单个类 </td></tr><tr><td>from 模块名 import 类1，类2…</td><td>导入多个类</td></tr><tr><td>import  模块名</td><td>导入整个模块的类（使用需要加句点）</td></tr><tr><td>from 模块名 import *</td><td>导入模块所有类 (使用不需要加句点)</td></tr></tbody></table></div><h3 id="8-3-1-在一个模块中导入另一个模块"><a href="#8-3-1-在一个模块中导入另一个模块" class="headerlink" title="8.3.1 在一个模块中导入另一个模块"></a>8.3.1 在一个模块中导入另一个模块</h3><p>模块可以连环导入，比如<br><img src="https://s2.ax1x.com/2019/07/15/ZTAJ7F.png" alt></p><h2 id="8-4-Python标准库"><a href="#8-4-Python标准库" class="headerlink" title="8.4 Python标准库"></a>8.4 Python标准库</h2><p>Python标准库是Python内置的一组模块。只需在程序开头包含一条简单的import语句，便可使用标准库的函数和类。比如模块collections中的一个类——OrderedDict.<br>字典虽然能够把信息关联，但不能记录你添加键值对的顺序。而OrderedDict可以解决这个问题。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">fav_lang = OrderedDict()</span><br><span class="line"></span><br><span class="line">fav_lang[<span class="string">'Lily'</span>] = <span class="string">'C'</span></span><br><span class="line">fav_lang[<span class="string">'Tom'</span>] = <span class="string">'Python'</span></span><br><span class="line">fav_lang[<span class="string">'Jack'</span>] = <span class="string">'JAVA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, lang <span class="keyword">in</span> fav_lang.items():</span><br><span class="line">    print(name + <span class="string">" "</span> + lang)</span><br></pre></td></tr></table></figure></p><blockquote><p>Lily C<br>Tom Python<br>Jack JAVA</p></blockquote><p>输出的顺序与添加的顺序完全相同。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第八章-类&quot;&gt;&lt;a href=&quot;#第八章-类&quot; class=&quot;headerlink&quot; title=&quot;第八章 类&quot;&gt;&lt;/a&gt;第八章 类&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(七)：函数</title>
    <link href="/2019/07/14/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%83/"/>
    <id>/2019/07/14/Python学习笔记-七/</id>
    <published>2019-07-14T08:44:33.000Z</published>
    <updated>2019-07-25T03:51:24.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七章-函数"><a href="#第七章-函数" class="headerlink" title="第七章 函数"></a>第七章 函数</h1> <a id="more"></a><p> <br><br></p><h2 id="7-1-定义函数"><a href="#7-1-定义函数" class="headerlink" title="7.1 定义函数"></a>7.1 定义函数</h2><hr> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(username)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">greeting(<span class="string">'Tom'</span>) <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></figure><blockquote><p>输出：Hello, Tom!</p></blockquote><p><br><br></p><h2 id="7-2-传递实参"><a href="#7-2-传递实参" class="headerlink" title="7.2  传递实参"></a>7.2  传递实参</h2><hr><p>向函数传递实参的方式很多，可使用<font face="楷体"> 位置实参</font> ，这要求实参的顺序和形参的顺序相同；也可以使用<font face="楷体"> 关键字实参</font> ，其中每个参数都由变量名和值组成；还可以使用列表和字典。</p><h3 id="7-2-1-位置实参"><a href="#7-2-1-位置实参" class="headerlink" title="7.2.1 位置实参"></a>7.2.1 位置实参</h3><p>你调用函数时，Python必须将函数调用的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种方式被称为 <font face="楷体"> <u>位置实参 </u></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line">best_book(<span class="string">"Lucy"</span>, <span class="string">"scientific"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>The best book is Lucy<br>It’s a scientific</p></blockquote><p>调用方式与C大体相同，不多赘述。</p><h3 id="7-2-2-关键字实参"><a href="#7-2-2-关键字实参" class="headerlink" title="7.2.2 关键字实参"></a>7.2.2 关键字实参</h3><p> <font face="楷体"> <u>关键字实参 </u></font> 是传递给函数的 <b>名称-值对</b>。你直接在实参总将名称和值关联起来，因此向函数传递参数时不会混淆顺序。关键字实参让你无需考虑函数调用中的实参顺序，还清除指出各个值的用途。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line">best_book(book_type = <span class="string">"scientific"</span>, book_name = <span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出同上</p></blockquote><h3 id="7-2-3-默认值"><a href="#7-2-3-默认值" class="headerlink" title="7.2.3 默认值"></a>7.2.3 默认值</h3><p>编写函数时，可以给每个形参指定默认值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type=<span class="string">'scientific'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_book(book_name=<span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_book</span><span class="params">(book_name, book_type=<span class="string">'scientific'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"The best book is "</span> + book_name)</span><br><span class="line">    print(<span class="string">"It's a "</span> + book_type)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_book(<span class="string">'Lucy'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>输出皆为同上</p></blockquote><ul><li>有默认值的形参必须放在无默认值的形参后面（与C++相同）</li></ul><p><br><br></p><h2 id="7-3-返回值"><a href="#7-3-返回值" class="headerlink" title="7.3 返回值"></a>7.3 返回值</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name, last_name)</span>:</span></span><br><span class="line">    full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">me = name(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><blockquote><p>Eion Lee</p></blockquote><h3 id="7-3-1-让实参变成可选的"><a href="#7-3-1-让实参变成可选的" class="headerlink" title="7.3.1 让实参变成可选的"></a>7.3.1 让实参变成可选的</h3><p>就上面的例子来说，考虑到有的人有中间名，有的人没有<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name, last_name, middle_name = <span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name + <span class="string">" "</span> + middle_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">" "</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">me = name(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>)</span><br><span class="line">you = name(<span class="string">'TZ'</span>, <span class="string">'BEX'</span>, <span class="string">'F'</span>)</span><br><span class="line">print(me)</span><br><span class="line">print(you)</span><br></pre></td></tr></table></figure></p><blockquote><p>Eion Lee<br>Tz F Bex</p></blockquote><h3 id="7-3-2-返回字典"><a href="#7-3-2-返回字典" class="headerlink" title="7.3.2 返回字典"></a>7.3.2 返回字典</h3><p>返回值可以是复杂的变量，比如字典和列表。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(fn, ln, gd)</span>:</span></span><br><span class="line">    p = &#123;</span><br><span class="line">        <span class="string">'first_name'</span>: fn,</span><br><span class="line">        <span class="string">'last_name'</span>: ln,</span><br><span class="line">        <span class="string">'gender'</span>: gd</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T1 = person(<span class="string">'Eion'</span>, <span class="string">'Lee'</span>, <span class="string">'male'</span>)</span><br><span class="line">print(T1)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘first_name’: ‘Eion’, ‘last_name’: ‘Lee’, ‘gender’: ‘male’}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(f, s, t)</span>:</span></span><br><span class="line">    p = [f, s, t]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T1 = person(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(T1)</span><br></pre></td></tr></table></figure><blockquote><p>[1, 2, 3]</p></blockquote><p><br><br></p><h2 id="7-4-传递列表"><a href="#7-4-传递列表" class="headerlink" title="7.4 传递列表"></a>7.4 传递列表</h2><hr><p>将列表传递给函数非常有用。函数可以直接访问列表的内容，并对其进行修改。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greeting</span><span class="params">(names)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        print(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">guests = [<span class="string">'Tom'</span>,<span class="string">'Alice'</span>,<span class="string">'Bob'</span>]</span><br><span class="line">greeting(guests)</span><br></pre></td></tr></table></figure></p><blockquote><p>Hello, Tom!<br>Hello, Alice!<br>Hello, Bob!</p></blockquote><h3 id="7-4-1-用函数修改列表"><a href="#7-4-1-用函数修改列表" class="headerlink" title="7.4.1 用函数修改列表"></a>7.4.1 用函数修改列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(required)</span>:</span></span><br><span class="line">    finished = []</span><br><span class="line">    <span class="keyword">while</span> required:</span><br><span class="line">       cur = required.pop()</span><br><span class="line">       print(cur + <span class="string">" finished"</span>)</span><br><span class="line">       finished.append(cur)</span><br><span class="line">    <span class="keyword">return</span> finished</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re = [<span class="string">'Tom'</span>, <span class="string">'Alice'</span>, <span class="string">'Bob'</span>]</span><br><span class="line">fi = print_list(re)</span><br><span class="line">print(<span class="string">"\nUninished:"</span>)</span><br><span class="line">print(re)</span><br></pre></td></tr></table></figure><blockquote><p>Bob finished<br>Alice finished<br>Tom finished<br><br><br>Uninished:<br>[]</p></blockquote><h3 id="7-4-2-禁止函数修改列表"><a href="#7-4-2-禁止函数修改列表" class="headerlink" title="7.4.2 禁止函数修改列表"></a>7.4.2 禁止函数修改列表</h3><p>有时不需要函数修改列表。比如打印完后，还想查阅原来需要打印的名单，则不能让函数修改这份名单。<br>为解决这个问题，可以向函数<b>传递列表的副本</b>，而不是原列表<br>传递列表的副本可以这样做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_list(re[:])</span><br></pre></td></tr></table></figure></p><p>即： <u>将列表的<b>完整切片</b>传递给函数。</u><font size="5">★ </font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(required)</span>:</span></span><br><span class="line">    finished = []</span><br><span class="line">    <span class="keyword">while</span> required:</span><br><span class="line">       cur = required.pop()</span><br><span class="line">       print(cur + <span class="string">" finished"</span>)</span><br><span class="line">       finished.append(cur)</span><br><span class="line">    <span class="keyword">return</span> finished</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">re = [<span class="string">'Tom'</span>, <span class="string">'Alice'</span>, <span class="string">'Bob'</span>]</span><br><span class="line">fi = print_list(re[:])</span><br><span class="line">print(<span class="string">"\nRequired:"</span>)</span><br><span class="line">print(re)</span><br></pre></td></tr></table></figure><blockquote><p>Bob finished<br>Alice finished<br>Tom finished<br><br><br>Required:<br>[‘Tom’, ‘Alice’, ‘Bob’]</p></blockquote><p><br><br></p><h2 id="7-5-传递任意数量的参数"><a href="#7-5-传递任意数量的参数" class="headerlink" title="7.5 传递任意数量的参数"></a>7.5 传递任意数量的参数</h2><hr><p>有时候，预先不知道要传递多少个实参。但Python允许函数从调用语句中收集任意数量的实参。<br><br><br>例如，要计算若干个正数的和。下面的函数只有一个形参*nums,不管调用语句提供多少实参，这个形参都会把它们收入到一个<b>元组</b>中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summ</span><span class="params">(*nums)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">s = summ(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></p><blockquote><p>28</p></blockquote><p>形参名*nums中的星号让Python创建一个名为nums的<b>空元组</b>，并将所有收到的参数都封装进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summ</span><span class="params">(*nums)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    print(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">        sum += i</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">s = summ(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>(1, 2, 3, 4, 5, 6, 7)</p></blockquote><h3 id="7-5-1-结合使用位置参数和任意数量实参"><a href="#7-5-1-结合使用位置参数和任意数量实参" class="headerlink" title="7.5.1 结合使用位置参数和任意数量实参"></a>7.5.1 结合使用位置参数和任意数量实参</h3><p>如果要让函数接受不同类型的实参，<u>必须在函数定义中将接纳任意数量的实参的形参放在最后。<b>（仅对于位置参数）</b></u></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pizza</span><span class="params">(size, *ingds)</span>:</span></span><br><span class="line">    print(<span class="string">"Size: "</span> + str(size))</span><br><span class="line">    <span class="keyword">for</span> ingd <span class="keyword">in</span> ingds:</span><br><span class="line">        print(<span class="string">" - "</span> + ingd)</span><br><span class="line"></span><br><span class="line">pizza(<span class="number">12</span>, <span class="string">'pepper'</span>, <span class="string">'tomato'</span>)</span><br><span class="line">pizza(<span class="number">14</span>, <span class="string">'potato'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Size: 12<br>- pepper<br>- tomato<br>Size: 14<br>- potato</p></blockquote><h3 id="7-5-2-使用任意数量的关键字实参"><a href="#7-5-2-使用任意数量的关键字实参" class="headerlink" title="7.5.2 使用任意数量的关键字实参"></a>7.5.2 使用任意数量的关键字实参</h3><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键-值对。<br>比如要生成一份简历，但不知道会加入多少信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">me = profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘name’: ‘Eion’, ‘gender’: ‘male’, ‘age’: ‘18’, ‘job’: ‘stu’}</p></blockquote><p>形参名**info中的两个星号让Python创建一个名为info的<b>空字典</b>，并将所有收到的键值对都封装进去。</p><h3 id="7-5-3-强制使用关键字实参"><a href="#7-5-3-强制使用关键字实参" class="headerlink" title="7.5.3 强制使用关键字实参"></a>7.5.3 强制使用关键字实参</h3><p>将强制关键字参数放到某个*参数或者单个*后面就能达到这种效果。比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(maxsize, *, block)</span>:</span></span><br><span class="line">    print(<span class="string">'Receives a message'</span>)</span><br><span class="line"></span><br><span class="line">recv(<span class="number">1024</span>, <span class="literal">True</span>) <span class="comment"># TypeError</span></span><br><span class="line">recv(<span class="number">1024</span>, block = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><p>在第一次调用中，True被当做星号的任意实参，导致没有参数传递给block，所以报错。<br><br><br><br>利用这种技术，我们还能在接受任意多个位置参数的函数中指定关键字参数。比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimum</span><span class="params">(*values, clip=None)</span>:</span></span><br><span class="line">    m = min(values)</span><br><span class="line">    <span class="keyword">if</span> clip <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        m = clip <span class="keyword">if</span> clip &gt; m <span class="keyword">else</span> m</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">minimum(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">-5</span>, <span class="number">10</span>) <span class="comment"># Returns -5</span></span><br><span class="line">minimum(<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">-5</span>, <span class="number">10</span>, clip=<span class="number">0</span>) <span class="comment"># Returns 0</span></span><br></pre></td></tr></table></figure></p><p><br><br></p><h2 id="7-6-将函数存储在模块中"><a href="#7-6-将函数存储在模块中" class="headerlink" title="7.6 将函数存储在模块中"></a>7.6 将函数存储在模块中</h2><p>函数的有点之一是，使用它们可以将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解的多。你还可以更进一步，将函数存储在被称为<font face="楷体">模块</font>的独立文件中，在将模块<font face="楷体">导入</font>到主程序。<br><code>import</code>语句允许当前运行的程序文件中使用模块的代码。</p><h3 id="7-6-1-导入整个模块"><a href="#7-6-1-导入整个模块" class="headerlink" title="7.6.1 导入整个模块"></a>7.6.1 导入整个模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">me = func.profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><blockquote><p>{‘name’: ‘Eion’, ‘gender’: ‘male’, ‘age’: ‘18’, ‘job’: ‘stu’}</p></blockquote><h3 id="7-6-2-导入特定的函数"><a href="#7-6-2-导入特定的函数" class="headerlink" title="7.6.2 导入特定的函数"></a>7.6.2 导入特定的函数</h3><p>还可以导入模块中的特定函数，语法如下：<br><code>from 模块名 import  函数1, 函数2, ....</code><br>通过逗号分隔多个函数</p><ul><li>若用这种语法，则调用函数时<u>不需要用句点指定模块名。</u></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># func.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span><span class="params">(name, gender, **info)</span>:</span></span><br><span class="line">    p = &#123;<span class="string">'name'</span>: name, <span class="string">'gender'</span>: gender&#125;</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        p[key] = value</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> profile</span><br><span class="line"></span><br><span class="line">me = profile(<span class="string">'Eion'</span>, <span class="string">'male'</span>, age=<span class="string">'18'</span>, job=<span class="string">'stu'</span>)</span><br><span class="line">print(me)</span><br></pre></td></tr></table></figure><h3 id="7-6-3-使用as给函数-模块指定别名"><a href="#7-6-3-使用as给函数-模块指定别名" class="headerlink" title="7.6.3 使用as给函数/模块指定别名"></a>7.6.3 使用as给函数/模块指定别名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> profile <span class="keyword">as</span> pf</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> func <span class="keyword">as</span> fc</span><br></pre></td></tr></table></figure><h3 id="7-6-4-导入模块中的所有函数"><a href="#7-6-4-导入模块中的所有函数" class="headerlink" title="7.6.4 导入模块中的所有函数"></a>7.6.4 导入模块中的所有函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> func <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p>该语句中的星号让Python将模块func中的所有函数复制到这个程序文件中。</p><ul><li>由于是导入函数，所以所有函数都不需要加句点调用。</li><li>但最好不要采用这种方法：如果遇到不同模块中有着相同名称的函数，则会出错。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第七章-函数&quot;&gt;&lt;a href=&quot;#第七章-函数&quot; class=&quot;headerlink&quot; title=&quot;第七章 函数&quot;&gt;&lt;/a&gt;第七章 函数&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(六)：输入与while循环</title>
    <link href="/2019/07/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%AD/"/>
    <id>/2019/07/13/Python学习笔记-六/</id>
    <published>2019-07-13T11:51:29.000Z</published>
    <updated>2019-07-21T13:08:48.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六章-输入与while循环"><a href="#第六章-输入与while循环" class="headerlink" title="第六章 输入与while循环"></a>第六章 输入与while循环</h1><a id="more"></a><p><br><br></p><h2 id="6-1-函数input-的工作原理"><a href="#6-1-函数input-的工作原理" class="headerlink" title="6.1 函数input()的工作原理"></a>6.1 函数input()的工作原理</h2><hr><p>函数<code>input()</code>让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">''</span></span><br><span class="line">name = input(<span class="string">"who are you?"</span>)</span><br><span class="line">print(<span class="string">"Hello, "</span> + name + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>who are you?<br>输入：tim<br>输出：<br>Hello, tim!</p></blockquote><p>函数input()接受一个参数：即要向用户展示的<font face="楷体">提示或说明</font>。<br>程序等待用户输入，在用户按回车键后继续运行。</p><h3 id="6-1-1-用int-获取数值输入"><a href="#6-1-1-用int-获取数值输入" class="headerlink" title="6.1.1 用int()获取数值输入"></a>6.1.1 用int()获取数值输入</h3><p>使用函数input()时，Python会将用户输入解读为字符串。<br>可以使用<code>int()</code>函数，让Python将参数汇总的的字符串转化为数值。（与str()对应）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="string">''</span></span><br><span class="line">age = input(<span class="string">"How old are you?\n"</span>)</span><br><span class="line">age = int(age)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"You are an adult."</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>输入：19<br>输出：You are an adult.</p></blockquote><p><br><br></p><h2 id="6-2-while循环"><a href="#6-2-while循环" class="headerlink" title="6.2 while循环"></a>6.2 while循环</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="number">5</span>:</span><br><span class="line">   print(num)</span><br><span class="line">   num += <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>1<br>2<br>3<br>4<br>5</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = input(<span class="string">"i am a repeater\n"</span>)</span><br><span class="line"><span class="keyword">while</span> s != <span class="string">'quit'</span></span><br><span class="line">    print(s)</span><br><span class="line">    s = input()</span><br></pre></td></tr></table></figure><blockquote><p>复读机，直到用户输入quit停止</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span></span><br><span class="line">count = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    print(count)</span><br><span class="line">    count -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count &lt; <span class="number">0</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>5<br>4<br>3<br>2<br>1<br>0</p></blockquote><h3 id="6-2-1-在循环中使用break和continue"><a href="#6-2-1-在循环中使用break和continue" class="headerlink" title="6.2.1 在循环中使用break和continue"></a>6.2.1 在循环中使用break和continue</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    s = input()</span><br><span class="line">    <span class="keyword">if</span> s == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"You just inputed "</span> + s)</span><br></pre></td></tr></table></figure><blockquote><p>复读机，直到输入quit</p></blockquote><p>continue不多赘述，与C语言作用相同<br><br><br></p><h2 id="6-3-用while循环来处理列表和字典"><a href="#6-3-用while循环来处理列表和字典" class="headerlink" title="6.3 用while循环来处理列表和字典"></a>6.3 用while循环来处理列表和字典</h2><hr><h3 id="6-3-1-在列表之间移动元素"><a href="#6-3-1-在列表之间移动元素" class="headerlink" title="6.3.1 在列表之间移动元素"></a>6.3.1 在列表之间移动元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">target = [<span class="string">'apple'</span>, <span class="string">'bannana'</span>, <span class="string">'peach'</span>]</span><br><span class="line">shopping_car = []</span><br><span class="line"><span class="keyword">while</span> target:</span><br><span class="line">    cur = target.pop()</span><br><span class="line">    print(<span class="string">"Buy "</span> + cur)</span><br><span class="line">    shopping_car.append(cur)</span><br><span class="line">print(<span class="string">"You have bought these:"</span>)</span><br><span class="line">print(shopping_car)</span><br><span class="line">print(<span class="string">"These not bought:"</span>)</span><br><span class="line">print(target)</span><br></pre></td></tr></table></figure><blockquote><p>Buy peach<br>Buy bannana<br>Buy apple<br>You have bought these:<br>[‘peach’, ‘bannana’, ‘apple’]<br>These not bought:<br>[]</p></blockquote><h3 id="6-3-2-删除所有列表中的特定值"><a href="#6-3-2-删除所有列表中的特定值" class="headerlink" title="6.3.2 删除所有列表中的特定值"></a>6.3.2 删除所有列表中的特定值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'peach'</span>, <span class="string">'apple'</span>, <span class="string">'apple'</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">'apple'</span> <span class="keyword">in</span> fruits:</span><br><span class="line">    fruits.remove(<span class="string">'apple'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><blockquote><p>[‘orange’, ‘peach’]</p></blockquote><h3 id="6-3-3-利用输入填充字典"><a href="#6-3-3-利用输入填充字典" class="headerlink" title="6.3.3 利用输入填充字典"></a>6.3.3 利用输入填充字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cilent = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name = input(<span class="string">"Please input your name:"</span>)</span><br><span class="line">    nick_name = input(<span class="string">"Please input your nickname:"</span>)</span><br><span class="line">    cilent[nick_name] = name</span><br><span class="line">    re = input(<span class="string">"Would you like to continue? (yes/no)"</span>)</span><br><span class="line">    <span class="keyword">if</span> re == <span class="string">'no'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(cilent)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六章-输入与while循环&quot;&gt;&lt;a href=&quot;#第六章-输入与while循环&quot; class=&quot;headerlink&quot; title=&quot;第六章 输入与while循环&quot;&gt;&lt;/a&gt;第六章 输入与while循环&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(五):字典</title>
    <link href="/2019/07/13/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94/"/>
    <id>/2019/07/13/Python学习笔记-五/</id>
    <published>2019-07-13T08:58:20.000Z</published>
    <updated>2019-07-25T03:47:43.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五章-字典"><a href="#第五章-字典" class="headerlink" title="第五章 字典"></a>第五章 字典</h1><a id="more"></a><p><br><br></p><h2 id="5-1-使用字典"><a href="#5-1-使用字典" class="headerlink" title="5.1 使用字典"></a>5.1 使用字典</h2><hr><p>在Python中，<font face="楷体">字典</font> 是一系列 <font face="楷体">键-值对</font> 。每个键都与一个值相关，可以用键值访问与之关联的值。<br>用放在<u>花括号</u>{ }中的一系列键-值对表示字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line">print(Tom[<span class="string">'gender'</span>])</span><br></pre></td></tr></table></figure></p><p>输出：</p><blockquote><p>male</p></blockquote><h3 id="5-1-1-添加键值对"><a href="#5-1-1-添加键值对" class="headerlink" title="5.1.1 添加键值对"></a>5.1.1 添加键值对</h3><p>字典是一种<b>动态结构</b>，可随时在其中添加键值对。要添加键值对，可依次指明字典名、用方括号括其键、将值赋值给它。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line">Tom[<span class="string">'hobby'</span>] = <span class="string">'football'</span></span><br><span class="line">print(Tom)</span><br></pre></td></tr></table></figure></p><p>输出：</p><blockquote><p>{‘gender’: ‘male’, ‘age’: 15, ‘home’: ‘New York’, ‘hobby’: ‘football’}</p></blockquote><h3 id="5-1-2-修改字典中的值"><a href="#5-1-2-修改字典中的值" class="headerlink" title="5.1.2 修改字典中的值"></a>5.1.2 修改字典中的值</h3><p>直接赋值，不多赘述</p><h3 id="5-1-3-删除键值对"><a href="#5-1-3-删除键值对" class="headerlink" title="5.1.3 删除键值对"></a>5.1.3 删除键值对</h3><p>对于字典中不需要的信息，可以用<code>del</code>语句直接彻底删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'age'</span> : <span class="number">15</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">del</span> Tom[age]</span><br><span class="line">print(Tom)</span><br></pre></td></tr></table></figure></p><blockquote><p>{‘gender’: ‘male’, ‘home’: ‘New York’}</p></blockquote><p><br><br></p><h2 id="5-2-遍历字典"><a href="#5-2-遍历字典" class="headerlink" title="5.2 遍历字典"></a>5.2 遍历字典</h2><hr><h3 id="5-2-1-遍历字典所有信息"><a href="#5-2-1-遍历字典所有信息" class="headerlink" title="5.2.1 遍历字典所有信息"></a>5.2.1 遍历字典所有信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> Tom.items():</span><br><span class="line">   print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line">   print(<span class="string">"Value: "</span> + value)</span><br></pre></td></tr></table></figure><ul><li>要编写遍历字典的for循环，需要声明两个变量，用于存储键和值。</li><li>方法<code>items()</code>返回一个<b>键值对列表</b>。</li></ul><h3 id="5-2-2-遍历字典中所有的键"><a href="#5-2-2-遍历字典中所有的键" class="headerlink" title="5.2.2 遍历字典中所有的键"></a>5.2.2 遍历字典中所有的键</h3><p>在不需要使用字典中的值时，方法<code>keys()</code>很有用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> Tom.keys():</span><br><span class="line">   print(<span class="string">"Key: "</span> + key)</span><br></pre></td></tr></table></figure></p><blockquote><p>Key: gender<br>Key: home</p></blockquote><ul><li>keys()返回一个<b>键列表</b></li></ul><h3 id="5-2-3-遍历字典中所有的值"><a href="#5-2-3-遍历字典中所有的值" class="headerlink" title="5.2.3 遍历字典中所有的值"></a>5.2.3 遍历字典中所有的值</h3><p>同理，用方法<code>values()</code> 可以得到一个<b>值列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Tom = &#123;</span><br><span class="line">    <span class="string">'gender'</span>:<span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'home'</span>:<span class="string">'New York'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> Tom.values():</span><br><span class="line">   print(<span class="string">"Values: "</span> + val)</span><br></pre></td></tr></table></figure></b></p><blockquote><p>Values: male<br>Values: New York</p></blockquote><p><br><br></p><h2 id="5-3-嵌套"><a href="#5-3-嵌套" class="headerlink" title="5.3 嵌套*"></a>5.3 嵌套*</h2><hr><p>字典、元组、列表之间可以相互嵌套<br>比如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">c = &#123;</span><br><span class="line">    <span class="number">1</span>: a,</span><br><span class="line">    <span class="number">2</span>: b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">20</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">c = [a, b]</span><br></pre></td></tr></table></figure><p>但需要注意：</p><ul><li>被嵌套的字典、列表、元组<u>并不是复制一套新副本进去</u>，而是将其<b>“引用”</b>被包含进去。即改变被包含的元素，原列表/元组/字典同样会改变。</li><li>被包含的简单变量不会变化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典包含列表</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">c = &#123;</span><br><span class="line">    <span class="number">1</span>: a,</span><br><span class="line">    <span class="number">2</span>: b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">print(c[<span class="number">1</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><blockquote><p>c[1] : [3, 2]<br>a : [3, 2]</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表包含字典</span></span><br><span class="line">a = &#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">20</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>: <span class="number">30</span>&#125;</span><br><span class="line">c = [a, b]</span><br><span class="line"></span><br><span class="line">c[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">print(c[<span class="number">0</span>])</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><blockquote><p>c[0] : {1: 100, 2: 20}<br>a : {1: 100, 2: 20}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表包含简单变量</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">a = [i, <span class="number">2</span>]</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">print(a[<span class="number">0</span>])</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><blockquote><p>a[0] : 2<br>i : 1</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第五章-字典&quot;&gt;&lt;a href=&quot;#第五章-字典&quot; class=&quot;headerlink&quot; title=&quot;第五章 字典&quot;&gt;&lt;/a&gt;第五章 字典&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(四)：if语句</title>
    <link href="/2019/07/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>/2019/07/12/Python学习笔记-四/</id>
    <published>2019-07-12T07:22:46.000Z</published>
    <updated>2019-07-25T03:47:17.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章-if语句"><a href="#第四章-if语句" class="headerlink" title="第四章 if语句"></a>第四章 if语句</h1><a id="more"></a><p><br><br></p><h2 id="4-1-条件测试"><a href="#4-1-条件测试" class="headerlink" title="4.1 条件测试"></a>4.1 条件测试</h2><hr><h3 id="4-1-1-检查是否相等"><a href="#4-1-1-检查是否相等" class="headerlink" title="4.1.1 检查是否相等"></a>4.1.1 检查是否相等</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">'bmw'</span></span><br><span class="line">print(car == <span class="string">'bmw'</span>)</span><br><span class="line">print(car == <span class="string">'byd'</span>)</span><br><span class="line">print(car != <span class="string">'byd'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>True<br>False<br>True</p></blockquote><ul><li><code>==</code> 等于</li><li><code>!=</code> 不等于</li><li><code>&gt;, &gt;=, &lt;, &lt;=</code> 大小于等于</li></ul><h3 id="4-1-2-检查多个条件"><a href="#4-1-2-检查多个条件" class="headerlink" title="4.1.2 检查多个条件"></a>4.1.2 检查多个条件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">car = <span class="string">'bmw'</span></span><br><span class="line">phone = <span class="string">'iphone'</span></span><br><span class="line">print(car == <span class="string">'bmw'</span> <span class="keyword">and</span> phone == <span class="string">'iphone'</span>)</span><br><span class="line">print(car == <span class="string">'byd'</span> <span class="keyword">or</span> phone == <span class="string">'samsung'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>True<br>False</p></blockquote><ul><li><code>and</code> 逻辑且</li><li><code>or</code> 逻辑或</li></ul><h3 id="4-1-3-检查特定值是否在列表中"><a href="#4-1-3-检查特定值是否在列表中" class="headerlink" title="4.1.3 检查特定值是否在列表中"></a>4.1.3 检查特定值是否在列表中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">print(<span class="number">30</span> <span class="keyword">in</span> nums)</span><br><span class="line">print(<span class="number">40</span> <span class="keyword">not</span> <span class="keyword">in</span> nums)</span><br></pre></td></tr></table></figure><blockquote><p>True<br>True</p></blockquote><ul><li><code>in</code> 在列表中</li><li><code>not in</code>不在列表中</li></ul><h3 id="4-1-4-布尔表达式"><a href="#4-1-4-布尔表达式" class="headerlink" title="4.1.4 布尔表达式"></a>4.1.4 布尔表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span></span><br><span class="line">flag = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>不多赘述<br><br><br></p><h2 id="4-2-if语句"><a href="#4-2-if语句" class="headerlink" title="4.2 if语句"></a>4.2 if语句</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"You are old enough"</span>)</span><br><span class="line">print(<span class="string">"You can vote now"</span>)</span><br></pre></td></tr></table></figure><p>没有输出结果<br><br>Python的if语句不需要加括号。<b><u>注意冒号</u></b></p><h3 id="4-2-1-if-else语句"><a href="#4-2-1-if-else语句" class="headerlink" title="4.2.1 if-else语句"></a>4.2.1 if-else语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"You are old enough"</span>)</span><br><span class="line">print(<span class="string">"You can vote now"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"You are too young"</span>)</span><br><span class="line">print(<span class="string">"Please wait for "</span> + str(<span class="number">18</span>-age) + <span class="string">" year(s)"</span>)</span><br></pre></td></tr></table></figure><p>输出结果:</p><blockquote><p>You are too young<br>Please wait for 3 year(s)</p></blockquote><h3 id="4-2-2-if-elif-else语句"><a href="#4-2-2-if-elif-else语句" class="headerlink" title="4.2.2 if-elif-else语句"></a>4.2.2 if-elif-else语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">15</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">print(<span class="string">"You are an adult"</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">12</span>:</span><br><span class="line">print(<span class="string">"You are a teenager"</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">print(<span class="string">"You are a child"</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>You are a teenager</p></blockquote><h3 id="4-2-3-检查列表是否为空"><a href="#4-2-3-检查列表是否为空" class="headerlink" title="4.2.3 检查列表是否为空"></a>4.2.3 检查列表是否为空</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="keyword">if</span> nums:</span><br><span class="line">print(<span class="string">"list is not empty"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">"list is empty"</span>)</span><br></pre></td></tr></table></figure><p>输出为：</p><blockquote><p>list is empty</p></blockquote><h3 id="4-2-4-if语句与布尔表达式"><a href="#4-2-4-if语句与布尔表达式" class="headerlink" title="4.2.4 if语句与布尔表达式"></a>4.2.4 if语句与布尔表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    print(<span class="string">"YES"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"NO"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>YES</p></blockquote><p>不多赘述</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第四章-if语句&quot;&gt;&lt;a href=&quot;#第四章-if语句&quot; class=&quot;headerlink&quot; title=&quot;第四章 if语句&quot;&gt;&lt;/a&gt;第四章 if语句&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(三)：操作列表</title>
    <link href="/2019/07/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>/2019/07/12/Python学习笔记-三/</id>
    <published>2019-07-12T06:24:40.000Z</published>
    <updated>2019-07-25T03:47:43.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-操作列表"><a href="#第三章-操作列表" class="headerlink" title="第三章 操作列表"></a>第三章 操作列表</h1><a id="more"></a><p><br><br></p><h2 id="3-1-遍历整个列表"><a href="#3-1-遍历整个列表" class="headerlink" title="3.1 遍历整个列表"></a>3.1 遍历整个列表</h2><hr><p>我们可以用for循环遍历整个列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br><span class="line">   print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>apple<br>banana<br>orange</p></blockquote><ul><li><b>不要忘了<font size="5"><u>冒号</u></font></b></li></ul><h3 id="3-1-1-深入研究循环"><a href="#3-1-1-深入研究循环" class="headerlink" title="3.1.1 深入研究循环"></a>3.1.1 深入研究循环</h3><p> ① 在上述循环中，程序先读到这一行代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br></pre></td></tr></table></figure></p><p>这让Python从列表中获取第一个元素’apple’ ，<b>将其赋值给 i </b><br><br><br></p><p>② 接着程序执行循环体中的语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(i)</span><br></pre></td></tr></table></figure></p><p>由此将i的值（即’apple’）打印出来<br><br><br>③ 程序总共重复上述步骤三次，结束循环<br><br><br></p><ul><li>需要注意的是，循环过程中，是<u>将列表的元素赋值给循环标记</u>（i）的</li></ul><p>如下代码可以体现这一点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br><span class="line">    i = i.title()</span><br><span class="line">    print(i)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>Apple<br>Banana<br>Orange<br>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p><b>原列表中的元素并没有因i的改变而发生变化</b></p><h3 id="3-1-2-在循环中执行更多操作"><a href="#3-1-2-在循环中执行更多操作" class="headerlink" title="3.1.2 在循环中执行更多操作"></a>3.1.2 在循环中执行更多操作</h3><p>在一次迭代中可以执行无数句语句，只需将它们按相同格式缩进即可：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fruits:</span><br><span class="line">    print(i)</span><br><span class="line">    print(<span class="string">"I love "</span> + i.title())</span><br><span class="line">print(<span class="string">"I love them all!"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>apple<br>I love Apple<br>banana<br>I love Banana<br>orange<br>I love Orange<br>I love them all!</p></blockquote><p><br><br></p><h2 id="3-2-创建数值列表"><a href="#3-2-创建数值列表" class="headerlink" title="3.2 创建数值列表"></a>3.2 创建数值列表</h2><hr><h3 id="3-2-1-使用函数range"><a href="#3-2-1-使用函数range" class="headerlink" title="3.2.1 使用函数range()"></a>3.2.1 使用函数range()</h3><p><code>range()</code> 函数可以生产一系列连续的数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>2<br>3</p></blockquote><ul><li>range(a, b)生成的区间为 <u> a ~ (b-1) </u></li><li><b>range()生成的不是列表</b></li></ul><p>range()函数还可以<b>指定步长</b>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>):</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>1<br>3<br>5<br>7<br>9</p></blockquote><h3 id="3-2-2-使用list-和range-函数创建数值列表"><a href="#3-2-2-使用list-和range-函数创建数值列表" class="headerlink" title="3.2.2 使用list()和range()函数创建数值列表"></a>3.2.2 使用list()和range()函数创建数值列表</h3><p>可以使用函数<code>list()</code>将range()转化成数字列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(range(<span class="number">1</span>, <span class="number">4</span>)))</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>[1, 2, 3]</p></blockquote><h3 id="3-2-3-max-，min-，sum-函数"><a href="#3-2-3-max-，min-，sum-函数" class="headerlink" title="3.2.3 max()，min()，sum()函数"></a>3.2.3 max()，min()，sum()函数</h3><p>将数字列表名称作为函数<code>max()</code>的参数，返回列表中的最大值<br>同理<code>min()</code>返回最小值，<code>sum()</code>返回列表所有元素的和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">10</span>]</span><br><span class="line">print(max(nums))</span><br><span class="line">print(min(nums))</span><br><span class="line">print(sum(nums))</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>10<br>1<br>16</p></blockquote><h3 id="3-2-4-列表解析"><a href="#3-2-4-列表解析" class="headerlink" title="3.2.4 列表解析*"></a>3.2.4 列表解析<font size="6">*</font></h3><p>用前面介绍的方式形成一个平方列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">   squares.append(i**<span class="number">2</span>)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</p></blockquote><p>使用列表解析，可以一行之内完成上述代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [i ** <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure></p><p>输出结果同上<br><br><br></p><ol><li>使用这种语法, 首先指定一个描述性的列表名，如square；</li><li>然后指定一个左方括号，并定义一个表达式。在这里表达式为 i ** 2</li><li>接着编写一个for循环，给表达式提供值（此处没有冒号），并加上右方括号</li></ol><p><br><br></p><h2 id="3-3-使用列表的一部分：切片"><a href="#3-3-使用列表的一部分：切片" class="headerlink" title="3.3 使用列表的一部分：切片"></a>3.3 使用列表的一部分：切片</h2><hr><p>要创建切片，可指定要使用的<u>第一个元素和最后一个元素的索引</u>，<b>和range一样，最后一个元素不取</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits[<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’]</p></blockquote><ul><li>如果没有指定起始索引，如 fruit[:2]，则默认从列表开头开始</li><li>同理如果没有指定结束为止，如 fruit[2:]，则默认到列表尾结束</li><li>fruit[-2:] 表示从倒数第二个到最后一个的切片</li></ul><p><br><br></p><h2 id="3-4-复制列表"><a href="#3-4-复制列表" class="headerlink" title="3.4 复制列表"></a>3.4 复制列表</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">your_fruits = my_fruits  <span class="comment">#尽量不要这么复制</span></span><br><span class="line">print(your_fruits)</span><br></pre></td></tr></table></figure><blockquote><p>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p>可直接将列表名赋值给新列表，以达到复制的效果。<font size="5"><b> <u>但尽量不要这么做！</u></b></font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">your_fruits = my_fruits</span><br><span class="line">my_fruits.append(<span class="string">'peach'</span>)</span><br><span class="line">print(your_fruits)</span><br></pre></td></tr></table></figure></p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘peach’]</p></blockquote><p>可以发现，在将my_fruits赋值给your_fruit后，在my列表后添加了新元素，your列表后也同样出现了这个新元素.<br>说明，被赋值的新列表和原列表用的同一个列表，新列表 是跟着 原列表 一起改变的<b>（类似于C++里的引用）</b></p><p><font size="5"><b>*</b></font> 比较正确规范的做法是<b><u>将切片复制给新列表</u></b>&lt;/u&gt;,这样是将新的副本复制给新列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">your_fruits = my_fruits[:]</span><br><span class="line">my_fruits.append(<span class="string">'peach'</span>)</span><br><span class="line">print(your_fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p>新列表并没有发生改变</p><h2 id="3-5-元组"><a href="#3-5-元组" class="headerlink" title="3.5 元组"></a>3.5 元组</h2><hr><p>列表是可以修改的。然而有时候需要创建一系列不可修改的元素，<font face="楷体" size="3"><u>元组</u> </font>可以满足这种需求。</p><h3 id="3-5-1-定义元组"><a href="#3-5-1-定义元组" class="headerlink" title="3.5.1 定义元组"></a>3.5.1 定义元组</h3><p>元组使用<b>圆括号</b>来标识，同样可以用索引来访问其值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dim = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">print(dim[<span class="number">0</span>])</span><br><span class="line">print(dim[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><blockquote><p>200<br>50</p></blockquote><h3 id="3-5-2-遍历元组"><a href="#3-5-2-遍历元组" class="headerlink" title="3.5.2 遍历元组"></a>3.5.2 遍历元组</h3><p>和遍历链表一样，不多赘述</p><h3 id="3-5-3-修改元组变量"><a href="#3-5-3-修改元组变量" class="headerlink" title="3.5.3 修改元组变量"></a>3.5.3 修改元组变量</h3><p>虽然不能修改元组的元素，但可以给<u>存储元组的变量</u>(比如此处的dim)赋值。因此，需要通过<strong>重新定义</strong>的方法修改元组：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dim = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line">print(dim)</span><br><span class="line">dim = (<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">print(dim)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>(200, 50)<br>(2, 5)</p></blockquote><p><strong>给元组变量赋值的操作是合法的</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三章-操作列表&quot;&gt;&lt;a href=&quot;#第三章-操作列表&quot; class=&quot;headerlink&quot; title=&quot;第三章 操作列表&quot;&gt;&lt;/a&gt;第三章 操作列表&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(二)：列表</title>
    <link href="/2019/07/11/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>/2019/07/11/Python学习笔记-二/</id>
    <published>2019-07-11T06:42:23.000Z</published>
    <updated>2019-07-25T03:47:43.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-列表简介"><a href="#第二章-列表简介" class="headerlink" title="第二章 列表简介"></a>第二章 列表简介</h1><a id="more"></a><p><br><br></p><h2 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h2><hr><p><font face="楷体" size="3"><u>列表</u> </font>由一系列元素按特定顺序排列组成。</p><p>在Python中，用方括号（ [ ] ）来表示列表，并用逗号分隔其中的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>如果将列表打印出来，Python将打印列表的内部表示，包括方括号。<br>输出结果：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><h3 id="2-1-1-访问列表元素"><a href="#2-1-1-访问列表元素" class="headerlink" title="2.1.1 访问列表元素"></a>2.1.1 访问列表元素</h3><p>列表是有序集合，要访问列表元素，只需像C语言中的数组一样，将元素的索引或位置表示出来即可。<br>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>apple</p></blockquote><ul><li>可以发现列表的索引与数组一样都是从0开始的。</li><li>但Python还提供了一种特殊语法，索引-1返回倒数第一个元素。<u>所以一个长度为a的列表索引取值范围为：[ -a, a-1]  </u><br><br> <br></li></ul><h2 id="2-2-修改、添加和删除元素"><a href="#2-2-修改、添加和删除元素" class="headerlink" title="2.2 修改、添加和删除元素"></a>2.2 修改、添加和删除元素</h2><hr><h3 id="2-1-1-修改"><a href="#2-1-1-修改" class="headerlink" title="2.1.1 修改"></a>2.1.1 修改</h3><p>可直接用赋值的方法修改列表的元素<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">"peach"</span></span><br><span class="line">print(fruits[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></p><h3 id="2-2-2-添加"><a href="#2-2-2-添加" class="headerlink" title="2.2.2 添加"></a>2.2.2 添加</h3><h4 id="1-在列表末尾添加元素"><a href="#1-在列表末尾添加元素" class="headerlink" title="1.在列表末尾添加元素"></a>1.在列表末尾添加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits.append(<span class="string">'peach'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘peach’]</p></blockquote><p>方法<code>append()</code>会将参数的元素添加到列表末尾，而不影响其他元素</p><h4 id="2-在列表中插入元素"><a href="#2-在列表中插入元素" class="headerlink" title="2.在列表中插入元素"></a>2.在列表中插入元素</h4><p>使用<code>insert()</code>可在列表中的任何位置插入新的元素。<b>为此需要指定新元素和索引的值。</b><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">fruits.insert(<span class="number">2</span>,<span class="string">'peach'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><ul><li>在此示例中，insert(2, ‘peach’) 将新元素: ‘peach’（第二个参数）插入到原列表的第2个位置（第一个参数）；同时，从原来第2个位置往后的所有元素后移一位。</li></ul><h3 id="2-2-3-删除"><a href="#2-2-3-删除" class="headerlink" title="2.2.3 删除"></a>2.2.3 删除</h3><h4 id="1-使用del语句删除元素"><a href="#1-使用del语句删除元素" class="headerlink" title="1.使用del语句删除元素"></a>1.使用del语句删除元素</h4><p>如果<u>已知所需删除的元素的位置</u>，可以使用<code>del语句</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"><span class="keyword">del</span> fruits[<span class="number">0</span>]</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘banana’, ‘orange’]</p></blockquote><h4 id="2-使用方法pop-删除元素"><a href="#2-使用方法pop-删除元素" class="headerlink" title="2.使用方法pop()删除元素"></a>2.使用方法pop()删除元素</h4><p>有时候需要<u>将元素从列表中删除，并接着使用它的值。</u></p><p>① 方法<code>pop()</code>可删除列表末尾的元素，并返回其值（类比弹出栈的栈顶元素）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line">popped_fruit = fruits.pop()</span><br><span class="line">print(popped_fruit)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’]<br>orange<br>[‘apple’, ‘banana’]</p></blockquote><p>② pop()可以在括号中加入参数，表示要删除的元素的索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>]</span><br><span class="line"></span><br><span class="line">popped_fruit = fruits.pop(<span class="number">2</span>)</span><br><span class="line">print(popped_fruit)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>orange</p></blockquote><h4 id="3-根据值使用remove方法删除元素"><a href="#3-根据值使用remove方法删除元素" class="headerlink" title="3.根据值使用remove方法删除元素"></a>3.根据值使用remove方法删除元素</h4><p>有时候，我们<u>不知道所需删除的元素的具体位置，只知道需要删除的元素的值</u>，可以使用方法<code>remove()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.remove(<span class="string">'apple'</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘banana’, ‘orange’, ‘apple’]<br>[‘banana’, ‘orange’, ‘apple’]</p></blockquote><p><font size="4" face="黑体"><strong>注意</strong>: </font>  remove只能删除第一个指定的元素<br><br><br></p><h2 id="2-3-组织列表"><a href="#2-3-组织列表" class="headerlink" title="2.3 组织列表"></a>2.3 组织列表</h2><hr><h3 id="2-3-1-使用方法sort-对列表永久性排序"><a href="#2-3-1-使用方法sort-对列表永久性排序" class="headerlink" title="2.3.1 使用方法sort()对列表永久性排序"></a>2.3.1 使用方法sort()对列表永久性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.sort()</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>[‘banana’, ‘orange’, ‘apple’]<br>[‘apple’, ‘banana’, ‘orange’]</p></blockquote><p>使用sort()之后，列表元素的顺序发生了永久性的变化</p><ul><li>如果要按相反顺序排序列表，可以向sort()方法传递参数<code>reverse = True</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">fruits.sort(reverse = <span class="literal">True</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为：</p><blockquote><p>[‘orange’, ‘banana’, ‘apple’]</p></blockquote><h3 id="2-3-2-使用函数sorted-对列表暂时性排序"><a href="#2-3-2-使用函数sorted-对列表暂时性排序" class="headerlink" title="2.3.2 使用函数sorted()对列表暂时性排序"></a>2.3.2 使用函数sorted()对列表暂时性排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Here is the original list:"</span>)</span><br><span class="line">print(fruits)</span><br><span class="line">print(<span class="string">"\nHere is the sorted list:"</span>)</span><br><span class="line">print(sorted(fruits))</span><br><span class="line">print(<span class="string">"\nHere is the original list again:"</span>)</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>Here is the original list:<br>[‘banana’, ‘orange’, ‘apple’]</p><p>Here is the sorted list:<br>[‘apple’, ‘banana’, ‘orange’]</p><p>Here is the original list again:<br>[‘banana’, ‘orange’, ‘apple’]</p></blockquote><p>可见使用sorted后，列表元素的顺序并没有发生改变，sorted函数返回的是<b>排序过的新列表</b></p><ul><li>同样，可以向sorted()函数传递参数<code>reverse = True</code> 使其反向排序</li></ul><h3 id="2-3-3-倒着打印列表"><a href="#2-3-3-倒着打印列表" class="headerlink" title="2.3.3 倒着打印列表"></a>2.3.3 倒着打印列表</h3><p>翻转列表元素的排列顺序，可以使用方法<code>reverse()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">fruits.reverse()</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>[‘apple’, ‘orange’, ‘banana’]</p></blockquote><p>可见方法reverse()永久性地改变了列表元素的排列顺序，<b>翻转了原来的列表元素顺序</b></p><h3 id="2-3-4-确定列表的长度"><a href="#2-3-4-确定列表的长度" class="headerlink" title="2.3.4 确定列表的长度"></a>2.3.4 确定列表的长度</h3><p>使用函数<code>len()</code>可以快速得到列表的长度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>]</span><br><span class="line">print(len(fruits))</span><br></pre></td></tr></table></figure></p><p>输出结果为:</p><blockquote><p>3</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二章-列表简介&quot;&gt;&lt;a href=&quot;#第二章-列表简介&quot; class=&quot;headerlink&quot; title=&quot;第二章 列表简介&quot;&gt;&lt;/a&gt;第二章 列表简介&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(一)：变量和简单数据类型</title>
    <link href="/2019/07/10/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>/2019/07/10/Python学习笔记-一/</id>
    <published>2019-07-10T05:58:37.000Z</published>
    <updated>2019-07-25T03:47:43.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-变量和简单数据类型"><a href="#第一章-变量和简单数据类型" class="headerlink" title="第一章 变量和简单数据类型"></a>第一章 变量和简单数据类型</h1><a id="more"></a><p><br><br></p><h2 id="1-1-变量的使用和命名"><a href="#1-1-变量的使用和命名" class="headerlink" title="1.1 变量的使用和命名"></a>1.1 变量的使用和命名</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"Hello World"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p><b>运行结果：</b></p><blockquote><p>Hello World</p></blockquote><p><b>变量命名规则：</b></p><ul><li>变量名只能包含<b><u>字母、数字、下划线</u></b> </li><li>变量名可以字母或者下划线打头，<u>但不能以数字打头</u></li><li>不能将Python关键字当做变量名<br><br><br></li></ul><h2 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h2><hr><p> <b>字符串</b> 就是一新系列字符。在Python中，用引号括起来的都是字符串。其中引号可以是<u>单引号</u>，也可是<u>双引号</u>，<strong><u>这使得你能够在字符串中包含引号和撇号</u></strong>。<br> 例如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"This's a string"</span></span><br><span class="line"><span class="string">'This is also a string'</span></span><br><span class="line"><span class="string">'I told you, "Python is the best in the world!" '</span></span><br><span class="line"><span class="string">"It's beautiful."</span></span><br></pre></td></tr></table></figure></p><h3 id="1-2-1-使用方法修改字符串的大小写"><a href="#1-2-1-使用方法修改字符串的大小写" class="headerlink" title="1.2.1 使用方法修改字符串的大小写"></a>1.2.1 使用方法修改字符串的大小写</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"ada lovelace"</span></span><br><span class="line">print(name.title())</span><br><span class="line">name = <span class="string">"ADa"</span></span><br><span class="line">print(name.title())</span><br><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br></pre></td></tr></table></figure><p> 输出结果：</p><blockquote><p>Ada Lovelace<br>Ada<br>ADA<br>ada</p></blockquote><p><font face="楷体" size="3"><u>方法</u> </font>是Python可对数据进行的操作。</p><ul><li>方法<code>title()</code>以首字母大写的方式显示每个单词。</li><li>方法<code>upper()</code>以大写显示所有字母字符</li><li>方法<code>lower()</code>以小写显示所有字符字母</li></ul><h3 id="1-2-2-合并（拼接）字符串"><a href="#1-2-2-合并（拼接）字符串" class="headerlink" title="1.2.2 合并（拼接）字符串"></a>1.2.2 合并（拼接）字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">"ada"</span></span><br><span class="line">second_name = <span class="string">"lovelace"</span></span><br><span class="line">full_name = first_name + <span class="string">" "</span> + second_name</span><br><span class="line">print(full_name)</span><br><span class="line">print(full_name*<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>ada lovelace<br>ada lovelaceada lovelaceada lovelace</p></blockquote><p>Python用 <strong>加号 (+)和乘号 (*)</strong> 来合并字符串。这种合并方法称为 <em>拼接</em> 。</p><p><em>e.g:</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#接上代码</span></span><br><span class="line">message = <span class="string">"Hello, "</span> + full_name.title() + <span class="string">"!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>Hello, Ada Lovelace!</p></blockquote><h3 id="1-2-3-删除空白"><a href="#1-2-3-删除空白" class="headerlink" title="1.2.3 删除空白"></a>1.2.3 删除空白</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">" python "</span></span><br><span class="line">print(s.lstrip())</span><br><span class="line">print(s.rstrip())</span><br><span class="line">print(s.strip())</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p>输出结果：</p><blockquote><p>python·  （·代表空格）<br>·python<br>python<br>·python·</p></blockquote><p><em>空白</em> 泛指任何非打印字符，包括<u>空格、制表符和换行符</u>。<br><br></p><ul><li>方法<code>strip()</code>删除字符串首尾空格。</li><li>方法<code>lstrip()</code>删除字符串首空格。</li><li>方法<code>rstrip()</code>删除字符串尾空格。</li><li>可以发现，在使用过这些方法后，原字符串并没有发生相应的变化<br><br><br></li></ul><h2 id="1-3-数字"><a href="#1-3-数字" class="headerlink" title="1.3 数字"></a>1.3 数字</h2><hr><h3 id="1-3-1-整数"><a href="#1-3-1-整数" class="headerlink" title="1.3.1 整数"></a>1.3.1 整数</h3><p>Python使用两个乘号表示乘法运算<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br></pre></td></tr></table></figure></p><h3 id="1-3-2-浮点数"><a href="#1-3-2-浮点数" class="headerlink" title="1.3.2 浮点数"></a>1.3.2 浮点数</h3><p>这个没什么好讲的</p><h3 id="1-3-3-函数str"><a href="#1-3-3-函数str" class="headerlink" title="1.3.3 函数str()"></a>1.3.3 函数str()</h3><p>在字符串中需要用到数字变量的值时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">print(<span class="string">"Happy "</span> + age + <span class="string">"th Birthday"</span>)  <span class="comment">#这种写法是错误的</span></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">返回错误报告：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"D:/Pytest/1.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="string">"Happy "</span> + age + <span class="string">"th Birthday"</span>)</span><br><span class="line">  TypeError: can only concatenate str (<span class="keyword">not</span> <span class="string">"int"</span>) to str</span><br></pre></td></tr></table></figure></p><p>之所以会出现这样的错误，是因为<u>类型不匹配</u><br>Python无法将 int 和 str 类型的变量拼接在一起</p><p>为此可以调用<code>str()</code>函数，将非字符串变量表示为字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">25</span></span><br><span class="line">print(<span class="string">"Happy "</span> + str(age) + <span class="string">"th Brithday"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果为：</p><blockquote><p>Happy 25th Birthday</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一章-变量和简单数据类型&quot;&gt;&lt;a href=&quot;#第一章-变量和简单数据类型&quot; class=&quot;headerlink&quot; title=&quot;第一章 变量和简单数据类型&quot;&gt;&lt;/a&gt;第一章 变量和简单数据类型&lt;/h1&gt;
    
    </summary>
    
      <category term="python" scheme="/categories/python/"/>
    
    
      <category term="笔记" scheme="/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>随便写写</title>
    <link href="/2019/06/15/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    <id>/2019/06/15/随便写写/</id>
    <published>2019-06-15T06:35:00.000Z</published>
    <updated>2019-07-16T04:50:27.573Z</updated>
    
    <content type="html"><![CDATA[<p><b>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</b></p><script type="math/tex; mode=display">f'(x_0)=\lim_{\Delta x\to 0} \frac{f(x_0+\Delta x) - f(x_0)}{\Delta x}</script><p>\begin{equation}\begin{split}<br>H(Y|X)&amp;=\sum_{x\in X} p(x)H(Y|X)\\<br>&amp;=-\sum_{x\in X} p(x)\sum_{y\in Y}p(y|x)\log p(y|x)\\<br>&amp;=-\sum_{x\in X} \sum_{y\in Y}p(y,x)\log p(y|x)<br>\end{split}\end{equation}</p><script type="math/tex; mode=display">\frac{\partial J} {\partial \theta_0}  =  \sum ^{m}_{i=1}2(y^{(i)} - \theta_1x^{(i)} - \theta_0)(-1) = 0</script><script type="math/tex; mode=display">=> \sum ^{m}_{i=1}(y^{(i)} - \theta_1x^{(i)} - \theta_0) =0</script><script type="math/tex; mode=display">=>\sum ^{m}_{i=1} y^{(i)} - \theta_1 \sum ^{m}_{i=1}x^{(i)} - \sum ^{m}_{i=1}\theta_0 = 0 \ => \ \sum ^{m}_{i=1} y^{(i)} - \theta_1 \sum ^{m}_{i=1}x^{(i)} - m\theta_0 = 0</script><script type="math/tex; mode=display">=>（两边同时除以m）  \ \theta_0 = \overline {y} \ - \ \theta_1 \overline{x}</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;b&gt;使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑&lt;/b&gt;&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;f&#39;(x_0)=\lim_{\Delta x\to 0} \frac
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/06/14/hello-world/"/>
    <id>/2019/06/14/hello-world/</id>
    <published>2019-06-14T05:26:58.678Z</published>
    <updated>2019-06-15T09:18:04.238Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
